{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const numberNode = (value, unit) => ({\n  type: 'number',\n  number: value,\n  unit\n});\n/**\n * Given a string representing a comma-separated set of CSS-like expressions,\n * parses and returns an array of ASTs that correspond to those expressions.\n *\n * Currently supported syntax includes:\n *\n *  - functions (top-level and nested)\n *  - calc() arithmetic operators\n *  - numbers with units\n *  - hexadecimal-encoded colors in 3, 6 or 8 digit form\n *  - idents\n *\n * All syntax is intended to match the parsing rules and semantics of the actual\n * CSS spec as closely as possible.\n *\n * @see https://www.w3.org/TR/CSS2/\n * @see https://www.w3.org/TR/css-values-3/\n */\nexport const parseExpressions = (() => {\n  const cache = {};\n  const MAX_PARSE_ITERATIONS = 1000; // Arbitrarily large\n  return inputString => {\n    const cacheKey = inputString;\n    if (cacheKey in cache) {\n      return cache[cacheKey];\n    }\n    const expressions = [];\n    let parseIterations = 0;\n    while (inputString) {\n      if (++parseIterations > MAX_PARSE_ITERATIONS) {\n        // Avoid a potentially infinite loop due to typos:\n        inputString = '';\n        break;\n      }\n      const expressionParseResult = parseExpression(inputString);\n      const expression = expressionParseResult.nodes[0];\n      if (expression == null || expression.terms.length === 0) {\n        break;\n      }\n      expressions.push(expression);\n      inputString = expressionParseResult.remainingInput;\n    }\n    return cache[cacheKey] = expressions;\n  };\n})();\n/**\n * Parse a single expression. For the purposes of our supported syntax, an\n * expression is the set of semantically meaningful terms that appear before the\n * next comma, or between the parens of a function invocation.\n */\nconst parseExpression = (() => {\n  const IS_IDENT_RE = /^(\\-\\-|[a-z\\u0240-\\uffff])/i;\n  const IS_OPERATOR_RE = /^([\\*\\+\\/]|[\\-]\\s)/i;\n  const IS_EXPRESSION_END_RE = /^[\\),]/;\n  const FUNCTION_ARGUMENTS_FIRST_TOKEN = '(';\n  const HEX_FIRST_TOKEN = '#';\n  return inputString => {\n    const terms = [];\n    while (inputString.length) {\n      inputString = inputString.trim();\n      if (IS_EXPRESSION_END_RE.test(inputString)) {\n        break;\n      } else if (inputString[0] === FUNCTION_ARGUMENTS_FIRST_TOKEN) {\n        const {\n          nodes,\n          remainingInput\n        } = parseFunctionArguments(inputString);\n        inputString = remainingInput;\n        terms.push({\n          type: 'function',\n          name: {\n            type: 'ident',\n            value: 'calc'\n          },\n          arguments: nodes\n        });\n      } else if (IS_IDENT_RE.test(inputString)) {\n        const identParseResult = parseIdent(inputString);\n        const identNode = identParseResult.nodes[0];\n        inputString = identParseResult.remainingInput;\n        if (inputString[0] === FUNCTION_ARGUMENTS_FIRST_TOKEN) {\n          const {\n            nodes,\n            remainingInput\n          } = parseFunctionArguments(inputString);\n          terms.push({\n            type: 'function',\n            name: identNode,\n            arguments: nodes\n          });\n          inputString = remainingInput;\n        } else {\n          terms.push(identNode);\n        }\n      } else if (IS_OPERATOR_RE.test(inputString)) {\n        // Operators are always a single character, so just pluck them out:\n        terms.push({\n          type: 'operator',\n          value: inputString[0]\n        });\n        inputString = inputString.slice(1);\n      } else {\n        const {\n          nodes,\n          remainingInput\n        } = inputString[0] === HEX_FIRST_TOKEN ? parseHex(inputString) : parseNumber(inputString);\n        // The remaining string may not have had any meaningful content. Exit\n        // early if this is the case:\n        if (nodes.length === 0) {\n          break;\n        }\n        terms.push(nodes[0]);\n        inputString = remainingInput;\n      }\n    }\n    return {\n      nodes: [{\n        type: 'expression',\n        terms\n      }],\n      remainingInput: inputString\n    };\n  };\n})();\n/**\n * An ident is something like a function name or the keyword \"auto\".\n */\nconst parseIdent = (() => {\n  const NOT_IDENT_RE = /[^a-z0-9_\\-\\u0240-\\uffff]/i;\n  return inputString => {\n    const match = inputString.match(NOT_IDENT_RE);\n    const ident = match == null ? inputString : inputString.substr(0, match.index);\n    const remainingInput = match == null ? '' : inputString.substr(match.index);\n    return {\n      nodes: [{\n        type: 'ident',\n        value: ident\n      }],\n      remainingInput\n    };\n  };\n})();\n/**\n * Parses a number. A number value can be expressed with an integer or\n * non-integer syntax, and usually includes a unit (but does not strictly\n * require one for our purposes).\n */\nconst parseNumber = (() => {\n  // @see https://www.w3.org/TR/css-syntax/#number-token-diagram\n  const VALUE_RE = /[\\+\\-]?(\\d+[\\.]\\d+|\\d+|[\\.]\\d+)([eE][\\+\\-]?\\d+)?/;\n  const UNIT_RE = /^[a-z%]+/i;\n  const ALLOWED_UNITS = /^(m|mm|cm|rad|deg|[%])$/;\n  return inputString => {\n    const valueMatch = inputString.match(VALUE_RE);\n    const value = valueMatch == null ? '0' : valueMatch[0];\n    inputString = value == null ? inputString : inputString.slice(value.length);\n    const unitMatch = inputString.match(UNIT_RE);\n    let unit = unitMatch != null && unitMatch[0] !== '' ? unitMatch[0] : null;\n    const remainingInput = unitMatch == null ? inputString : inputString.slice(unit.length);\n    if (unit != null && !ALLOWED_UNITS.test(unit)) {\n      unit = null;\n    }\n    return {\n      nodes: [{\n        type: 'number',\n        number: parseFloat(value) || 0,\n        unit: unit\n      }],\n      remainingInput\n    };\n  };\n})();\n/**\n * Parses a hexadecimal-encoded color in 3, 6 or 8 digit form.\n */\nconst parseHex = (() => {\n  // TODO(cdata): right now we don't actually enforce the number of digits\n  const HEX_RE = /^[a-f0-9]*/i;\n  return inputString => {\n    inputString = inputString.slice(1).trim();\n    const hexMatch = inputString.match(HEX_RE);\n    const nodes = hexMatch == null ? [] : [{\n      type: 'hex',\n      value: hexMatch[0]\n    }];\n    return {\n      nodes,\n      remainingInput: hexMatch == null ? inputString : inputString.slice(hexMatch[0].length)\n    };\n  };\n})();\n/**\n * Parses arguments passed to a function invocation (e.g., the expressions\n * within a matched set of parens).\n */\nconst parseFunctionArguments = inputString => {\n  const expressionNodes = [];\n  // Consume the opening paren\n  inputString = inputString.slice(1).trim();\n  while (inputString.length) {\n    const expressionParseResult = parseExpression(inputString);\n    expressionNodes.push(expressionParseResult.nodes[0]);\n    inputString = expressionParseResult.remainingInput.trim();\n    if (inputString[0] === ',') {\n      inputString = inputString.slice(1).trim();\n    } else if (inputString[0] === ')') {\n      // Consume the closing paren and stop parsing\n      inputString = inputString.slice(1);\n      break;\n    }\n  }\n  return {\n    nodes: expressionNodes,\n    remainingInput: inputString\n  };\n};\nconst $visitedTypes = Symbol('visitedTypes');\n/**\n * An ASTWalker walks an array of ASTs such as the type produced by\n * parseExpressions and invokes a callback for a configured set of nodes that\n * the user wishes to \"visit\" during the walk.\n */\nexport class ASTWalker {\n  constructor(visitedTypes) {\n    this[$visitedTypes] = visitedTypes;\n  }\n  /**\n   * Walk the given set of ASTs, and invoke the provided callback for nodes that\n   * match the filtered set that the ASTWalker was constructed with.\n   */\n  walk(ast, callback) {\n    const remaining = ast.slice();\n    while (remaining.length) {\n      const next = remaining.shift();\n      if (this[$visitedTypes].indexOf(next.type) > -1) {\n        callback(next);\n      }\n      switch (next.type) {\n        case 'expression':\n          remaining.unshift(...next.terms);\n          break;\n        case 'function':\n          remaining.unshift(next.name, ...next.arguments);\n          break;\n      }\n    }\n  }\n}\nexport const ZERO = Object.freeze({\n  type: 'number',\n  number: 0,\n  unit: null\n});","map":{"version":3,"names":["numberNode","value","unit","type","number","parseExpressions","cache","MAX_PARSE_ITERATIONS","inputString","cacheKey","expressions","parseIterations","expressionParseResult","parseExpression","expression","nodes","terms","length","push","remainingInput","IS_IDENT_RE","IS_OPERATOR_RE","IS_EXPRESSION_END_RE","FUNCTION_ARGUMENTS_FIRST_TOKEN","HEX_FIRST_TOKEN","trim","test","parseFunctionArguments","name","arguments","identParseResult","parseIdent","identNode","slice","parseHex","parseNumber","NOT_IDENT_RE","match","ident","substr","index","VALUE_RE","UNIT_RE","ALLOWED_UNITS","valueMatch","unitMatch","parseFloat","HEX_RE","hexMatch","expressionNodes","$visitedTypes","Symbol","ASTWalker","constructor","visitedTypes","walk","ast","callback","remaining","next","shift","indexOf","unshift","ZERO","Object","freeze"],"sources":["../../src/styles/parsers.ts"],"sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// The operators that are available in CSS calc() functions\n// include symbols for addition, subtraction, multiplication and division\n// @see https://www.w3.org/TR/css-values-3/#calc-syntax\nexport type Operator = '+'|'-'|'*'|'/';\n\n// We only support units for length in meters, radians and degrees for angles\n// and percentage values\nexport type Unit = 'm'|'cm'|'mm'|'rad'|'deg';\nexport type Percentage = '%';\n\n// Any node that might appear in a parsed expression is referred to as an\n// ExpressionTerm\nexport type ExpressionTerm =\n    IdentNode|HexNode|NumberNode|OperatorNode|FunctionNode;\n\nexport interface IdentNode {\n  type: 'ident';\n  value: string;\n}\n\nexport interface HexNode {\n  type: 'hex';\n  value: string;\n}\n\nexport interface NumberNode<U = Unit | Percentage | null> {\n  type: 'number';\n  number: number;\n  unit: U;\n}\n\nexport const numberNode =\n    <T extends Unit|Percentage|null>(value: number, unit: T): NumberNode<T> =>\n        ({type: 'number', number: value, unit});\n\nexport interface OperatorNode {\n  type: 'operator';\n  value: Operator;\n}\n\nexport interface FunctionNode {\n  type: 'function';\n  name: IdentNode;\n  arguments: Array<ExpressionNode>;\n}\n\nexport interface ExpressionNode {\n  type: 'expression';\n  terms: Array<ExpressionTerm>;\n}\n\nexport type ASTNode =\n    IdentNode|HexNode|NumberNode|OperatorNode|FunctionNode|ExpressionNode;\n\n// As an internal detail of this module, non-exported parsers return both a\n// set of nodes and the remaining string input to be parsed. This saves us a bit\n// of book keeping work and allows our internal parser implementations to remain\n// essentially stateless.\ninterface ParseResult<T extends ASTNode> {\n  nodes: Array<T>;\n  remainingInput: string;\n}\n\n/**\n * Given a string representing a comma-separated set of CSS-like expressions,\n * parses and returns an array of ASTs that correspond to those expressions.\n *\n * Currently supported syntax includes:\n *\n *  - functions (top-level and nested)\n *  - calc() arithmetic operators\n *  - numbers with units\n *  - hexadecimal-encoded colors in 3, 6 or 8 digit form\n *  - idents\n *\n * All syntax is intended to match the parsing rules and semantics of the actual\n * CSS spec as closely as possible.\n *\n * @see https://www.w3.org/TR/CSS2/\n * @see https://www.w3.org/TR/css-values-3/\n */\nexport const parseExpressions = (() => {\n  const cache: {[index: string]: Array<ExpressionNode>} = {};\n  const MAX_PARSE_ITERATIONS = 1000;  // Arbitrarily large\n\n  return (inputString: string): Array<ExpressionNode> => {\n    const cacheKey = inputString;\n\n    if (cacheKey in cache) {\n      return cache[cacheKey];\n    }\n\n    const expressions: Array<ExpressionNode> = [];\n    let parseIterations = 0;\n\n    while (inputString) {\n      if (++parseIterations > MAX_PARSE_ITERATIONS) {\n        // Avoid a potentially infinite loop due to typos:\n        inputString = '';\n        break;\n      }\n\n      const expressionParseResult = parseExpression(inputString);\n      const expression = expressionParseResult.nodes[0];\n\n      if (expression == null || expression.terms.length === 0) {\n        break;\n      }\n\n      expressions.push(expression);\n      inputString = expressionParseResult.remainingInput;\n    }\n\n    return cache[cacheKey] = expressions;\n  };\n})();\n\n\n/**\n * Parse a single expression. For the purposes of our supported syntax, an\n * expression is the set of semantically meaningful terms that appear before the\n * next comma, or between the parens of a function invocation.\n */\nconst parseExpression = (() => {\n  const IS_IDENT_RE = /^(\\-\\-|[a-z\\u0240-\\uffff])/i;\n  const IS_OPERATOR_RE = /^([\\*\\+\\/]|[\\-]\\s)/i;\n  const IS_EXPRESSION_END_RE = /^[\\),]/;\n  const FUNCTION_ARGUMENTS_FIRST_TOKEN = '(';\n  const HEX_FIRST_TOKEN = '#';\n\n  return (inputString: string): ParseResult<ExpressionNode> => {\n    const terms: Array<ExpressionTerm> = [];\n\n    while (inputString.length) {\n      inputString = inputString.trim();\n\n      if (IS_EXPRESSION_END_RE.test(inputString)) {\n        break;\n      } else if (inputString[0] === FUNCTION_ARGUMENTS_FIRST_TOKEN) {\n        const {nodes, remainingInput} = parseFunctionArguments(inputString);\n\n        inputString = remainingInput;\n\n        terms.push({\n          type: 'function',\n          name: {type: 'ident', value: 'calc'},\n          arguments: nodes\n        });\n      } else if (IS_IDENT_RE.test(inputString)) {\n        const identParseResult = parseIdent(inputString);\n        const identNode = identParseResult.nodes[0];\n\n        inputString = identParseResult.remainingInput;\n\n        if (inputString[0] === FUNCTION_ARGUMENTS_FIRST_TOKEN) {\n          const {nodes, remainingInput} = parseFunctionArguments(inputString);\n          terms.push({type: 'function', name: identNode, arguments: nodes});\n          inputString = remainingInput;\n        } else {\n          terms.push(identNode);\n        }\n      } else if (IS_OPERATOR_RE.test(inputString)) {\n        // Operators are always a single character, so just pluck them out:\n        terms.push({type: 'operator', value: inputString[0] as Operator});\n        inputString = inputString.slice(1);\n      } else {\n        const {nodes, remainingInput} = inputString[0] === HEX_FIRST_TOKEN ?\n            parseHex(inputString) :\n            parseNumber(inputString);\n\n        // The remaining string may not have had any meaningful content. Exit\n        // early if this is the case:\n        if (nodes.length === 0) {\n          break;\n        }\n\n        terms.push(nodes[0]);\n        inputString = remainingInput;\n      }\n    }\n\n    return {nodes: [{type: 'expression', terms}], remainingInput: inputString};\n  };\n})();\n\n\n/**\n * An ident is something like a function name or the keyword \"auto\".\n */\nconst parseIdent = (() => {\n  const NOT_IDENT_RE = /[^a-z0-9_\\-\\u0240-\\uffff]/i;\n\n  return (inputString: string): ParseResult<IdentNode> => {\n    const match = inputString.match(NOT_IDENT_RE);\n    const ident =\n        match == null ? inputString : inputString.substr(0, match.index);\n    const remainingInput =\n        match == null ? '' : inputString.substr(match.index!);\n\n    return {nodes: [{type: 'ident', value: ident}], remainingInput};\n  };\n})();\n\n\n/**\n * Parses a number. A number value can be expressed with an integer or\n * non-integer syntax, and usually includes a unit (but does not strictly\n * require one for our purposes).\n */\nconst parseNumber = (() => {\n  // @see https://www.w3.org/TR/css-syntax/#number-token-diagram\n  const VALUE_RE = /[\\+\\-]?(\\d+[\\.]\\d+|\\d+|[\\.]\\d+)([eE][\\+\\-]?\\d+)?/;\n  const UNIT_RE = /^[a-z%]+/i;\n  const ALLOWED_UNITS = /^(m|mm|cm|rad|deg|[%])$/;\n\n  return (inputString: string): ParseResult<NumberNode> => {\n    const valueMatch = inputString.match(VALUE_RE);\n    const value = valueMatch == null ? '0' : valueMatch[0];\n    inputString = value == null ? inputString : inputString.slice(value.length);\n\n    const unitMatch = inputString.match(UNIT_RE);\n    let unit = unitMatch != null && unitMatch[0] !== '' ? unitMatch[0] : null;\n    const remainingInput =\n        unitMatch == null ? inputString : inputString.slice(unit!.length);\n\n    if (unit != null && !ALLOWED_UNITS.test(unit)) {\n      unit = null;\n    }\n\n    return {\n      nodes: [{\n        type: 'number',\n        number: parseFloat(value) || 0,\n        unit: unit as Unit | Percentage | null\n      }],\n      remainingInput\n    };\n  };\n})();\n\n\n/**\n * Parses a hexadecimal-encoded color in 3, 6 or 8 digit form.\n */\nconst parseHex = (() => {\n  // TODO(cdata): right now we don't actually enforce the number of digits\n  const HEX_RE = /^[a-f0-9]*/i;\n\n  return (inputString: string): ParseResult<HexNode> => {\n    inputString = inputString.slice(1).trim();\n    const hexMatch = inputString.match(HEX_RE);\n    const nodes: Array<HexNode> =\n        hexMatch == null ? [] : [{type: 'hex', value: hexMatch[0]}];\n\n    return {\n      nodes,\n      remainingInput: hexMatch == null ? inputString :\n                                         inputString.slice(hexMatch[0].length)\n    };\n  };\n})();\n\n\n/**\n * Parses arguments passed to a function invocation (e.g., the expressions\n * within a matched set of parens).\n */\nconst parseFunctionArguments =\n    (inputString: string): ParseResult<ExpressionNode> => {\n      const expressionNodes: Array<ExpressionNode> = [];\n\n      // Consume the opening paren\n      inputString = inputString.slice(1).trim();\n\n      while (inputString.length) {\n        const expressionParseResult = parseExpression(inputString);\n        expressionNodes.push(expressionParseResult.nodes[0]);\n        inputString = expressionParseResult.remainingInput.trim();\n\n        if (inputString[0] === ',') {\n          inputString = inputString.slice(1).trim();\n        } else if (inputString[0] === ')') {\n          // Consume the closing paren and stop parsing\n          inputString = inputString.slice(1);\n          break;\n        }\n      }\n\n      return {nodes: expressionNodes, remainingInput: inputString};\n    };\n\n\nexport type ASTWalkerCallback<T> = (node: T) => void;\n\nconst $visitedTypes = Symbol('visitedTypes');\n\n/**\n * An ASTWalker walks an array of ASTs such as the type produced by\n * parseExpressions and invokes a callback for a configured set of nodes that\n * the user wishes to \"visit\" during the walk.\n */\nexport class ASTWalker<T extends ASTNode> {\n  protected[$visitedTypes]: Array<string>;\n  constructor(visitedTypes: Array<string>) {\n    this[$visitedTypes] = visitedTypes;\n  }\n\n  /**\n   * Walk the given set of ASTs, and invoke the provided callback for nodes that\n   * match the filtered set that the ASTWalker was constructed with.\n   */\n  walk(ast: Array<ExpressionNode>, callback: ASTWalkerCallback<T>) {\n    const remaining: Array<ASTNode> = ast.slice();\n\n    while (remaining.length) {\n      const next = remaining.shift()!;\n\n      if (this[$visitedTypes].indexOf(next.type) > -1) {\n        callback(next as T);\n      }\n\n      switch (next.type) {\n        case 'expression':\n          remaining.unshift(...next.terms);\n          break;\n        case 'function':\n          remaining.unshift(next.name, ...next.arguments);\n          break;\n      }\n    }\n  }\n}\n\nexport const ZERO: NumberNode =\n    Object.freeze({type: 'number', number: 0, unit: null});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}