{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { clamp } from '../utilities.js';\n/**\n * ProgressTracker is an event emitter that helps to track the ongoing progress\n * of many simultaneous actions.\n *\n * ProgressTracker reports progress activity in the form of a progress event.\n * The event.detail.totalProgress value indicates the elapsed progress of all\n * activities being tracked by the ProgressTracker.\n *\n * The value of totalProgress is a number that progresses from 0 to 1. The\n * ProgressTracker allows for the lazy accumulation of tracked actions, so the\n * total progress represents a abstract, non-absolute progress towards the\n * completion of all currently tracked events.\n *\n * When all currently tracked activities are finished, the ProgressTracker\n * emits one final progress event and then resets the list of its currently\n * tracked activities. This means that from an observer's perspective,\n * ongoing activities will accumulate and collectively contribute to the notion\n * of total progress until all currently tracked ongoing activities have\n * completed.\n */\nexport class ProgressTracker extends EventTarget {\n  constructor() {\n    super(...arguments);\n    this.ongoingActivities = new Set();\n    this.totalProgress = 0;\n  }\n  /**\n   * The total number of activities currently being tracked.\n   */\n  get ongoingActivityCount() {\n    return this.ongoingActivities.size;\n  }\n  /**\n   * Registers a new activity to be tracked by the progress tracker. The method\n   * returns a special callback that should be invoked whenever new progress is\n   * ready to be reported. The progress should be reported as a value between 0\n   * and 1, where 0 would represent the beginning of the action and 1 would\n   * represent its completion.\n   *\n   * There is no built-in notion of a time-out for ongoing activities, so once\n   * an ongoing activity is begun, it is up to the consumer of this API to\n   * update the progress until that activity is no longer ongoing.\n   *\n   * Progress is only allowed to move forward for any given activity. If a lower\n   * progress is reported than the previously reported progress, it will be\n   * ignored.\n   */\n  beginActivity() {\n    const activity = {\n      progress: 0,\n      completed: false\n    };\n    this.ongoingActivities.add(activity);\n    if (this.ongoingActivityCount === 1) {\n      // Announce the first progress event (which should always be 0 / 1\n      // total progress):\n      this.announceTotalProgress(activity, 0);\n    }\n    return progress => {\n      let nextProgress;\n      nextProgress = Math.max(clamp(progress, 0, 1), activity.progress);\n      if (nextProgress !== activity.progress) {\n        this.announceTotalProgress(activity, nextProgress);\n      }\n      return activity.progress;\n    };\n  }\n  announceTotalProgress(updatedActivity, nextProgress) {\n    let progressLeft = 0;\n    let completedActivities = 0;\n    if (nextProgress == 1.0) updatedActivity.completed = true;\n    for (const activity of this.ongoingActivities) {\n      const {\n        progress\n      } = activity;\n      progressLeft += 1.0 - progress;\n      if (activity.completed === true) {\n        completedActivities++;\n      }\n    }\n    const lastProgress = updatedActivity.progress;\n    updatedActivity.progress = nextProgress;\n    // Advance the total progress by the fraction of total remaining progress\n    // due to this activity.\n    this.totalProgress += (nextProgress - lastProgress) * (1.0 - this.totalProgress) / progressLeft;\n    const totalProgress = completedActivities === this.ongoingActivityCount ? 1.0 : this.totalProgress;\n    this.dispatchEvent(new CustomEvent('progress', {\n      detail: {\n        totalProgress\n      }\n    }));\n    if (completedActivities === this.ongoingActivityCount) {\n      this.totalProgress = 0.0;\n      this.ongoingActivities.clear();\n    }\n  }\n}","map":{"version":3,"names":["clamp","ProgressTracker","EventTarget","constructor","ongoingActivities","Set","totalProgress","ongoingActivityCount","size","beginActivity","activity","progress","completed","add","announceTotalProgress","nextProgress","Math","max","updatedActivity","progressLeft","completedActivities","lastProgress","dispatchEvent","CustomEvent","detail","clear"],"sources":["../../src/utilities/progress-tracker.ts"],"sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {clamp} from '../utilities.js';\n\ninterface OngoingActivity {\n  progress: number;\n  completed: boolean;\n}\n\n/**\n * An Activity is represented by a callback that accepts values from 0 to 1,\n * where 1 represents the completion of the activity. The callback returns the\n * actual progress as it is stored by the ProgressTracker (which may be clamped,\n * and can never be lower than its previous value).\n */\nexport type Activity = (progress: number) => number;\n\n/**\n * A progress event contains the total progress of all ongoing activities in the\n * ProgressTracker. The total progress is a heuristic, but has some useful\n * properties: for a single activity, it equals the input progress; for multiple\n * activities that progress in lockstep, it will also equal each input progress.\n * When more activities overlap as time goes on, total progress will tend to\n * decelerate.\n */\nexport interface ProgressDetails {\n  totalProgress: number;\n}\n\n/**\n * ProgressTracker is an event emitter that helps to track the ongoing progress\n * of many simultaneous actions.\n *\n * ProgressTracker reports progress activity in the form of a progress event.\n * The event.detail.totalProgress value indicates the elapsed progress of all\n * activities being tracked by the ProgressTracker.\n *\n * The value of totalProgress is a number that progresses from 0 to 1. The\n * ProgressTracker allows for the lazy accumulation of tracked actions, so the\n * total progress represents a abstract, non-absolute progress towards the\n * completion of all currently tracked events.\n *\n * When all currently tracked activities are finished, the ProgressTracker\n * emits one final progress event and then resets the list of its currently\n * tracked activities. This means that from an observer's perspective,\n * ongoing activities will accumulate and collectively contribute to the notion\n * of total progress until all currently tracked ongoing activities have\n * completed.\n */\nexport class ProgressTracker extends EventTarget {\n  private ongoingActivities: Set<OngoingActivity> = new Set();\n  private totalProgress = 0;\n\n  /**\n   * The total number of activities currently being tracked.\n   */\n  get ongoingActivityCount(): number {\n    return this.ongoingActivities.size;\n  }\n\n  /**\n   * Registers a new activity to be tracked by the progress tracker. The method\n   * returns a special callback that should be invoked whenever new progress is\n   * ready to be reported. The progress should be reported as a value between 0\n   * and 1, where 0 would represent the beginning of the action and 1 would\n   * represent its completion.\n   *\n   * There is no built-in notion of a time-out for ongoing activities, so once\n   * an ongoing activity is begun, it is up to the consumer of this API to\n   * update the progress until that activity is no longer ongoing.\n   *\n   * Progress is only allowed to move forward for any given activity. If a lower\n   * progress is reported than the previously reported progress, it will be\n   * ignored.\n   */\n  beginActivity(): Activity {\n    const activity: OngoingActivity = {progress: 0, completed: false};\n\n    this.ongoingActivities.add(activity);\n\n    if (this.ongoingActivityCount === 1) {\n      // Announce the first progress event (which should always be 0 / 1\n      // total progress):\n      this.announceTotalProgress(activity, 0);\n    }\n\n    return (progress: number): number => {\n      let nextProgress: number;\n\n      nextProgress = Math.max(clamp(progress, 0, 1), activity.progress);\n\n      if (nextProgress !== activity.progress) {\n        this.announceTotalProgress(activity, nextProgress);\n      }\n\n      return activity.progress;\n    };\n  }\n\n  private announceTotalProgress(\n      updatedActivity: OngoingActivity, nextProgress: number) {\n    let progressLeft = 0;\n    let completedActivities = 0;\n\n    if (nextProgress == 1.0)\n      updatedActivity.completed = true;\n\n    for (const activity of this.ongoingActivities) {\n      const {progress} = activity;\n      progressLeft += 1.0 - progress;\n\n      if (activity.completed === true) {\n        completedActivities++;\n      }\n    }\n\n    const lastProgress = updatedActivity.progress;\n    updatedActivity.progress = nextProgress;\n\n    // Advance the total progress by the fraction of total remaining progress\n    // due to this activity.\n    this.totalProgress += (nextProgress - lastProgress) *\n        (1.0 - this.totalProgress) / progressLeft;\n\n    const totalProgress = completedActivities === this.ongoingActivityCount ?\n        1.0 :\n        this.totalProgress;\n\n    this.dispatchEvent(new CustomEvent<ProgressDetails>(\n        'progress', {detail: {totalProgress}}));\n\n    if (completedActivities === this.ongoingActivityCount) {\n      this.totalProgress = 0.0;\n      this.ongoingActivities.clear();\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAeA,SAAQA,KAAK,QAAO,iBAAiB;AA2BrC;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,MAAOC,eAAgB,SAAQC,WAAW;EAAhDC,YAAA;;IACU,KAAAC,iBAAiB,GAAyB,IAAIC,GAAG,EAAE;IACnD,KAAAC,aAAa,GAAG,CAAC;EAqF3B;EAnFE;;;EAGA,IAAIC,oBAAoBA,CAAA;IACtB,OAAO,IAAI,CAACH,iBAAiB,CAACI,IAAI;EACpC;EAEA;;;;;;;;;;;;;;;EAeAC,aAAaA,CAAA;IACX,MAAMC,QAAQ,GAAoB;MAACC,QAAQ,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAK,CAAC;IAEjE,IAAI,CAACR,iBAAiB,CAACS,GAAG,CAACH,QAAQ,CAAC;IAEpC,IAAI,IAAI,CAACH,oBAAoB,KAAK,CAAC,EAAE;MACnC;MACA;MACA,IAAI,CAACO,qBAAqB,CAACJ,QAAQ,EAAE,CAAC,CAAC;;IAGzC,OAAQC,QAAgB,IAAY;MAClC,IAAII,YAAoB;MAExBA,YAAY,GAAGC,IAAI,CAACC,GAAG,CAACjB,KAAK,CAACW,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,EAAED,QAAQ,CAACC,QAAQ,CAAC;MAEjE,IAAII,YAAY,KAAKL,QAAQ,CAACC,QAAQ,EAAE;QACtC,IAAI,CAACG,qBAAqB,CAACJ,QAAQ,EAAEK,YAAY,CAAC;;MAGpD,OAAOL,QAAQ,CAACC,QAAQ;IAC1B,CAAC;EACH;EAEQG,qBAAqBA,CACzBI,eAAgC,EAAEH,YAAoB;IACxD,IAAII,YAAY,GAAG,CAAC;IACpB,IAAIC,mBAAmB,GAAG,CAAC;IAE3B,IAAIL,YAAY,IAAI,GAAG,EACrBG,eAAe,CAACN,SAAS,GAAG,IAAI;IAElC,KAAK,MAAMF,QAAQ,IAAI,IAAI,CAACN,iBAAiB,EAAE;MAC7C,MAAM;QAACO;MAAQ,CAAC,GAAGD,QAAQ;MAC3BS,YAAY,IAAI,GAAG,GAAGR,QAAQ;MAE9B,IAAID,QAAQ,CAACE,SAAS,KAAK,IAAI,EAAE;QAC/BQ,mBAAmB,EAAE;;;IAIzB,MAAMC,YAAY,GAAGH,eAAe,CAACP,QAAQ;IAC7CO,eAAe,CAACP,QAAQ,GAAGI,YAAY;IAEvC;IACA;IACA,IAAI,CAACT,aAAa,IAAI,CAACS,YAAY,GAAGM,YAAY,KAC7C,GAAG,GAAG,IAAI,CAACf,aAAa,CAAC,GAAGa,YAAY;IAE7C,MAAMb,aAAa,GAAGc,mBAAmB,KAAK,IAAI,CAACb,oBAAoB,GACnE,GAAG,GACH,IAAI,CAACD,aAAa;IAEtB,IAAI,CAACgB,aAAa,CAAC,IAAIC,WAAW,CAC9B,UAAU,EAAE;MAACC,MAAM,EAAE;QAAClB;MAAa;IAAC,CAAC,CAAC,CAAC;IAE3C,IAAIc,mBAAmB,KAAK,IAAI,CAACb,oBAAoB,EAAE;MACrD,IAAI,CAACD,aAAa,GAAG,GAAG;MACxB,IAAI,CAACF,iBAAiB,CAACqB,KAAK,EAAE;;EAElC"},"metadata":{},"sourceType":"module","externalDependencies":[]}