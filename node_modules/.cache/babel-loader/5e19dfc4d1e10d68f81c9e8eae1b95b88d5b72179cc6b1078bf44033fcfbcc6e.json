{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { property } from 'lit/decorators.js';\nimport { Vector3 } from 'three';\nimport { $altDefaulted, $announceModelVisibility, $getModelIsVisible, $isElementInViewport, $progressTracker, $scene, $shouldAttemptPreload, $updateSource, $userInputElement, toVector3D } from '../model-viewer-base.js';\nimport { $loader, CachingGLTFLoader } from '../three-components/CachingGLTFLoader.js';\nimport { Renderer } from '../three-components/Renderer.js';\nimport { throttle } from '../utilities.js';\nexport const PROGRESS_BAR_UPDATE_THRESHOLD = 100;\nconst DEFAULT_DRACO_DECODER_LOCATION = 'https://www.gstatic.com/draco/versioned/decoders/1.5.6/';\nconst DEFAULT_KTX2_TRANSCODER_LOCATION = 'https://www.gstatic.com/basis-universal/versioned/2021-04-15-ba1c3e4/';\nconst DEFAULT_LOTTIE_LOADER_LOCATION = 'https://cdn.jsdelivr.net/npm/three@0.149.0/examples/jsm/loaders/LottieLoader.js';\nconst RevealStrategy = {\n  AUTO: 'auto',\n  MANUAL: 'manual'\n};\nconst LoadingStrategy = {\n  AUTO: 'auto',\n  LAZY: 'lazy',\n  EAGER: 'eager'\n};\nexport const $defaultProgressBarElement = Symbol('defaultProgressBarElement');\nexport const $posterContainerElement = Symbol('posterContainerElement');\nexport const $defaultPosterElement = Symbol('defaultPosterElement');\nconst $shouldDismissPoster = Symbol('shouldDismissPoster');\nconst $hidePoster = Symbol('hidePoster');\nconst $modelIsRevealed = Symbol('modelIsRevealed');\nconst $updateProgressBar = Symbol('updateProgressBar');\nconst $ariaLabelCallToAction = Symbol('ariaLabelCallToAction');\nconst $onProgress = Symbol('onProgress');\n/**\n * LoadingMixin implements features related to lazy loading, as well as\n * presentation details related to the pre-load / pre-render presentation of a\n * <model-viewer>\n *\n * This mixin implements support for models with DRACO-compressed meshes.\n * The DRACO decoder will be loaded on-demand if a glTF that uses the DRACO mesh\n * compression extension is encountered.\n *\n * By default, the DRACO decoder will be loaded from a Google CDN. It is\n * possible to customize where the decoder is loaded from by defining a global\n * configuration option for `<model-viewer>` like so:\n *\n * ```html\n * <script>\n * self.ModelViewerElement = self.ModelViewerElement || {};\n * self.ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration strategy must be performed *before* the\n * first `<model-viewer>` element is created in the browser. The configuration\n * can be done anywhere, but the easiest way to ensure it is done at the right\n * time is to do it in the `<head>` of the HTML document. This is the\n * recommended way to set the location because it is most compatible with\n * scenarios where the `<model-viewer>` library is lazily loaded.\n *\n * If you absolutely have to set the DRACO decoder location *after* the first\n * `<model-viewer>` element is created, you can do it this way:\n *\n * ```html\n * <script>\n * const ModelViewerElement = customElements.get('model-viewer');\n * ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration approach will not work until *after*\n * `<model-viewer>` is defined in the browser. Also note that this configuration\n * *must* be set *before* the first DRACO model is fully loaded.\n *\n * It is recommended that users who intend to take advantage of DRACO mesh\n * compression consider whether or not it is acceptable for their use case to\n * have code side-loaded from a Google CDN. If it is not acceptable, then the\n * location must be customized before loading any DRACO models in order to cause\n * the decoder to be loaded from an alternative, acceptable location.\n */\nexport const LoadingMixin = ModelViewerElement => {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  class LoadingModelViewerElement extends ModelViewerElement {\n    constructor(...args) {\n      super(...args);\n      /**\n       * A URL pointing to the image to use as a poster in scenarios where the\n       * <model-viewer> is not ready to reveal a rendered model to the viewer.\n       */\n      this.poster = null;\n      /**\n       * An enumerable attribute describing under what conditions the\n       * <model-viewer> should reveal a model to the viewer.\n       *\n       * The default value is \"auto\". The only supported alternative values is\n       * \"manual\".\n       */\n      this.reveal = RevealStrategy.AUTO;\n      /**\n       * An enumerable attribute describing under what conditions the\n       * <model-viewer> should preload a model.\n       *\n       * The default value is \"auto\". The only supported alternative values are\n       * \"lazy\" and \"eager\". Auto is equivalent to lazy, which loads the model\n       * when it is near the viewport for reveal = \"auto\", and when interacted\n       * with for reveal = \"interaction\". Eager loads the model immediately.\n       */\n      this.loading = LoadingStrategy.AUTO;\n      this[_a] = false;\n      this[_b] = false;\n      // TODO: Add this to the shadow root as part of this mixin's\n      // implementation:\n      this[_c] = this.shadowRoot.querySelector('.slot.poster');\n      this[_d] = this.shadowRoot.querySelector('#default-poster');\n      this[_e] = this.shadowRoot.querySelector('#default-progress-bar > .bar');\n      this[_f] = this[$defaultPosterElement].getAttribute('aria-label');\n      this[_g] = throttle(progress => {\n        const parentNode = this[$defaultProgressBarElement].parentNode;\n        requestAnimationFrame(() => {\n          this[$defaultProgressBarElement].style.transform = `scaleX(${progress})`;\n          if (progress === 0) {\n            // NOTE(cdata): We remove and re-append the progress bar in this\n            // condition so that the progress bar does not appear to\n            // transition backwards from the right when we reset to 0 (or\n            // otherwise <1) progress after having already reached 1 progress\n            // previously.\n            parentNode.removeChild(this[$defaultProgressBarElement]);\n            parentNode.appendChild(this[$defaultProgressBarElement]);\n          }\n          // NOTE(cdata): IE11 does not properly respect the second parameter\n          // of classList.toggle, which this implementation originally used.\n          // @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11865865/\n          if (progress === 1.0) {\n            this[$defaultProgressBarElement].classList.add('hide');\n          } else {\n            this[$defaultProgressBarElement].classList.remove('hide');\n          }\n        });\n      }, PROGRESS_BAR_UPDATE_THRESHOLD);\n      this[_h] = event => {\n        const progress = event.detail.totalProgress;\n        if (progress === 1.0) {\n          this[$updateProgressBar].flush();\n          if (this.loaded && (this[$shouldDismissPoster] || this.reveal === RevealStrategy.AUTO)) {\n            this[$hidePoster]();\n          }\n        }\n        this[$updateProgressBar](progress);\n        this.dispatchEvent(new CustomEvent('progress', {\n          detail: {\n            totalProgress: progress\n          }\n        }));\n      };\n      const ModelViewerElement = self.ModelViewerElement || {};\n      const dracoDecoderLocation = ModelViewerElement.dracoDecoderLocation || DEFAULT_DRACO_DECODER_LOCATION;\n      CachingGLTFLoader.setDRACODecoderLocation(dracoDecoderLocation);\n      const ktx2TranscoderLocation = ModelViewerElement.ktx2TranscoderLocation || DEFAULT_KTX2_TRANSCODER_LOCATION;\n      CachingGLTFLoader.setKTX2TranscoderLocation(ktx2TranscoderLocation);\n      if (ModelViewerElement.meshoptDecoderLocation) {\n        CachingGLTFLoader.setMeshoptDecoderLocation(ModelViewerElement.meshoptDecoderLocation);\n      }\n      const lottieLoaderLocation = ModelViewerElement.lottieLoaderLocation || DEFAULT_LOTTIE_LOADER_LOCATION;\n      Renderer.singleton.textureUtils.lottieLoaderUrl = lottieLoaderLocation;\n    }\n    static set dracoDecoderLocation(value) {\n      CachingGLTFLoader.setDRACODecoderLocation(value);\n    }\n    static get dracoDecoderLocation() {\n      return CachingGLTFLoader.getDRACODecoderLocation();\n    }\n    static set ktx2TranscoderLocation(value) {\n      CachingGLTFLoader.setKTX2TranscoderLocation(value);\n    }\n    static get ktx2TranscoderLocation() {\n      return CachingGLTFLoader.getKTX2TranscoderLocation();\n    }\n    static set meshoptDecoderLocation(value) {\n      CachingGLTFLoader.setMeshoptDecoderLocation(value);\n    }\n    static get meshoptDecoderLocation() {\n      return CachingGLTFLoader.getMeshoptDecoderLocation();\n    }\n    static set lottieLoaderLocation(value) {\n      Renderer.singleton.textureUtils.lottieLoaderUrl = value;\n    }\n    static get lottieLoaderLocation() {\n      return Renderer.singleton.textureUtils.lottieLoaderUrl;\n    }\n    /**\n     * If provided, the callback will be passed each resource URL before a\n     * request is sent. The callback may return the original URL, or a new URL\n     * to override loading behavior. This behavior can be used to load assets\n     * from .ZIP files, drag-and-drop APIs, and Data URIs.\n     */\n    static mapURLs(callback) {\n      Renderer.singleton.loader[$loader].manager.setURLModifier(callback);\n    }\n    /**\n     * Dismisses the poster, causing the model to load and render if\n     * necessary. This is currently effectively the same as interacting with\n     * the poster via user input.\n     */\n    dismissPoster() {\n      if (this.loaded) {\n        this[$hidePoster]();\n      } else {\n        this[$shouldDismissPoster] = true;\n        this[$updateSource]();\n      }\n    }\n    /**\n     * Displays the poster, hiding the 3D model. If this is called after the 3D\n     * model has been revealed, then it must be dismissed by a call to\n     * dismissPoster().\n     */\n    showPoster() {\n      const posterContainerElement = this[$posterContainerElement];\n      if (posterContainerElement.classList.contains('show')) {\n        return;\n      }\n      posterContainerElement.classList.add('show');\n      this[$userInputElement].classList.remove('show');\n      const defaultPosterElement = this[$defaultPosterElement];\n      defaultPosterElement.removeAttribute('tabindex');\n      defaultPosterElement.removeAttribute('aria-hidden');\n      const oldVisibility = this.modelIsVisible;\n      this[$modelIsRevealed] = false;\n      this[$announceModelVisibility](oldVisibility);\n    }\n    /**\n     * Returns the model's bounding box dimensions in meters, independent of\n     * turntable rotation.\n     */\n    getDimensions() {\n      return toVector3D(this[$scene].size);\n    }\n    getBoundingBoxCenter() {\n      return toVector3D(this[$scene].boundingBox.getCenter(new Vector3()));\n    }\n    connectedCallback() {\n      super.connectedCallback();\n      if (!this.loaded) {\n        this.showPoster();\n      }\n      this[$progressTracker].addEventListener('progress', this[$onProgress]);\n    }\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this[$progressTracker].removeEventListener('progress', this[$onProgress]);\n    }\n    async updated(changedProperties) {\n      super.updated(changedProperties);\n      if (changedProperties.has('poster') && this.poster != null) {\n        this[$defaultPosterElement].style.backgroundImage = `url(${this.poster})`;\n      }\n      if (changedProperties.has('alt')) {\n        this[$defaultPosterElement].setAttribute('aria-label', this[$altDefaulted]);\n      }\n      if (changedProperties.has('reveal') || changedProperties.has('loading')) {\n        this[$updateSource]();\n      }\n    }\n    [(_a = $modelIsRevealed, _b = $shouldDismissPoster, _c = $posterContainerElement, _d = $defaultPosterElement, _e = $defaultProgressBarElement, _f = $ariaLabelCallToAction, _g = $updateProgressBar, _h = $onProgress, $shouldAttemptPreload)]() {\n      return !!this.src && (this[$shouldDismissPoster] || this.loading === LoadingStrategy.EAGER || this.reveal === RevealStrategy.AUTO && this[$isElementInViewport]);\n    }\n    [$hidePoster]() {\n      this[$shouldDismissPoster] = false;\n      const posterContainerElement = this[$posterContainerElement];\n      if (!posterContainerElement.classList.contains('show')) {\n        return;\n      }\n      posterContainerElement.classList.remove('show');\n      this[$userInputElement].classList.add('show');\n      const oldVisibility = this.modelIsVisible;\n      this[$modelIsRevealed] = true;\n      this[$announceModelVisibility](oldVisibility);\n      const root = this.getRootNode();\n      // If the <model-viewer> is still focused, forward the focus to\n      // the canvas that has just been revealed\n      if (root && root.activeElement === this) {\n        this[$userInputElement].focus();\n      }\n      // Ensure that the poster is no longer focusable or visible to\n      // screen readers\n      const defaultPosterElement = this[$defaultPosterElement];\n      defaultPosterElement.setAttribute('aria-hidden', 'true');\n      defaultPosterElement.tabIndex = -1;\n      this.dispatchEvent(new CustomEvent('poster-dismissed'));\n    }\n    [$getModelIsVisible]() {\n      return super[$getModelIsVisible]() && this[$modelIsRevealed];\n    }\n  }\n  __decorate([property({\n    type: String\n  })], LoadingModelViewerElement.prototype, \"poster\", void 0);\n  __decorate([property({\n    type: String\n  })], LoadingModelViewerElement.prototype, \"reveal\", void 0);\n  __decorate([property({\n    type: String\n  })], LoadingModelViewerElement.prototype, \"loading\", void 0);\n  return LoadingModelViewerElement;\n};","map":{"version":3,"names":["property","Vector3","$altDefaulted","$announceModelVisibility","$getModelIsVisible","$isElementInViewport","$progressTracker","$scene","$shouldAttemptPreload","$updateSource","$userInputElement","toVector3D","$loader","CachingGLTFLoader","Renderer","throttle","PROGRESS_BAR_UPDATE_THRESHOLD","DEFAULT_DRACO_DECODER_LOCATION","DEFAULT_KTX2_TRANSCODER_LOCATION","DEFAULT_LOTTIE_LOADER_LOCATION","RevealStrategy","AUTO","MANUAL","LoadingStrategy","LAZY","EAGER","$defaultProgressBarElement","Symbol","$posterContainerElement","$defaultPosterElement","$shouldDismissPoster","$hidePoster","$modelIsRevealed","$updateProgressBar","$ariaLabelCallToAction","$onProgress","LoadingMixin","ModelViewerElement","LoadingModelViewerElement","constructor","args","poster","reveal","loading","_a","_b","_c","shadowRoot","querySelector","_d","_e","_f","getAttribute","_g","progress","parentNode","requestAnimationFrame","style","transform","removeChild","appendChild","classList","add","remove","_h","event","detail","totalProgress","flush","loaded","dispatchEvent","CustomEvent","self","dracoDecoderLocation","setDRACODecoderLocation","ktx2TranscoderLocation","setKTX2TranscoderLocation","meshoptDecoderLocation","setMeshoptDecoderLocation","lottieLoaderLocation","singleton","textureUtils","lottieLoaderUrl","value","getDRACODecoderLocation","getKTX2TranscoderLocation","getMeshoptDecoderLocation","mapURLs","callback","loader","manager","setURLModifier","dismissPoster","showPoster","posterContainerElement","contains","defaultPosterElement","removeAttribute","oldVisibility","modelIsVisible","getDimensions","size","getBoundingBoxCenter","boundingBox","getCenter","connectedCallback","addEventListener","disconnectedCallback","removeEventListener","updated","changedProperties","has","backgroundImage","setAttribute","src","root","getRootNode","activeElement","focus","tabIndex","__decorate","type","String"],"sources":["../../src/features/loading.ts"],"sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit/decorators.js';\nimport {Vector3} from 'three';\n\nimport ModelViewerElementBase, {$altDefaulted, $announceModelVisibility, $getModelIsVisible, $isElementInViewport, $progressTracker, $scene, $shouldAttemptPreload, $updateSource, $userInputElement, toVector3D, Vector3D} from '../model-viewer-base.js';\nimport {$loader, CachingGLTFLoader} from '../three-components/CachingGLTFLoader.js';\nimport {Renderer} from '../three-components/Renderer.js';\nimport {Constructor, throttle} from '../utilities.js';\n\nexport type RevealAttributeValue = 'auto'|'manual';\nexport type LoadingAttributeValue = 'auto'|'lazy'|'eager';\n\nexport const PROGRESS_BAR_UPDATE_THRESHOLD = 100;\n\nconst DEFAULT_DRACO_DECODER_LOCATION =\n    'https://www.gstatic.com/draco/versioned/decoders/1.5.6/';\n\nconst DEFAULT_KTX2_TRANSCODER_LOCATION =\n    'https://www.gstatic.com/basis-universal/versioned/2021-04-15-ba1c3e4/';\n\nconst DEFAULT_LOTTIE_LOADER_LOCATION =\n    'https://cdn.jsdelivr.net/npm/three@0.149.0/examples/jsm/loaders/LottieLoader.js';\n\nconst RevealStrategy: {[index: string]: RevealAttributeValue} = {\n  AUTO: 'auto',\n  MANUAL: 'manual'\n};\n\nconst LoadingStrategy: {[index: string]: LoadingAttributeValue} = {\n  AUTO: 'auto',\n  LAZY: 'lazy',\n  EAGER: 'eager'\n};\n\nexport const $defaultProgressBarElement = Symbol('defaultProgressBarElement');\n\nexport const $posterContainerElement = Symbol('posterContainerElement');\nexport const $defaultPosterElement = Symbol('defaultPosterElement');\n\nconst $shouldDismissPoster = Symbol('shouldDismissPoster');\nconst $hidePoster = Symbol('hidePoster');\nconst $modelIsRevealed = Symbol('modelIsRevealed');\nconst $updateProgressBar = Symbol('updateProgressBar');\n\nconst $ariaLabelCallToAction = Symbol('ariaLabelCallToAction');\n\nconst $onProgress = Symbol('onProgress');\n\nexport declare interface LoadingInterface {\n  poster: string|null;\n  reveal: RevealAttributeValue;\n  loading: LoadingAttributeValue;\n  readonly loaded: boolean;\n  readonly modelIsVisible: boolean;\n  dismissPoster(): void;\n  showPoster(): void;\n  getDimensions(): Vector3D;\n  getBoundingBoxCenter(): Vector3D;\n}\n\nexport declare interface LoadingStaticInterface {\n  dracoDecoderLocation: string;\n  ktx2TranscoderLocation: string;\n  meshoptDecoderLocation: string;\n  lottieLoaderLocation: string;\n  mapURLs(callback: (url: string) => string): void;\n}\n\nexport interface ModelViewerGlobalConfig {\n  dracoDecoderLocation?: string;\n  ktx2TranscoderLocation?: string;\n  meshoptDecoderLocation?: string;\n  lottieLoaderLocation?: string;\n  powerPreference?: string;\n}\n\n/**\n * LoadingMixin implements features related to lazy loading, as well as\n * presentation details related to the pre-load / pre-render presentation of a\n * <model-viewer>\n *\n * This mixin implements support for models with DRACO-compressed meshes.\n * The DRACO decoder will be loaded on-demand if a glTF that uses the DRACO mesh\n * compression extension is encountered.\n *\n * By default, the DRACO decoder will be loaded from a Google CDN. It is\n * possible to customize where the decoder is loaded from by defining a global\n * configuration option for `<model-viewer>` like so:\n *\n * ```html\n * <script>\n * self.ModelViewerElement = self.ModelViewerElement || {};\n * self.ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration strategy must be performed *before* the\n * first `<model-viewer>` element is created in the browser. The configuration\n * can be done anywhere, but the easiest way to ensure it is done at the right\n * time is to do it in the `<head>` of the HTML document. This is the\n * recommended way to set the location because it is most compatible with\n * scenarios where the `<model-viewer>` library is lazily loaded.\n *\n * If you absolutely have to set the DRACO decoder location *after* the first\n * `<model-viewer>` element is created, you can do it this way:\n *\n * ```html\n * <script>\n * const ModelViewerElement = customElements.get('model-viewer');\n * ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration approach will not work until *after*\n * `<model-viewer>` is defined in the browser. Also note that this configuration\n * *must* be set *before* the first DRACO model is fully loaded.\n *\n * It is recommended that users who intend to take advantage of DRACO mesh\n * compression consider whether or not it is acceptable for their use case to\n * have code side-loaded from a Google CDN. If it is not acceptable, then the\n * location must be customized before loading any DRACO models in order to cause\n * the decoder to be loaded from an alternative, acceptable location.\n */\nexport const LoadingMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement:\n        T): Constructor<LoadingInterface, LoadingStaticInterface>&T => {\n  class LoadingModelViewerElement extends ModelViewerElement {\n    static set dracoDecoderLocation(value: string) {\n      CachingGLTFLoader.setDRACODecoderLocation(value);\n    }\n\n    static get dracoDecoderLocation() {\n      return CachingGLTFLoader.getDRACODecoderLocation();\n    }\n\n    static set ktx2TranscoderLocation(value: string) {\n      CachingGLTFLoader.setKTX2TranscoderLocation(value);\n    }\n\n    static get ktx2TranscoderLocation() {\n      return CachingGLTFLoader.getKTX2TranscoderLocation();\n    }\n\n    static set meshoptDecoderLocation(value: string) {\n      CachingGLTFLoader.setMeshoptDecoderLocation(value);\n    }\n\n    static get meshoptDecoderLocation() {\n      return CachingGLTFLoader.getMeshoptDecoderLocation();\n    }\n\n    static set lottieLoaderLocation(value: string) {\n      Renderer.singleton.textureUtils!.lottieLoaderUrl = value;\n    }\n\n    static get lottieLoaderLocation() {\n      return Renderer.singleton.textureUtils!.lottieLoaderUrl\n    }\n\n    /**\n     * If provided, the callback will be passed each resource URL before a\n     * request is sent. The callback may return the original URL, or a new URL\n     * to override loading behavior. This behavior can be used to load assets\n     * from .ZIP files, drag-and-drop APIs, and Data URIs.\n     */\n    static mapURLs(callback: (url: string) => string) {\n      Renderer.singleton.loader[$loader].manager.setURLModifier(callback);\n    }\n\n    /**\n     * A URL pointing to the image to use as a poster in scenarios where the\n     * <model-viewer> is not ready to reveal a rendered model to the viewer.\n     */\n    @property({type: String}) poster: string|null = null;\n\n    /**\n     * An enumerable attribute describing under what conditions the\n     * <model-viewer> should reveal a model to the viewer.\n     *\n     * The default value is \"auto\". The only supported alternative values is\n     * \"manual\".\n     */\n    @property({type: String})\n    reveal: RevealAttributeValue = RevealStrategy.AUTO;\n\n    /**\n     * An enumerable attribute describing under what conditions the\n     * <model-viewer> should preload a model.\n     *\n     * The default value is \"auto\". The only supported alternative values are\n     * \"lazy\" and \"eager\". Auto is equivalent to lazy, which loads the model\n     * when it is near the viewport for reveal = \"auto\", and when interacted\n     * with for reveal = \"interaction\". Eager loads the model immediately.\n     */\n    @property({type: String})\n    loading: LoadingAttributeValue = LoadingStrategy.AUTO;\n\n    /**\n     * Dismisses the poster, causing the model to load and render if\n     * necessary. This is currently effectively the same as interacting with\n     * the poster via user input.\n     */\n    dismissPoster() {\n      if (this.loaded) {\n        this[$hidePoster]();\n      } else {\n        this[$shouldDismissPoster] = true;\n        this[$updateSource]();\n      }\n    }\n\n    /**\n     * Displays the poster, hiding the 3D model. If this is called after the 3D\n     * model has been revealed, then it must be dismissed by a call to\n     * dismissPoster().\n     */\n    showPoster() {\n      const posterContainerElement = this[$posterContainerElement];\n      if (posterContainerElement.classList.contains('show')) {\n        return;\n      }\n      posterContainerElement.classList.add('show');\n      this[$userInputElement].classList.remove('show');\n\n      const defaultPosterElement = this[$defaultPosterElement];\n      defaultPosterElement.removeAttribute('tabindex');\n      defaultPosterElement.removeAttribute('aria-hidden');\n\n      const oldVisibility = this.modelIsVisible;\n      this[$modelIsRevealed] = false;\n      this[$announceModelVisibility](oldVisibility);\n    }\n\n    /**\n     * Returns the model's bounding box dimensions in meters, independent of\n     * turntable rotation.\n     */\n    getDimensions(): Vector3D {\n      return toVector3D(this[$scene].size);\n    }\n\n    getBoundingBoxCenter(): Vector3D {\n      return toVector3D(this[$scene].boundingBox.getCenter(new Vector3()));\n    }\n\n    protected[$modelIsRevealed] = false;\n\n    protected[$shouldDismissPoster] = false;\n\n    // TODO: Add this to the shadow root as part of this mixin's\n    // implementation:\n    protected[$posterContainerElement]: HTMLElement =\n        this.shadowRoot!.querySelector('.slot.poster') as HTMLElement;\n\n    protected[$defaultPosterElement]: HTMLElement =\n        this.shadowRoot!.querySelector('#default-poster') as HTMLElement;\n\n    protected[$defaultProgressBarElement]: HTMLElement =\n        this.shadowRoot!.querySelector('#default-progress-bar > .bar') as\n        HTMLElement;\n\n    protected[$ariaLabelCallToAction] =\n        this[$defaultPosterElement].getAttribute('aria-label');\n\n    protected[$updateProgressBar] = throttle((progress: number) => {\n      const parentNode = this[$defaultProgressBarElement].parentNode as Element;\n\n      requestAnimationFrame(() => {\n        this[$defaultProgressBarElement].style.transform =\n            `scaleX(${progress})`;\n\n        if (progress === 0) {\n          // NOTE(cdata): We remove and re-append the progress bar in this\n          // condition so that the progress bar does not appear to\n          // transition backwards from the right when we reset to 0 (or\n          // otherwise <1) progress after having already reached 1 progress\n          // previously.\n          parentNode.removeChild(this[$defaultProgressBarElement]);\n          parentNode.appendChild(this[$defaultProgressBarElement]);\n        }\n\n        // NOTE(cdata): IE11 does not properly respect the second parameter\n        // of classList.toggle, which this implementation originally used.\n        // @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11865865/\n        if (progress === 1.0) {\n          this[$defaultProgressBarElement].classList.add('hide');\n        } else {\n          this[$defaultProgressBarElement].classList.remove('hide');\n        }\n      });\n    }, PROGRESS_BAR_UPDATE_THRESHOLD);\n\n    constructor(...args: Array<any>) {\n      super(...args);\n\n      const ModelViewerElement: ModelViewerGlobalConfig =\n          (self as any).ModelViewerElement || {};\n\n      const dracoDecoderLocation = ModelViewerElement.dracoDecoderLocation ||\n          DEFAULT_DRACO_DECODER_LOCATION;\n      CachingGLTFLoader.setDRACODecoderLocation(dracoDecoderLocation);\n\n      const ktx2TranscoderLocation =\n          ModelViewerElement.ktx2TranscoderLocation ||\n          DEFAULT_KTX2_TRANSCODER_LOCATION;\n      CachingGLTFLoader.setKTX2TranscoderLocation(ktx2TranscoderLocation);\n\n      if (ModelViewerElement.meshoptDecoderLocation) {\n        CachingGLTFLoader.setMeshoptDecoderLocation(\n            ModelViewerElement.meshoptDecoderLocation);\n      }\n\n      const lottieLoaderLocation = ModelViewerElement.lottieLoaderLocation ||\n          DEFAULT_LOTTIE_LOADER_LOCATION;\n      Renderer.singleton.textureUtils!.lottieLoaderUrl = lottieLoaderLocation;\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n\n      if (!this.loaded) {\n        this.showPoster();\n      }\n\n      this[$progressTracker].addEventListener('progress', this[$onProgress]);\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      this[$progressTracker].removeEventListener('progress', this[$onProgress]);\n    }\n\n    async updated(changedProperties: Map<string, any>) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('poster') && this.poster != null) {\n        this[$defaultPosterElement].style.backgroundImage =\n            `url(${this.poster})`;\n      }\n\n      if (changedProperties.has('alt')) {\n        this[$defaultPosterElement].setAttribute(\n            'aria-label', this[$altDefaulted]);\n      }\n\n      if (changedProperties.has('reveal') || changedProperties.has('loading')) {\n        this[$updateSource]();\n      }\n    }\n\n    [$onProgress] = (event: Event) => {\n      const progress = (event as any).detail.totalProgress;\n\n      if (progress === 1.0) {\n        this[$updateProgressBar].flush();\n        if (this.loaded &&\n            (this[$shouldDismissPoster] ||\n             this.reveal === RevealStrategy.AUTO)) {\n          this[$hidePoster]();\n        }\n      }\n\n      this[$updateProgressBar](progress);\n\n      this.dispatchEvent(\n          new CustomEvent('progress', {detail: {totalProgress: progress}}));\n    };\n\n    [$shouldAttemptPreload](): boolean {\n      return !!this.src &&\n          (this[$shouldDismissPoster] ||\n           this.loading === LoadingStrategy.EAGER ||\n           (this.reveal === RevealStrategy.AUTO && this[$isElementInViewport]));\n    }\n\n    [$hidePoster]() {\n      this[$shouldDismissPoster] = false;\n      const posterContainerElement = this[$posterContainerElement];\n      if (!posterContainerElement.classList.contains('show')) {\n        return;\n      }\n      posterContainerElement.classList.remove('show');\n      this[$userInputElement].classList.add('show');\n\n      const oldVisibility = this.modelIsVisible;\n      this[$modelIsRevealed] = true;\n      this[$announceModelVisibility](oldVisibility);\n\n      const root = this.getRootNode();\n\n      // If the <model-viewer> is still focused, forward the focus to\n      // the canvas that has just been revealed\n      if (root && (root as Document | ShadowRoot).activeElement === this) {\n        this[$userInputElement].focus();\n      }\n\n      // Ensure that the poster is no longer focusable or visible to\n      // screen readers\n      const defaultPosterElement = this[$defaultPosterElement];\n      defaultPosterElement.setAttribute('aria-hidden', 'true');\n      defaultPosterElement.tabIndex = -1;\n      this.dispatchEvent(new CustomEvent('poster-dismissed'));\n    }\n\n    [$getModelIsVisible]() {\n      return super[$getModelIsVisible]() && this[$modelIsRevealed];\n    }\n  }\n\n  return LoadingModelViewerElement;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}