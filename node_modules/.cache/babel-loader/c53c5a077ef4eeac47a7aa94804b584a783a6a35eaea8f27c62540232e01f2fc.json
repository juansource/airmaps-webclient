{"ast":null,"code":"import { PlaneGeometry, ShaderMaterial, Uniform, Mesh, PerspectiveCamera, Scene, WebGLRenderer, Texture, SRGBColorSpace } from 'three';\nlet _renderer;\nlet fullscreenQuadGeometry;\nlet fullscreenQuadMaterial;\nlet fullscreenQuad;\nexport function decompress(texture, maxTextureSize = Infinity, renderer = null) {\n  if (!fullscreenQuadGeometry) fullscreenQuadGeometry = new PlaneGeometry(2, 2, 1, 1);\n  if (!fullscreenQuadMaterial) fullscreenQuadMaterial = new ShaderMaterial({\n    uniforms: {\n      blitTexture: new Uniform(texture)\n    },\n    vertexShader: `\n            varying vec2 vUv;\n            void main(){\n                vUv = uv;\n                gl_Position = vec4(position.xy * 1.0,0.,.999999);\n            }`,\n    fragmentShader: `\n            uniform sampler2D blitTexture; \n            varying vec2 vUv;\n\n            void main(){ \n                gl_FragColor = vec4(vUv.xy, 0, 1);\n                \n                #ifdef IS_SRGB\n                gl_FragColor = LinearTosRGB( texture2D( blitTexture, vUv) );\n                #else\n                gl_FragColor = texture2D( blitTexture, vUv);\n                #endif\n            }`\n  });\n  fullscreenQuadMaterial.uniforms.blitTexture.value = texture;\n  fullscreenQuadMaterial.defines.IS_SRGB = texture.colorSpace == SRGBColorSpace;\n  fullscreenQuadMaterial.needsUpdate = true;\n  if (!fullscreenQuad) {\n    fullscreenQuad = new Mesh(fullscreenQuadGeometry, fullscreenQuadMaterial);\n    fullscreenQuad.frustrumCulled = false;\n  }\n  const _camera = new PerspectiveCamera();\n  const _scene = new Scene();\n  _scene.add(fullscreenQuad);\n  if (!renderer) {\n    renderer = _renderer = new WebGLRenderer({\n      antialias: false\n    });\n  }\n  renderer.setSize(Math.min(texture.image.width, maxTextureSize), Math.min(texture.image.height, maxTextureSize));\n  renderer.clear();\n  renderer.render(_scene, _camera);\n  const readableTexture = new Texture(renderer.domElement);\n  readableTexture.minFilter = texture.minFilter;\n  readableTexture.magFilter = texture.magFilter;\n  readableTexture.wrapS = texture.wrapS;\n  readableTexture.wrapT = texture.wrapT;\n  readableTexture.name = texture.name;\n  if (_renderer) {\n    _renderer.dispose();\n    _renderer = null;\n  }\n  return readableTexture;\n}","map":{"version":3,"names":["PlaneGeometry","ShaderMaterial","Uniform","Mesh","PerspectiveCamera","Scene","WebGLRenderer","Texture","SRGBColorSpace","_renderer","fullscreenQuadGeometry","fullscreenQuadMaterial","fullscreenQuad","decompress","texture","maxTextureSize","Infinity","renderer","uniforms","blitTexture","vertexShader","fragmentShader","value","defines","IS_SRGB","colorSpace","needsUpdate","frustrumCulled","_camera","_scene","add","antialias","setSize","Math","min","image","width","height","clear","render","readableTexture","domElement","minFilter","magFilter","wrapS","wrapT","name","dispose"],"sources":["/Users/juangonzalez/Documents/GitHub/vue-project-kiwi/Clinet/node_modules/three/examples/jsm/utils/TextureUtils.js"],"sourcesContent":["import {\n\tPlaneGeometry,\n\tShaderMaterial,\n\tUniform,\n\tMesh,\n\tPerspectiveCamera,\n\tScene,\n\tWebGLRenderer,\n\tTexture,\n\tSRGBColorSpace\n} from 'three';\n\nlet _renderer;\nlet fullscreenQuadGeometry;\nlet fullscreenQuadMaterial;\nlet fullscreenQuad;\n\nexport function decompress( texture, maxTextureSize = Infinity, renderer = null ) {\n\n\tif ( ! fullscreenQuadGeometry ) fullscreenQuadGeometry = new PlaneGeometry( 2, 2, 1, 1 );\n\tif ( ! fullscreenQuadMaterial ) fullscreenQuadMaterial = new ShaderMaterial( {\n\t\tuniforms: { blitTexture: new Uniform( texture ) },\n\t\tvertexShader: `\n            varying vec2 vUv;\n            void main(){\n                vUv = uv;\n                gl_Position = vec4(position.xy * 1.0,0.,.999999);\n            }`,\n\t\tfragmentShader: `\n            uniform sampler2D blitTexture; \n            varying vec2 vUv;\n\n            void main(){ \n                gl_FragColor = vec4(vUv.xy, 0, 1);\n                \n                #ifdef IS_SRGB\n                gl_FragColor = LinearTosRGB( texture2D( blitTexture, vUv) );\n                #else\n                gl_FragColor = texture2D( blitTexture, vUv);\n                #endif\n            }`\n\t} );\n\n\tfullscreenQuadMaterial.uniforms.blitTexture.value = texture;\n\tfullscreenQuadMaterial.defines.IS_SRGB = texture.colorSpace == SRGBColorSpace;\n\tfullscreenQuadMaterial.needsUpdate = true;\n\n\tif ( ! fullscreenQuad ) {\n\n\t\tfullscreenQuad = new Mesh( fullscreenQuadGeometry, fullscreenQuadMaterial );\n\t\tfullscreenQuad.frustrumCulled = false;\n\n\t}\n\n\tconst _camera = new PerspectiveCamera();\n\tconst _scene = new Scene();\n\t_scene.add( fullscreenQuad );\n\n\tif ( ! renderer ) {\n\n\t\trenderer = _renderer = new WebGLRenderer( { antialias: false } );\n\n\t}\n\n\trenderer.setSize( Math.min( texture.image.width, maxTextureSize ), Math.min( texture.image.height, maxTextureSize ) );\n\trenderer.clear();\n\trenderer.render( _scene, _camera );\n\n\tconst readableTexture = new Texture( renderer.domElement );\n\n\treadableTexture.minFilter = texture.minFilter;\n\treadableTexture.magFilter = texture.magFilter;\n\treadableTexture.wrapS = texture.wrapS;\n\treadableTexture.wrapT = texture.wrapT;\n\treadableTexture.name = texture.name;\n\n\tif ( _renderer ) {\n\n\t\t_renderer.dispose();\n\t\t_renderer = null;\n\n\t}\n\n\treturn readableTexture;\n\n}\n"],"mappings":"AAAA,SACCA,aAAa,EACbC,cAAc,EACdC,OAAO,EACPC,IAAI,EACJC,iBAAiB,EACjBC,KAAK,EACLC,aAAa,EACbC,OAAO,EACPC,cAAc,QACR,OAAO;AAEd,IAAIC,SAAS;AACb,IAAIC,sBAAsB;AAC1B,IAAIC,sBAAsB;AAC1B,IAAIC,cAAc;AAElB,OAAO,SAASC,UAAUA,CAAEC,OAAO,EAAEC,cAAc,GAAGC,QAAQ,EAAEC,QAAQ,GAAG,IAAI,EAAG;EAEjF,IAAK,CAAEP,sBAAsB,EAAGA,sBAAsB,GAAG,IAAIV,aAAa,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;EACxF,IAAK,CAAEW,sBAAsB,EAAGA,sBAAsB,GAAG,IAAIV,cAAc,CAAE;IAC5EiB,QAAQ,EAAE;MAAEC,WAAW,EAAE,IAAIjB,OAAO,CAAEY,OAAQ;IAAE,CAAC;IACjDM,YAAY,EAAG;AACjB;AACA;AACA;AACA;AACA,cAAc;IACZC,cAAc,EAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,CAAE,CAAC;EAEHV,sBAAsB,CAACO,QAAQ,CAACC,WAAW,CAACG,KAAK,GAAGR,OAAO;EAC3DH,sBAAsB,CAACY,OAAO,CAACC,OAAO,GAAGV,OAAO,CAACW,UAAU,IAAIjB,cAAc;EAC7EG,sBAAsB,CAACe,WAAW,GAAG,IAAI;EAEzC,IAAK,CAAEd,cAAc,EAAG;IAEvBA,cAAc,GAAG,IAAIT,IAAI,CAAEO,sBAAsB,EAAEC,sBAAuB,CAAC;IAC3EC,cAAc,CAACe,cAAc,GAAG,KAAK;EAEtC;EAEA,MAAMC,OAAO,GAAG,IAAIxB,iBAAiB,CAAC,CAAC;EACvC,MAAMyB,MAAM,GAAG,IAAIxB,KAAK,CAAC,CAAC;EAC1BwB,MAAM,CAACC,GAAG,CAAElB,cAAe,CAAC;EAE5B,IAAK,CAAEK,QAAQ,EAAG;IAEjBA,QAAQ,GAAGR,SAAS,GAAG,IAAIH,aAAa,CAAE;MAAEyB,SAAS,EAAE;IAAM,CAAE,CAAC;EAEjE;EAEAd,QAAQ,CAACe,OAAO,CAAEC,IAAI,CAACC,GAAG,CAAEpB,OAAO,CAACqB,KAAK,CAACC,KAAK,EAAErB,cAAe,CAAC,EAAEkB,IAAI,CAACC,GAAG,CAAEpB,OAAO,CAACqB,KAAK,CAACE,MAAM,EAAEtB,cAAe,CAAE,CAAC;EACrHE,QAAQ,CAACqB,KAAK,CAAC,CAAC;EAChBrB,QAAQ,CAACsB,MAAM,CAAEV,MAAM,EAAED,OAAQ,CAAC;EAElC,MAAMY,eAAe,GAAG,IAAIjC,OAAO,CAAEU,QAAQ,CAACwB,UAAW,CAAC;EAE1DD,eAAe,CAACE,SAAS,GAAG5B,OAAO,CAAC4B,SAAS;EAC7CF,eAAe,CAACG,SAAS,GAAG7B,OAAO,CAAC6B,SAAS;EAC7CH,eAAe,CAACI,KAAK,GAAG9B,OAAO,CAAC8B,KAAK;EACrCJ,eAAe,CAACK,KAAK,GAAG/B,OAAO,CAAC+B,KAAK;EACrCL,eAAe,CAACM,IAAI,GAAGhC,OAAO,CAACgC,IAAI;EAEnC,IAAKrC,SAAS,EAAG;IAEhBA,SAAS,CAACsC,OAAO,CAAC,CAAC;IACnBtC,SAAS,GAAG,IAAI;EAEjB;EAEA,OAAO+B,eAAe;AAEvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}