{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { property } from 'lit/decorators.js';\nimport { style } from '../decorators.js';\nimport { $getModelIsVisible, $renderer, $scene, $tick } from '../model-viewer-base.js';\nimport { degreesToRadians } from '../styles/conversions.js';\nimport { numberNode } from '../styles/parsers.js';\n// How much the model will rotate per\n// second in radians:\nconst DEFAULT_ROTATION_SPEED = Math.PI / 32;\nexport const AUTO_ROTATE_DELAY_DEFAULT = 3000;\nconst rotationRateIntrinsics = {\n  basis: [degreesToRadians(numberNode(DEFAULT_ROTATION_SPEED, 'rad'))],\n  keywords: {\n    auto: [null]\n  }\n};\nconst $autoRotateStartTime = Symbol('autoRotateStartTime');\nconst $radiansPerSecond = Symbol('radiansPerSecond');\nconst $syncRotationRate = Symbol('syncRotationRate');\nconst $onCameraChange = Symbol('onCameraChange');\nexport const StagingMixin = ModelViewerElement => {\n  var _a, _b, _c;\n  class StagingModelViewerElement extends ModelViewerElement {\n    constructor() {\n      super(...arguments);\n      this.autoRotate = false;\n      this.autoRotateDelay = AUTO_ROTATE_DELAY_DEFAULT;\n      this.rotationPerSecond = 'auto';\n      this[_a] = performance.now();\n      this[_b] = 0;\n      this[_c] = event => {\n        if (!this.autoRotate) {\n          return;\n        }\n        if (event.detail.source === 'user-interaction') {\n          this[$autoRotateStartTime] = performance.now();\n        }\n      };\n    }\n    connectedCallback() {\n      super.connectedCallback();\n      this.addEventListener('camera-change', this[$onCameraChange]);\n      this[$autoRotateStartTime] = performance.now();\n    }\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.removeEventListener('camera-change', this[$onCameraChange]);\n      this[$autoRotateStartTime] = performance.now();\n    }\n    updated(changedProperties) {\n      super.updated(changedProperties);\n      if (changedProperties.has('autoRotate')) {\n        this[$autoRotateStartTime] = performance.now();\n      }\n    }\n    [(_a = $autoRotateStartTime, _b = $radiansPerSecond, $syncRotationRate)](style) {\n      this[$radiansPerSecond] = style[0];\n    }\n    [$tick](time, delta) {\n      super[$tick](time, delta);\n      if (!this.autoRotate || !this[$getModelIsVisible]() || this[$renderer].isPresenting) {\n        return;\n      }\n      const rotationDelta = Math.min(delta, time - this[$autoRotateStartTime] - this.autoRotateDelay);\n      if (rotationDelta > 0) {\n        this[$scene].yaw = this.turntableRotation + this[$radiansPerSecond] * rotationDelta * 0.001;\n      }\n    }\n    get turntableRotation() {\n      return this[$scene].yaw;\n    }\n    resetTurntableRotation(theta = 0) {\n      this[$scene].yaw = theta;\n    }\n  }\n  _c = $onCameraChange;\n  __decorate([property({\n    type: Boolean,\n    attribute: 'auto-rotate'\n  })], StagingModelViewerElement.prototype, \"autoRotate\", void 0);\n  __decorate([property({\n    type: Number,\n    attribute: 'auto-rotate-delay'\n  })], StagingModelViewerElement.prototype, \"autoRotateDelay\", void 0);\n  __decorate([style({\n    intrinsics: rotationRateIntrinsics,\n    updateHandler: $syncRotationRate\n  }), property({\n    type: String,\n    attribute: 'rotation-per-second'\n  })], StagingModelViewerElement.prototype, \"rotationPerSecond\", void 0);\n  return StagingModelViewerElement;\n};","map":{"version":3,"names":["property","style","$getModelIsVisible","$renderer","$scene","$tick","degreesToRadians","numberNode","DEFAULT_ROTATION_SPEED","Math","PI","AUTO_ROTATE_DELAY_DEFAULT","rotationRateIntrinsics","basis","keywords","auto","$autoRotateStartTime","Symbol","$radiansPerSecond","$syncRotationRate","$onCameraChange","StagingMixin","ModelViewerElement","StagingModelViewerElement","constructor","autoRotate","autoRotateDelay","rotationPerSecond","_a","performance","now","_b","_c","event","detail","source","connectedCallback","addEventListener","disconnectedCallback","removeEventListener","updated","changedProperties","has","time","delta","isPresenting","rotationDelta","min","yaw","turntableRotation","resetTurntableRotation","theta","__decorate","type","Boolean","attribute","Number","intrinsics","updateHandler","String"],"sources":["../../src/features/staging.ts"],"sourcesContent":["\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit/decorators.js';\n\nimport {style} from '../decorators.js';\nimport ModelViewerElementBase, {$getModelIsVisible, $renderer, $scene, $tick} from '../model-viewer-base.js';\nimport {degreesToRadians} from '../styles/conversions.js';\nimport {EvaluatedStyle, Intrinsics} from '../styles/evaluators.js';\nimport {numberNode, NumberNode} from '../styles/parsers.js';\nimport {Constructor} from '../utilities.js';\n\nimport {CameraChangeDetails} from './controls.js';\n\n\n// How much the model will rotate per\n// second in radians:\nconst DEFAULT_ROTATION_SPEED = Math.PI / 32;\nexport const AUTO_ROTATE_DELAY_DEFAULT = 3000;\n\nconst rotationRateIntrinsics = {\n  basis:\n      [degreesToRadians(numberNode(DEFAULT_ROTATION_SPEED, 'rad')) as\n       NumberNode<'rad'>],\n  keywords: {auto: [null]}\n};\n\nconst $autoRotateStartTime = Symbol('autoRotateStartTime');\nconst $radiansPerSecond = Symbol('radiansPerSecond');\nconst $syncRotationRate = Symbol('syncRotationRate');\nconst $onCameraChange = Symbol('onCameraChange');\n\nexport declare interface StagingInterface {\n  autoRotate: boolean;\n  autoRotateDelay: number;\n  readonly turntableRotation: number;\n  resetTurntableRotation(theta?: number): void;\n}\n\nexport const StagingMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement: T): Constructor<StagingInterface>&T => {\n  class StagingModelViewerElement extends ModelViewerElement {\n    @property({type: Boolean, attribute: 'auto-rotate'})\n    autoRotate: boolean = false;\n\n    @property({type: Number, attribute: 'auto-rotate-delay'})\n    autoRotateDelay: number = AUTO_ROTATE_DELAY_DEFAULT;\n\n    @style(\n        {intrinsics: rotationRateIntrinsics, updateHandler: $syncRotationRate})\n    @property({type: String, attribute: 'rotation-per-second'})\n    rotationPerSecond: string = 'auto';\n\n    private[$autoRotateStartTime] = performance.now();\n    private[$radiansPerSecond] = 0;\n\n    connectedCallback() {\n      super.connectedCallback();\n      this.addEventListener(\n          'camera-change', this[$onCameraChange] as EventListener);\n      this[$autoRotateStartTime] = performance.now();\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.removeEventListener(\n          'camera-change', this[$onCameraChange] as EventListener);\n      this[$autoRotateStartTime] = performance.now();\n    }\n\n    updated(changedProperties: Map<string, any>) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('autoRotate')) {\n        this[$autoRotateStartTime] = performance.now();\n      }\n    }\n\n    [$syncRotationRate](style: EvaluatedStyle<Intrinsics<['rad']>>) {\n      this[$radiansPerSecond] = style[0];\n    }\n\n    [$tick](time: number, delta: number) {\n      super[$tick](time, delta);\n\n      if (!this.autoRotate || !this[$getModelIsVisible]() ||\n          this[$renderer].isPresenting) {\n        return;\n      }\n\n      const rotationDelta = Math.min(\n          delta, time - this[$autoRotateStartTime] - this.autoRotateDelay);\n\n      if (rotationDelta > 0) {\n        this[$scene].yaw = this.turntableRotation +\n            this[$radiansPerSecond] * rotationDelta * 0.001;\n      }\n    }\n\n    [$onCameraChange] = (event: CustomEvent<CameraChangeDetails>) => {\n      if (!this.autoRotate) {\n        return;\n      }\n\n      if (event.detail.source === 'user-interaction') {\n        this[$autoRotateStartTime] = performance.now();\n      }\n    };\n\n    get turntableRotation(): number {\n      return this[$scene].yaw;\n    }\n\n    resetTurntableRotation(theta = 0) {\n      this[$scene].yaw = theta;\n    }\n  }\n\n  return StagingModelViewerElement;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}