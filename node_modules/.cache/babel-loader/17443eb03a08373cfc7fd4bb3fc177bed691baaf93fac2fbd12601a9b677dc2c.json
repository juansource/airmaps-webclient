{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { property } from 'lit/decorators.js';\nimport { USDZExporter } from 'three/examples/jsm/exporters/USDZExporter.js';\nimport { IS_AR_QUICKLOOK_CANDIDATE, IS_SCENEVIEWER_CANDIDATE, IS_WEBXR_AR_CANDIDATE } from '../constants.js';\nimport { $needsRender, $progressTracker, $renderer, $scene, $shouldAttemptPreload, $updateSource } from '../model-viewer-base.js';\nimport { enumerationDeserializer } from '../styles/deserializers.js';\nimport { ARStatus, ARTracking } from '../three-components/ARRenderer.js';\nimport { waitForEvent } from '../utilities.js';\nlet isWebXRBlocked = false;\nlet isSceneViewerBlocked = false;\nconst noArViewerSigil = '#model-viewer-no-ar-fallback';\nconst deserializeARModes = enumerationDeserializer(['quick-look', 'scene-viewer', 'webxr', 'none']);\nconst DEFAULT_AR_MODES = 'webxr scene-viewer quick-look';\nconst ARMode = {\n  QUICK_LOOK: 'quick-look',\n  SCENE_VIEWER: 'scene-viewer',\n  WEBXR: 'webxr',\n  NONE: 'none'\n};\nconst $arButtonContainer = Symbol('arButtonContainer');\nconst $enterARWithWebXR = Symbol('enterARWithWebXR');\nexport const $openSceneViewer = Symbol('openSceneViewer');\nexport const $openIOSARQuickLook = Symbol('openIOSARQuickLook');\nconst $canActivateAR = Symbol('canActivateAR');\nconst $arMode = Symbol('arMode');\nconst $arModes = Symbol('arModes');\nconst $arAnchor = Symbol('arAnchor');\nconst $preload = Symbol('preload');\nconst $onARButtonContainerClick = Symbol('onARButtonContainerClick');\nconst $onARStatus = Symbol('onARStatus');\nconst $onARTracking = Symbol('onARTracking');\nconst $onARTap = Symbol('onARTap');\nconst $selectARMode = Symbol('selectARMode');\nconst $triggerLoad = Symbol('triggerLoad');\nexport const ARMixin = ModelViewerElement => {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n  class ARModelViewerElement extends ModelViewerElement {\n    constructor() {\n      super(...arguments);\n      this.ar = false;\n      this.arScale = 'auto';\n      this.arPlacement = 'floor';\n      this.arModes = DEFAULT_AR_MODES;\n      this.iosSrc = null;\n      this.xrEnvironment = false;\n      this[_a] = false;\n      // TODO: Add this to the shadow root as part of this mixin's\n      // implementation:\n      this[_b] = this.shadowRoot.querySelector('.ar-button');\n      this[_c] = document.createElement('a');\n      this[_d] = new Set();\n      this[_e] = ARMode.NONE;\n      this[_f] = false;\n      this[_g] = event => {\n        event.preventDefault();\n        this.activateAR();\n      };\n      this[_h] = ({\n        status\n      }) => {\n        if (status === ARStatus.NOT_PRESENTING || this[$renderer].arRenderer.presentedScene === this[$scene]) {\n          this.setAttribute('ar-status', status);\n          this.dispatchEvent(new CustomEvent('ar-status', {\n            detail: {\n              status\n            }\n          }));\n          if (status === ARStatus.NOT_PRESENTING) {\n            this.removeAttribute('ar-tracking');\n          } else if (status === ARStatus.SESSION_STARTED) {\n            this.setAttribute('ar-tracking', ARTracking.TRACKING);\n          }\n        }\n      };\n      this[_j] = ({\n        status\n      }) => {\n        this.setAttribute('ar-tracking', status);\n        this.dispatchEvent(new CustomEvent('ar-tracking', {\n          detail: {\n            status\n          }\n        }));\n      };\n      this[_k] = event => {\n        if (event.data == '_apple_ar_quicklook_button_tapped') {\n          this.dispatchEvent(new CustomEvent('quick-look-button-tapped'));\n        }\n      };\n    }\n    get canActivateAR() {\n      return this[$arMode] !== ARMode.NONE;\n    }\n    connectedCallback() {\n      super.connectedCallback();\n      this[$renderer].arRenderer.addEventListener('status', this[$onARStatus]);\n      this.setAttribute('ar-status', ARStatus.NOT_PRESENTING);\n      this[$renderer].arRenderer.addEventListener('tracking', this[$onARTracking]);\n      this[$arAnchor].addEventListener('message', this[$onARTap]);\n    }\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this[$renderer].arRenderer.removeEventListener('status', this[$onARStatus]);\n      this[$renderer].arRenderer.removeEventListener('tracking', this[$onARTracking]);\n      this[$arAnchor].removeEventListener('message', this[$onARTap]);\n    }\n    update(changedProperties) {\n      super.update(changedProperties);\n      if (changedProperties.has('arScale')) {\n        this[$scene].canScale = this.arScale !== 'fixed';\n      }\n      if (changedProperties.has('arPlacement')) {\n        this[$scene].updateShadow();\n        this[$needsRender]();\n      }\n      if (changedProperties.has('arModes')) {\n        this[$arModes] = deserializeARModes(this.arModes);\n      }\n      if (changedProperties.has('ar') || changedProperties.has('arModes') || changedProperties.has('src') || changedProperties.has('iosSrc')) {\n        this[$selectARMode]();\n      }\n    }\n    /**\n     * Activates AR. Note that for any mode that is not WebXR-based, this\n     * method most likely has to be called synchronous from a user\n     * interaction handler. Otherwise, attempts to activate modes that\n     * require user interaction will most likely be ignored.\n     */\n    async activateAR() {\n      switch (this[$arMode]) {\n        case ARMode.QUICK_LOOK:\n          await this[$openIOSARQuickLook]();\n          break;\n        case ARMode.WEBXR:\n          await this[$enterARWithWebXR]();\n          break;\n        case ARMode.SCENE_VIEWER:\n          this[$openSceneViewer]();\n          break;\n        default:\n          console.warn('No AR Mode can be activated. This is probably due to missing \\\nconfiguration or device capabilities');\n          break;\n      }\n    }\n    async [(_a = $canActivateAR, _b = $arButtonContainer, _c = $arAnchor, _d = $arModes, _e = $arMode, _f = $preload, _g = $onARButtonContainerClick, _h = $onARStatus, _j = $onARTracking, _k = $onARTap, $selectARMode)]() {\n      let arMode = ARMode.NONE;\n      if (this.ar) {\n        if (this.src != null) {\n          for (const value of this[$arModes]) {\n            if (value === 'webxr' && IS_WEBXR_AR_CANDIDATE && !isWebXRBlocked && (await this[$renderer].arRenderer.supportsPresentation())) {\n              arMode = ARMode.WEBXR;\n              break;\n            }\n            if (value === 'scene-viewer' && IS_SCENEVIEWER_CANDIDATE && !isSceneViewerBlocked) {\n              arMode = ARMode.SCENE_VIEWER;\n              break;\n            }\n            if (value === 'quick-look' && IS_AR_QUICKLOOK_CANDIDATE) {\n              arMode = ARMode.QUICK_LOOK;\n              break;\n            }\n          }\n        }\n        // The presence of ios-src overrides the absence of quick-look\n        // ar-mode.\n        if (arMode === ARMode.NONE && this.iosSrc != null && IS_AR_QUICKLOOK_CANDIDATE) {\n          arMode = ARMode.QUICK_LOOK;\n        }\n      }\n      if (arMode !== ARMode.NONE) {\n        this[$arButtonContainer].classList.add('enabled');\n        this[$arButtonContainer].addEventListener('click', this[$onARButtonContainerClick]);\n      } else if (this[$arButtonContainer].classList.contains('enabled')) {\n        this[$arButtonContainer].removeEventListener('click', this[$onARButtonContainerClick]);\n        this[$arButtonContainer].classList.remove('enabled');\n        // If AR went from working to not, notify the element.\n        const status = ARStatus.FAILED;\n        this.setAttribute('ar-status', status);\n        this.dispatchEvent(new CustomEvent('ar-status', {\n          detail: {\n            status\n          }\n        }));\n      }\n      this[$arMode] = arMode;\n    }\n    async [$enterARWithWebXR]() {\n      console.log('Attempting to present in AR with WebXR...');\n      await this[$triggerLoad]();\n      try {\n        this[$arButtonContainer].removeEventListener('click', this[$onARButtonContainerClick]);\n        const {\n          arRenderer\n        } = this[$renderer];\n        arRenderer.placeOnWall = this.arPlacement === 'wall';\n        await arRenderer.present(this[$scene], this.xrEnvironment);\n      } catch (error) {\n        console.warn('Error while trying to present in AR with WebXR');\n        console.error(error);\n        await this[$renderer].arRenderer.stopPresenting();\n        isWebXRBlocked = true;\n        console.warn('Falling back to next ar-mode');\n        await this[$selectARMode]();\n        this.activateAR();\n      } finally {\n        this[$selectARMode]();\n      }\n    }\n    async [$triggerLoad]() {\n      if (!this.loaded) {\n        this[$preload] = true;\n        this[$updateSource]();\n        await waitForEvent(this, 'load');\n        this[$preload] = false;\n      }\n    }\n    [$shouldAttemptPreload]() {\n      return super[$shouldAttemptPreload]() || this[$preload];\n    }\n    /**\n     * Takes a URL and a title string, and attempts to launch Scene Viewer on\n     * the current device.\n     */\n    [$openSceneViewer]() {\n      const location = self.location.toString();\n      const locationUrl = new URL(location);\n      const modelUrl = new URL(this.src, location);\n      if (modelUrl.hash) modelUrl.hash = '';\n      const params = new URLSearchParams(modelUrl.search);\n      locationUrl.hash = noArViewerSigil;\n      // modelUrl can contain title/link/sound etc.\n      params.set('mode', 'ar_preferred');\n      if (!params.has('disable_occlusion')) {\n        params.set('disable_occlusion', 'true');\n      }\n      if (this.arScale === 'fixed') {\n        params.set('resizable', 'false');\n      }\n      if (this.arPlacement === 'wall') {\n        params.set('enable_vertical_placement', 'true');\n      }\n      if (params.has('sound')) {\n        const soundUrl = new URL(params.get('sound'), location);\n        params.set('sound', soundUrl.toString());\n      }\n      if (params.has('link')) {\n        const linkUrl = new URL(params.get('link'), location);\n        params.set('link', linkUrl.toString());\n      }\n      const intent = `intent://arvr.google.com/scene-viewer/1.0?${params.toString() + '&file=' + encodeURIComponent(modelUrl.toString())}#Intent;scheme=https;package=com.google.ar.core;action=android.intent.action.VIEW;S.browser_fallback_url=${encodeURIComponent(locationUrl.toString())};end;`;\n      const undoHashChange = () => {\n        if (self.location.hash === noArViewerSigil) {\n          isSceneViewerBlocked = true;\n          // The new history will be the current URL with a new hash.\n          // Go back one step so that we reset to the expected URL.\n          // NOTE(cdata): this should not invoke any browser-level navigation\n          // because hash-only changes modify the URL in-place without\n          // navigating:\n          self.history.back();\n          console.warn('Error while trying to present in AR with Scene Viewer');\n          console.warn('Falling back to next ar-mode');\n          this[$selectARMode]();\n          // Would be nice to activateAR() here, but webXR fails due to not\n          // seeing a user activation.\n        }\n      };\n      self.addEventListener('hashchange', undoHashChange, {\n        once: true\n      });\n      this[$arAnchor].setAttribute('href', intent);\n      console.log('Attempting to present in AR with Scene Viewer...');\n      this[$arAnchor].click();\n    }\n    /**\n     * Takes a URL to a USDZ file and sets the appropriate fields so that\n     * Safari iOS can intent to their AR Quick Look.\n     */\n    async [$openIOSARQuickLook]() {\n      const generateUsdz = !this.iosSrc;\n      this[$arButtonContainer].classList.remove('enabled');\n      const objectURL = generateUsdz ? await this.prepareUSDZ() : this.iosSrc;\n      const modelUrl = new URL(objectURL, self.location.toString());\n      if (generateUsdz) {\n        const location = self.location.toString();\n        const locationUrl = new URL(location);\n        const srcUrl = new URL(this.src, locationUrl);\n        if (srcUrl.hash) {\n          modelUrl.hash = srcUrl.hash;\n        }\n      }\n      if (this.arScale === 'fixed') {\n        if (modelUrl.hash) {\n          modelUrl.hash += '&';\n        }\n        modelUrl.hash += 'allowsContentScaling=0';\n      }\n      const anchor = this[$arAnchor];\n      anchor.setAttribute('rel', 'ar');\n      const img = document.createElement('img');\n      anchor.appendChild(img);\n      anchor.setAttribute('href', modelUrl.toString());\n      if (generateUsdz) {\n        anchor.setAttribute('download', 'model.usdz');\n      }\n      // attach anchor to shadow DOM to ensure iOS16 ARQL banner click message\n      // event propagation\n      anchor.style.display = 'none';\n      if (!anchor.isConnected) this.shadowRoot.appendChild(anchor);\n      console.log('Attempting to present in AR with Quick Look...');\n      anchor.click();\n      anchor.removeChild(img);\n      if (generateUsdz) {\n        URL.revokeObjectURL(objectURL);\n      }\n      this[$arButtonContainer].classList.add('enabled');\n    }\n    async prepareUSDZ() {\n      const updateSourceProgress = this[$progressTracker].beginActivity();\n      await this[$triggerLoad]();\n      const {\n        model,\n        shadow\n      } = this[$scene];\n      if (model == null) {\n        return '';\n      }\n      let visible = false;\n      // Remove shadow from export\n      if (shadow != null) {\n        visible = shadow.visible;\n        shadow.visible = false;\n      }\n      updateSourceProgress(0.2);\n      const exporter = new USDZExporter();\n      const arraybuffer = await exporter.parse(model);\n      const blob = new Blob([arraybuffer], {\n        type: 'model/vnd.usdz+zip'\n      });\n      const url = URL.createObjectURL(blob);\n      updateSourceProgress(1);\n      if (shadow != null) {\n        shadow.visible = visible;\n      }\n      return url;\n    }\n  }\n  __decorate([property({\n    type: Boolean,\n    attribute: 'ar'\n  })], ARModelViewerElement.prototype, \"ar\", void 0);\n  __decorate([property({\n    type: String,\n    attribute: 'ar-scale'\n  })], ARModelViewerElement.prototype, \"arScale\", void 0);\n  __decorate([property({\n    type: String,\n    attribute: 'ar-placement'\n  })], ARModelViewerElement.prototype, \"arPlacement\", void 0);\n  __decorate([property({\n    type: String,\n    attribute: 'ar-modes'\n  })], ARModelViewerElement.prototype, \"arModes\", void 0);\n  __decorate([property({\n    type: String,\n    attribute: 'ios-src'\n  })], ARModelViewerElement.prototype, \"iosSrc\", void 0);\n  __decorate([property({\n    type: Boolean,\n    attribute: 'xr-environment'\n  })], ARModelViewerElement.prototype, \"xrEnvironment\", void 0);\n  return ARModelViewerElement;\n};","map":{"version":3,"names":["property","USDZExporter","IS_AR_QUICKLOOK_CANDIDATE","IS_SCENEVIEWER_CANDIDATE","IS_WEBXR_AR_CANDIDATE","$needsRender","$progressTracker","$renderer","$scene","$shouldAttemptPreload","$updateSource","enumerationDeserializer","ARStatus","ARTracking","waitForEvent","isWebXRBlocked","isSceneViewerBlocked","noArViewerSigil","deserializeARModes","DEFAULT_AR_MODES","ARMode","QUICK_LOOK","SCENE_VIEWER","WEBXR","NONE","$arButtonContainer","Symbol","$enterARWithWebXR","$openSceneViewer","$openIOSARQuickLook","$canActivateAR","$arMode","$arModes","$arAnchor","$preload","$onARButtonContainerClick","$onARStatus","$onARTracking","$onARTap","$selectARMode","$triggerLoad","ARMixin","ModelViewerElement","ARModelViewerElement","constructor","ar","arScale","arPlacement","arModes","iosSrc","xrEnvironment","_a","_b","shadowRoot","querySelector","_c","document","createElement","_d","Set","_e","_f","_g","event","preventDefault","activateAR","_h","status","NOT_PRESENTING","arRenderer","presentedScene","setAttribute","dispatchEvent","CustomEvent","detail","removeAttribute","SESSION_STARTED","TRACKING","_j","_k","data","canActivateAR","connectedCallback","addEventListener","disconnectedCallback","removeEventListener","update","changedProperties","has","canScale","updateShadow","console","warn","arMode","src","value","supportsPresentation","classList","add","contains","remove","FAILED","log","placeOnWall","present","error","stopPresenting","loaded","location","self","toString","locationUrl","URL","modelUrl","hash","params","URLSearchParams","search","set","soundUrl","get","linkUrl","intent","encodeURIComponent","undoHashChange","history","back","once","click","generateUsdz","objectURL","prepareUSDZ","srcUrl","anchor","img","appendChild","style","display","isConnected","removeChild","revokeObjectURL","updateSourceProgress","beginActivity","model","shadow","visible","exporter","arraybuffer","parse","blob","Blob","type","url","createObjectURL","__decorate","Boolean","attribute","String"],"sources":["../../src/features/ar.ts"],"sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit/decorators.js';\nimport {USDZExporter} from 'three/examples/jsm/exporters/USDZExporter.js';\n\nimport {IS_AR_QUICKLOOK_CANDIDATE, IS_SCENEVIEWER_CANDIDATE, IS_WEBXR_AR_CANDIDATE} from '../constants.js';\nimport ModelViewerElementBase, {$needsRender, $progressTracker, $renderer, $scene, $shouldAttemptPreload, $updateSource} from '../model-viewer-base.js';\nimport {enumerationDeserializer} from '../styles/deserializers.js';\nimport {ARStatus, ARTracking} from '../three-components/ARRenderer.js';\nimport {Constructor, waitForEvent} from '../utilities.js';\n\nlet isWebXRBlocked = false;\nlet isSceneViewerBlocked = false;\nconst noArViewerSigil = '#model-viewer-no-ar-fallback';\n\nexport type ARMode = 'quick-look'|'scene-viewer'|'webxr'|'none';\n\nconst deserializeARModes = enumerationDeserializer<ARMode>(\n    ['quick-look', 'scene-viewer', 'webxr', 'none']);\n\nconst DEFAULT_AR_MODES = 'webxr scene-viewer quick-look';\n\nconst ARMode: {[index: string]: ARMode} = {\n  QUICK_LOOK: 'quick-look',\n  SCENE_VIEWER: 'scene-viewer',\n  WEBXR: 'webxr',\n  NONE: 'none'\n};\n\nexport interface ARStatusDetails {\n  status: ARStatus;\n}\n\nexport interface ARTrackingDetails {\n  status: ARTracking;\n}\n\nconst $arButtonContainer = Symbol('arButtonContainer');\nconst $enterARWithWebXR = Symbol('enterARWithWebXR');\nexport const $openSceneViewer = Symbol('openSceneViewer');\nexport const $openIOSARQuickLook = Symbol('openIOSARQuickLook');\nconst $canActivateAR = Symbol('canActivateAR');\nconst $arMode = Symbol('arMode');\nconst $arModes = Symbol('arModes');\nconst $arAnchor = Symbol('arAnchor');\nconst $preload = Symbol('preload');\n\nconst $onARButtonContainerClick = Symbol('onARButtonContainerClick');\nconst $onARStatus = Symbol('onARStatus');\nconst $onARTracking = Symbol('onARTracking');\nconst $onARTap = Symbol('onARTap');\nconst $selectARMode = Symbol('selectARMode');\nconst $triggerLoad = Symbol('triggerLoad');\n\nexport declare interface ARInterface {\n  ar: boolean;\n  arModes: string;\n  arScale: string;\n  arPlacement: string;\n  iosSrc: string|null;\n  xrEnvironment: boolean;\n  readonly canActivateAR: boolean;\n  activateAR(): Promise<void>;\n}\n\nexport const ARMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement: T): Constructor<ARInterface>&T => {\n  class ARModelViewerElement extends ModelViewerElement {\n    @property({type: Boolean, attribute: 'ar'}) ar: boolean = false;\n\n    @property({type: String, attribute: 'ar-scale'}) arScale: string = 'auto';\n\n    @property({type: String, attribute: 'ar-placement'})\n    arPlacement: string = 'floor';\n\n    @property({type: String, attribute: 'ar-modes'})\n    arModes: string = DEFAULT_AR_MODES;\n\n    @property({type: String, attribute: 'ios-src'}) iosSrc: string|null = null;\n\n    @property({type: Boolean, attribute: 'xr-environment'})\n    xrEnvironment: boolean = false;\n\n    get canActivateAR(): boolean {\n      return this[$arMode] !== ARMode.NONE;\n    }\n\n    protected[$canActivateAR]: boolean = false;\n\n    // TODO: Add this to the shadow root as part of this mixin's\n    // implementation:\n    protected[$arButtonContainer]: HTMLElement =\n        this.shadowRoot!.querySelector('.ar-button') as HTMLElement;\n\n    protected[$arAnchor] = document.createElement('a');\n\n    protected[$arModes]: Set<ARMode> = new Set();\n    protected[$arMode]: ARMode = ARMode.NONE;\n    protected[$preload] = false;\n\n    private[$onARButtonContainerClick] = (event: Event) => {\n      event.preventDefault();\n      this.activateAR();\n    };\n\n    private[$onARStatus] = ({status}: {status: ARStatus}) => {\n      if (status === ARStatus.NOT_PRESENTING ||\n          this[$renderer].arRenderer.presentedScene === this[$scene]) {\n        this.setAttribute('ar-status', status);\n        this.dispatchEvent(\n            new CustomEvent<ARStatusDetails>('ar-status', {detail: {status}}));\n        if (status === ARStatus.NOT_PRESENTING) {\n          this.removeAttribute('ar-tracking');\n        } else if (status === ARStatus.SESSION_STARTED) {\n          this.setAttribute('ar-tracking', ARTracking.TRACKING);\n        }\n      }\n    };\n\n    private[$onARTracking] = ({status}: {status: ARTracking}) => {\n      this.setAttribute('ar-tracking', status);\n      this.dispatchEvent(new CustomEvent<ARTrackingDetails>(\n          'ar-tracking', {detail: {status}}));\n    };\n\n    private[$onARTap] = (event: Event) => {\n      if ((event as any).data == '_apple_ar_quicklook_button_tapped') {\n        this.dispatchEvent(new CustomEvent('quick-look-button-tapped'));\n      }\n    };\n\n    connectedCallback() {\n      super.connectedCallback();\n\n      this[$renderer].arRenderer.addEventListener('status', this[$onARStatus]);\n      this.setAttribute('ar-status', ARStatus.NOT_PRESENTING);\n\n      this[$renderer].arRenderer.addEventListener(\n          'tracking', this[$onARTracking]);\n\n      this[$arAnchor].addEventListener('message', this[$onARTap]);\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      this[$renderer].arRenderer.removeEventListener(\n          'status', this[$onARStatus]);\n      this[$renderer].arRenderer.removeEventListener(\n          'tracking', this[$onARTracking]);\n\n      this[$arAnchor].removeEventListener('message', this[$onARTap]);\n    }\n\n    update(changedProperties: Map<string, any>) {\n      super.update(changedProperties);\n\n      if (changedProperties.has('arScale')) {\n        this[$scene].canScale = this.arScale !== 'fixed';\n      }\n\n      if (changedProperties.has('arPlacement')) {\n        this[$scene].updateShadow();\n        this[$needsRender]();\n      }\n\n      if (changedProperties.has('arModes')) {\n        this[$arModes] = deserializeARModes(this.arModes);\n      }\n\n      if (changedProperties.has('ar') || changedProperties.has('arModes') ||\n          changedProperties.has('src') || changedProperties.has('iosSrc')) {\n        this[$selectARMode]();\n      }\n    }\n\n    /**\n     * Activates AR. Note that for any mode that is not WebXR-based, this\n     * method most likely has to be called synchronous from a user\n     * interaction handler. Otherwise, attempts to activate modes that\n     * require user interaction will most likely be ignored.\n     */\n    async activateAR() {\n      switch (this[$arMode]) {\n        case ARMode.QUICK_LOOK:\n          await this[$openIOSARQuickLook]();\n          break;\n        case ARMode.WEBXR:\n          await this[$enterARWithWebXR]();\n          break;\n        case ARMode.SCENE_VIEWER:\n          this[$openSceneViewer]();\n          break;\n        default:\n          console.warn(\n              'No AR Mode can be activated. This is probably due to missing \\\nconfiguration or device capabilities');\n          break;\n      }\n    }\n\n    async[$selectARMode]() {\n      let arMode = ARMode.NONE;\n      if (this.ar) {\n        if (this.src != null) {\n          for (const value of this[$arModes]) {\n            if (value === 'webxr' && IS_WEBXR_AR_CANDIDATE && !isWebXRBlocked &&\n                await this[$renderer].arRenderer.supportsPresentation()) {\n              arMode = ARMode.WEBXR;\n              break;\n            }\n            if (value === 'scene-viewer' && IS_SCENEVIEWER_CANDIDATE &&\n                !isSceneViewerBlocked) {\n              arMode = ARMode.SCENE_VIEWER;\n              break;\n            }\n            if (value === 'quick-look' && IS_AR_QUICKLOOK_CANDIDATE) {\n              arMode = ARMode.QUICK_LOOK;\n              break;\n            }\n          }\n        }\n\n        // The presence of ios-src overrides the absence of quick-look\n        // ar-mode.\n        if (arMode === ARMode.NONE && this.iosSrc != null &&\n            IS_AR_QUICKLOOK_CANDIDATE) {\n          arMode = ARMode.QUICK_LOOK;\n        }\n      }\n\n      if (arMode !== ARMode.NONE) {\n        this[$arButtonContainer].classList.add('enabled');\n        this[$arButtonContainer].addEventListener(\n            'click', this[$onARButtonContainerClick]);\n      } else if (this[$arButtonContainer].classList.contains('enabled')) {\n        this[$arButtonContainer].removeEventListener(\n            'click', this[$onARButtonContainerClick]);\n        this[$arButtonContainer].classList.remove('enabled');\n\n        // If AR went from working to not, notify the element.\n        const status = ARStatus.FAILED;\n        this.setAttribute('ar-status', status);\n        this.dispatchEvent(\n            new CustomEvent<ARStatusDetails>('ar-status', {detail: {status}}));\n      }\n      this[$arMode] = arMode;\n    }\n\n    protected async[$enterARWithWebXR]() {\n      console.log('Attempting to present in AR with WebXR...');\n\n      await this[$triggerLoad]();\n\n      try {\n        this[$arButtonContainer].removeEventListener(\n            'click', this[$onARButtonContainerClick]);\n        const {arRenderer} = this[$renderer];\n        arRenderer.placeOnWall = this.arPlacement === 'wall';\n        await arRenderer.present(this[$scene], this.xrEnvironment);\n      } catch (error) {\n        console.warn('Error while trying to present in AR with WebXR');\n        console.error(error);\n        await this[$renderer].arRenderer.stopPresenting();\n        isWebXRBlocked = true;\n        console.warn('Falling back to next ar-mode');\n        await this[$selectARMode]();\n        this.activateAR();\n      } finally {\n        this[$selectARMode]();\n      }\n    }\n\n    async[$triggerLoad]() {\n      if (!this.loaded) {\n        this[$preload] = true;\n        this[$updateSource]();\n        await waitForEvent(this, 'load');\n        this[$preload] = false;\n      }\n    }\n\n    [$shouldAttemptPreload](): boolean {\n      return super[$shouldAttemptPreload]() || this[$preload];\n    }\n\n    /**\n     * Takes a URL and a title string, and attempts to launch Scene Viewer on\n     * the current device.\n     */\n    [$openSceneViewer]() {\n      const location = self.location.toString();\n      const locationUrl = new URL(location);\n      const modelUrl = new URL(this.src!, location);\n      if (modelUrl.hash)\n        modelUrl.hash = '';\n      const params = new URLSearchParams(modelUrl.search);\n\n      locationUrl.hash = noArViewerSigil;\n\n      // modelUrl can contain title/link/sound etc.\n      params.set('mode', 'ar_preferred');\n      if (!params.has('disable_occlusion')) {\n        params.set('disable_occlusion', 'true');\n      }\n      if (this.arScale === 'fixed') {\n        params.set('resizable', 'false');\n      }\n      if (this.arPlacement === 'wall') {\n        params.set('enable_vertical_placement', 'true');\n      }\n      if (params.has('sound')) {\n        const soundUrl = new URL(params.get('sound')!, location);\n        params.set('sound', soundUrl.toString());\n      }\n      if (params.has('link')) {\n        const linkUrl = new URL(params.get('link')!, location);\n        params.set('link', linkUrl.toString());\n      }\n\n      const intent = `intent://arvr.google.com/scene-viewer/1.0?${\n          params.toString() + '&file=' +\n          encodeURIComponent(\n              modelUrl\n                  .toString())}#Intent;scheme=https;package=com.google.ar.core;action=android.intent.action.VIEW;S.browser_fallback_url=${\n          encodeURIComponent(locationUrl.toString())};end;`;\n\n      const undoHashChange = () => {\n        if (self.location.hash === noArViewerSigil) {\n          isSceneViewerBlocked = true;\n          // The new history will be the current URL with a new hash.\n          // Go back one step so that we reset to the expected URL.\n          // NOTE(cdata): this should not invoke any browser-level navigation\n          // because hash-only changes modify the URL in-place without\n          // navigating:\n          self.history.back();\n          console.warn('Error while trying to present in AR with Scene Viewer');\n          console.warn('Falling back to next ar-mode');\n          this[$selectARMode]();\n          // Would be nice to activateAR() here, but webXR fails due to not\n          // seeing a user activation.\n        }\n      };\n\n      self.addEventListener('hashchange', undoHashChange, {once: true});\n\n      this[$arAnchor].setAttribute('href', intent);\n      console.log('Attempting to present in AR with Scene Viewer...');\n      this[$arAnchor].click();\n    }\n\n    /**\n     * Takes a URL to a USDZ file and sets the appropriate fields so that\n     * Safari iOS can intent to their AR Quick Look.\n     */\n    async[$openIOSARQuickLook]() {\n      const generateUsdz = !this.iosSrc;\n\n      this[$arButtonContainer].classList.remove('enabled');\n\n      const objectURL = generateUsdz ? await this.prepareUSDZ() : this.iosSrc!;\n      const modelUrl = new URL(objectURL, self.location.toString());\n\n      if (generateUsdz) {\n        const location = self.location.toString();\n        const locationUrl = new URL(location);\n        const srcUrl = new URL(this.src!, locationUrl);\n        if (srcUrl.hash) {\n          modelUrl.hash = srcUrl.hash;\n        }\n      }\n\n      if (this.arScale === 'fixed') {\n        if (modelUrl.hash) {\n          modelUrl.hash += '&';\n        }\n        modelUrl.hash += 'allowsContentScaling=0';\n      }\n\n      const anchor = this[$arAnchor];\n      anchor.setAttribute('rel', 'ar');\n      const img = document.createElement('img');\n      anchor.appendChild(img);\n      anchor.setAttribute('href', modelUrl.toString());\n      if (generateUsdz) {\n        anchor.setAttribute('download', 'model.usdz');\n      }\n\n      // attach anchor to shadow DOM to ensure iOS16 ARQL banner click message\n      // event propagation\n      anchor.style.display = 'none';\n      if (!anchor.isConnected)\n        this.shadowRoot!.appendChild(anchor);\n\n      console.log('Attempting to present in AR with Quick Look...');\n      anchor.click();\n      anchor.removeChild(img);\n      if (generateUsdz) {\n        URL.revokeObjectURL(objectURL);\n      }\n      this[$arButtonContainer].classList.add('enabled');\n    }\n\n    async prepareUSDZ(): Promise<string> {\n      const updateSourceProgress = this[$progressTracker].beginActivity();\n\n      await this[$triggerLoad]();\n\n      const {model, shadow} = this[$scene];\n      if (model == null) {\n        return '';\n      }\n\n      let visible = false;\n\n      // Remove shadow from export\n      if (shadow != null) {\n        visible = shadow.visible;\n        shadow.visible = false;\n      }\n\n      updateSourceProgress(0.2);\n\n      const exporter = new USDZExporter();\n      const arraybuffer = await exporter.parse(model);\n      const blob = new Blob([arraybuffer], {\n        type: 'model/vnd.usdz+zip',\n      });\n\n      const url = URL.createObjectURL(blob);\n\n      updateSourceProgress(1);\n\n      if (shadow != null) {\n        shadow.visible = visible;\n      }\n\n      return url;\n    }\n  }\n\n  return ARModelViewerElement;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}