{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Image } from './image.js';\nimport { Sampler } from './sampler.js';\nimport { $correlatedObjects, ThreeDOMElement } from './three-dom-element.js';\nconst $image = Symbol('image');\nconst $sampler = Symbol('sampler');\nconst $threeTexture = Symbol('threeTexture');\n/**\n * Material facade implementation for Three.js materials\n */\nexport class Texture extends ThreeDOMElement {\n  constructor(onUpdate, threeTexture) {\n    super(onUpdate, new Set(threeTexture ? [threeTexture] : []));\n    this[$sampler] = new Sampler(onUpdate, threeTexture);\n    this[$image] = new Image(onUpdate, threeTexture);\n  }\n  get [$threeTexture]() {\n    var _a;\n    return (_a = this[$correlatedObjects]) === null || _a === void 0 ? void 0 : _a.values().next().value;\n  }\n  get name() {\n    return this[$threeTexture].name || '';\n  }\n  set name(name) {\n    for (const texture of this[$correlatedObjects]) {\n      texture.name = name;\n    }\n  }\n  get sampler() {\n    return this[$sampler];\n  }\n  get source() {\n    return this[$image];\n  }\n}","map":{"version":3,"names":["Image","Sampler","$correlatedObjects","ThreeDOMElement","$image","Symbol","$sampler","$threeTexture","Texture","constructor","onUpdate","threeTexture","Set","_a","values","next","value","name","texture","sampler","source"],"sources":["../../../src/features/scene-graph/texture.ts"],"sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Texture as ThreeTexture} from 'three';\n\nimport {Texture as TextureInterface} from './api.js';\nimport {Image} from './image.js';\nimport {Sampler} from './sampler.js';\nimport {$correlatedObjects, ThreeDOMElement} from './three-dom-element.js';\n\n\n\nconst $image = Symbol('image');\nconst $sampler = Symbol('sampler');\nconst $threeTexture = Symbol('threeTexture');\n\n/**\n * Material facade implementation for Three.js materials\n */\nexport class Texture extends ThreeDOMElement implements TextureInterface {\n  private[$image]: Image;\n  private[$sampler]: Sampler;\n\n  private get[$threeTexture]() {\n    return this[$correlatedObjects]?.values().next().value as ThreeTexture;\n  }\n\n  constructor(onUpdate: () => void, threeTexture: ThreeTexture) {\n    super(onUpdate, new Set<ThreeTexture>(threeTexture ? [threeTexture] : []));\n\n    this[$sampler] = new Sampler(onUpdate, threeTexture);\n    this[$image] = new Image(onUpdate, threeTexture);\n  }\n\n  get name(): string {\n    return this[$threeTexture].name || '';\n  }\n\n  set name(name: string) {\n    for (const texture of this[$correlatedObjects] as Set<ThreeTexture>) {\n      texture.name = name;\n    }\n  }\n\n  get sampler(): Sampler {\n    return this[$sampler];\n  }\n\n  get source(): Image {\n    return this[$image];\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAkBA,SAAQA,KAAK,QAAO,YAAY;AAChC,SAAQC,OAAO,QAAO,cAAc;AACpC,SAAQC,kBAAkB,EAAEC,eAAe,QAAO,wBAAwB;AAI1E,MAAMC,MAAM,GAAGC,MAAM,CAAC,OAAO,CAAC;AAC9B,MAAMC,QAAQ,GAAGD,MAAM,CAAC,SAAS,CAAC;AAClC,MAAME,aAAa,GAAGF,MAAM,CAAC,cAAc,CAAC;AAE5C;;;AAGA,OAAM,MAAOG,OAAQ,SAAQL,eAAe;EAQ1CM,YAAYC,QAAoB,EAAEC,YAA0B;IAC1D,KAAK,CAACD,QAAQ,EAAE,IAAIE,GAAG,CAAeD,YAAY,GAAG,CAACA,YAAY,CAAC,GAAG,EAAE,CAAC,CAAC;IAE1E,IAAI,CAACL,QAAQ,CAAC,GAAG,IAAIL,OAAO,CAACS,QAAQ,EAAEC,YAAY,CAAC;IACpD,IAAI,CAACP,MAAM,CAAC,GAAG,IAAIJ,KAAK,CAACU,QAAQ,EAAEC,YAAY,CAAC;EAClD;EATA,KAAYJ,aAAa,IAAC;;IACxB,OAAO,CAAAM,EAAA,OAAI,CAACX,kBAAkB,CAAC,cAAAW,EAAA,uBAAAA,EAAA,CAAEC,MAAM,GAAGC,IAAI,GAAGC,KAAqB;EACxE;EASA,IAAIC,IAAIA,CAAA;IACN,OAAO,IAAI,CAACV,aAAa,CAAC,CAACU,IAAI,IAAI,EAAE;EACvC;EAEA,IAAIA,IAAIA,CAACA,IAAY;IACnB,KAAK,MAAMC,OAAO,IAAI,IAAI,CAAChB,kBAAkB,CAAsB,EAAE;MACnEgB,OAAO,CAACD,IAAI,GAAGA,IAAI;;EAEvB;EAEA,IAAIE,OAAOA,CAAA;IACT,OAAO,IAAI,CAACb,QAAQ,CAAC;EACvB;EAEA,IAAIc,MAAMA,CAAA;IACR,OAAO,IAAI,CAAChB,MAAM,CAAC;EACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}