{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Color } from 'three';\nimport { TextureInfo, TextureUsage } from './texture-info.js';\nimport { $correlatedObjects, $onUpdate, ThreeDOMElement } from './three-dom-element.js';\nconst $threeMaterial = Symbol('threeMaterial');\nconst $threeMaterials = Symbol('threeMaterials');\nconst $baseColorTexture = Symbol('baseColorTexture');\nconst $metallicRoughnessTexture = Symbol('metallicRoughnessTexture');\n/**\n * PBR material properties facade implementation for Three.js materials\n */\nexport class PBRMetallicRoughness extends ThreeDOMElement {\n  constructor(onUpdate, correlatedMaterials) {\n    super(onUpdate, correlatedMaterials);\n    const {\n      map,\n      metalnessMap\n    } = correlatedMaterials.values().next().value;\n    this[$baseColorTexture] = new TextureInfo(onUpdate, TextureUsage.Base, map, correlatedMaterials);\n    this[$metallicRoughnessTexture] = new TextureInfo(onUpdate, TextureUsage.MetallicRoughness, metalnessMap, correlatedMaterials);\n  }\n  get [$threeMaterials]() {\n    return this[$correlatedObjects];\n  }\n  get [$threeMaterial]() {\n    var _a;\n    return (_a = this[$correlatedObjects]) === null || _a === void 0 ? void 0 : _a.values().next().value;\n  }\n  get baseColorFactor() {\n    const rgba = [0, 0, 0, this[$threeMaterial].opacity];\n    this[$threeMaterial].color.toArray(rgba);\n    return rgba;\n  }\n  get metallicFactor() {\n    return this[$threeMaterial].metalness;\n  }\n  get roughnessFactor() {\n    return this[$threeMaterial].roughness;\n  }\n  get baseColorTexture() {\n    return this[$baseColorTexture];\n  }\n  get metallicRoughnessTexture() {\n    return this[$metallicRoughnessTexture];\n  }\n  setBaseColorFactor(rgba) {\n    const color = new Color();\n    if (rgba instanceof Array) {\n      color.fromArray(rgba);\n    } else {\n      color.set(rgba);\n    }\n    for (const material of this[$threeMaterials]) {\n      material.color.set(color);\n      if (rgba instanceof Array) {\n        material.opacity = rgba[3];\n      } else {\n        rgba = [0, 0, 0, material.opacity];\n        color.toArray(rgba);\n      }\n    }\n    this[$onUpdate]();\n  }\n  setMetallicFactor(value) {\n    for (const material of this[$threeMaterials]) {\n      material.metalness = value;\n    }\n    this[$onUpdate]();\n  }\n  setRoughnessFactor(value) {\n    for (const material of this[$threeMaterials]) {\n      material.roughness = value;\n    }\n    this[$onUpdate]();\n  }\n}","map":{"version":3,"names":["Color","TextureInfo","TextureUsage","$correlatedObjects","$onUpdate","ThreeDOMElement","$threeMaterial","Symbol","$threeMaterials","$baseColorTexture","$metallicRoughnessTexture","PBRMetallicRoughness","constructor","onUpdate","correlatedMaterials","map","metalnessMap","values","next","value","Base","MetallicRoughness","_a","baseColorFactor","rgba","opacity","color","toArray","metallicFactor","metalness","roughnessFactor","roughness","baseColorTexture","metallicRoughnessTexture","setBaseColorFactor","Array","fromArray","set","material","setMetallicFactor","setRoughnessFactor"],"sources":["../../../src/features/scene-graph/pbr-metallic-roughness.ts"],"sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Color, ColorRepresentation, MeshPhysicalMaterial} from 'three';\n\nimport {PBRMetallicRoughness as PBRMetallicRoughnessInterface, RGBA} from './api.js';\nimport {TextureInfo, TextureUsage} from './texture-info.js';\nimport {$correlatedObjects, $onUpdate, ThreeDOMElement} from './three-dom-element.js';\n\n\nconst $threeMaterial = Symbol('threeMaterial');\nconst $threeMaterials = Symbol('threeMaterials');\nconst $baseColorTexture = Symbol('baseColorTexture');\nconst $metallicRoughnessTexture = Symbol('metallicRoughnessTexture');\n\n/**\n * PBR material properties facade implementation for Three.js materials\n */\nexport class PBRMetallicRoughness extends ThreeDOMElement implements\n    PBRMetallicRoughnessInterface {\n  private[$baseColorTexture]: TextureInfo;\n  private[$metallicRoughnessTexture]: TextureInfo;\n\n  private get[$threeMaterials](): Set<MeshPhysicalMaterial> {\n    return this[$correlatedObjects] as Set<MeshPhysicalMaterial>;\n  }\n\n  private get[$threeMaterial]() {\n    return this[$correlatedObjects]?.values().next().value as\n        MeshPhysicalMaterial;\n  }\n\n  constructor(\n      onUpdate: () => void, correlatedMaterials: Set<MeshPhysicalMaterial>) {\n    super(onUpdate, correlatedMaterials);\n\n    const {map, metalnessMap} = correlatedMaterials.values().next().value;\n\n    this[$baseColorTexture] =\n        new TextureInfo(onUpdate, TextureUsage.Base, map, correlatedMaterials);\n\n    this[$metallicRoughnessTexture] = new TextureInfo(\n        onUpdate,\n        TextureUsage.MetallicRoughness,\n        metalnessMap,\n        correlatedMaterials);\n  }\n\n\n  get baseColorFactor(): RGBA {\n    const rgba = [0, 0, 0, this[$threeMaterial].opacity];\n    this[$threeMaterial].color.toArray(rgba);\n    return rgba as RGBA;\n  }\n\n  get metallicFactor(): number {\n    return this[$threeMaterial].metalness;\n  }\n\n  get roughnessFactor(): number {\n    return this[$threeMaterial].roughness;\n  }\n\n  get baseColorTexture(): TextureInfo {\n    return this[$baseColorTexture];\n  }\n\n  get metallicRoughnessTexture(): TextureInfo {\n    return this[$metallicRoughnessTexture];\n  }\n\n  setBaseColorFactor(rgba: RGBA|string) {\n    const color = new Color();\n    if (rgba instanceof Array) {\n      color.fromArray(rgba);\n    } else {\n      color.set(rgba as ColorRepresentation);\n    }\n    for (const material of this[$threeMaterials]) {\n      material.color.set(color);\n      if (rgba instanceof Array) {\n        material.opacity = (rgba)[3];\n      } else {\n        rgba = [0, 0, 0, material.opacity];\n        color.toArray(rgba);\n      }\n    }\n    this[$onUpdate]();\n  }\n\n  setMetallicFactor(value: number) {\n    for (const material of this[$threeMaterials]) {\n      material.metalness = value;\n    }\n    this[$onUpdate]();\n  }\n\n  setRoughnessFactor(value: number) {\n    for (const material of this[$threeMaterials]) {\n      material.roughness = value;\n    }\n    this[$onUpdate]();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}