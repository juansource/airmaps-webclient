{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const SETTLING_TIME = 10000; // plenty long enough\nconst MIN_DECAY_MILLISECONDS = 0.001;\nexport const DECAY_MILLISECONDS = 50;\n/**\n * The Damper class is a generic second-order critically damped system that does\n * one linear step of the desired length of time. The only parameter is\n * DECAY_MILLISECONDS. This common parameter makes all states converge at the\n * same rate regardless of scale. xNormalization is a number to provide the\n * rough scale of x, such that NIL_SPEED clamping also happens at roughly the\n * same convergence for all states.\n */\nexport class Damper {\n  constructor(decayMilliseconds = DECAY_MILLISECONDS) {\n    this.velocity = 0;\n    this.naturalFrequency = 0;\n    this.setDecayTime(decayMilliseconds);\n  }\n  setDecayTime(decayMilliseconds) {\n    this.naturalFrequency = 1 / Math.max(MIN_DECAY_MILLISECONDS, decayMilliseconds);\n  }\n  update(x, xGoal, timeStepMilliseconds, xNormalization) {\n    const nilSpeed = 0.0002 * this.naturalFrequency;\n    if (x == null || xNormalization === 0) {\n      return xGoal;\n    }\n    if (x === xGoal && this.velocity === 0) {\n      return xGoal;\n    }\n    if (timeStepMilliseconds < 0) {\n      return x;\n    }\n    // Exact solution to a critically damped second-order system, where:\n    // acceleration = this.naturalFrequency * this.naturalFrequency * (xGoal\n    // - x) - 2 * this.naturalFrequency * this.velocity;\n    const deltaX = x - xGoal;\n    const intermediateVelocity = this.velocity + this.naturalFrequency * deltaX;\n    const intermediateX = deltaX + timeStepMilliseconds * intermediateVelocity;\n    const decay = Math.exp(-this.naturalFrequency * timeStepMilliseconds);\n    const newVelocity = (intermediateVelocity - this.naturalFrequency * intermediateX) * decay;\n    const acceleration = -this.naturalFrequency * (newVelocity + intermediateVelocity * decay);\n    if (Math.abs(newVelocity) < nilSpeed * Math.abs(xNormalization) && acceleration * deltaX >= 0) {\n      // This ensures the controls settle and stop calling this function instead\n      // of asymptotically approaching their goal.\n      this.velocity = 0;\n      return xGoal;\n    } else {\n      this.velocity = newVelocity;\n      return xGoal + intermediateX * decay;\n    }\n  }\n}","map":{"version":3,"names":["SETTLING_TIME","MIN_DECAY_MILLISECONDS","DECAY_MILLISECONDS","Damper","constructor","decayMilliseconds","velocity","naturalFrequency","setDecayTime","Math","max","update","x","xGoal","timeStepMilliseconds","xNormalization","nilSpeed","deltaX","intermediateVelocity","intermediateX","decay","exp","newVelocity","acceleration","abs"],"sources":["../../src/three-components/Damper.ts"],"sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const SETTLING_TIME = 10000;  // plenty long enough\nconst MIN_DECAY_MILLISECONDS = 0.001;\nexport const DECAY_MILLISECONDS = 50;\n\n/**\n * The Damper class is a generic second-order critically damped system that does\n * one linear step of the desired length of time. The only parameter is\n * DECAY_MILLISECONDS. This common parameter makes all states converge at the\n * same rate regardless of scale. xNormalization is a number to provide the\n * rough scale of x, such that NIL_SPEED clamping also happens at roughly the\n * same convergence for all states.\n */\nexport class Damper {\n  private velocity: number = 0;\n  private naturalFrequency: number = 0;\n\n  constructor(decayMilliseconds: number = DECAY_MILLISECONDS) {\n    this.setDecayTime(decayMilliseconds);\n  }\n\n  setDecayTime(decayMilliseconds: number) {\n    this.naturalFrequency =\n        1 / Math.max(MIN_DECAY_MILLISECONDS, decayMilliseconds);\n  }\n\n  update(\n      x: number,\n      xGoal: number,\n      timeStepMilliseconds: number,\n      xNormalization: number,\n      ): number {\n    const nilSpeed = 0.0002 * this.naturalFrequency;\n\n    if (x == null || xNormalization === 0) {\n      return xGoal;\n    }\n    if (x === xGoal && this.velocity === 0) {\n      return xGoal;\n    }\n    if (timeStepMilliseconds < 0) {\n      return x;\n    }\n    // Exact solution to a critically damped second-order system, where:\n    // acceleration = this.naturalFrequency * this.naturalFrequency * (xGoal\n    // - x) - 2 * this.naturalFrequency * this.velocity;\n    const deltaX = (x - xGoal);\n    const intermediateVelocity = this.velocity + this.naturalFrequency * deltaX;\n    const intermediateX = deltaX + timeStepMilliseconds * intermediateVelocity;\n    const decay = Math.exp(-this.naturalFrequency * timeStepMilliseconds);\n    const newVelocity =\n        (intermediateVelocity - this.naturalFrequency * intermediateX) * decay;\n    const acceleration =\n        -this.naturalFrequency * (newVelocity + intermediateVelocity * decay);\n    if (Math.abs(newVelocity) < nilSpeed * Math.abs(xNormalization) &&\n        acceleration * deltaX >= 0) {\n      // This ensures the controls settle and stop calling this function instead\n      // of asymptotically approaching their goal.\n      this.velocity = 0;\n      return xGoal;\n    } else {\n      this.velocity = newVelocity;\n      return xGoal + intermediateX * decay;\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAeA,OAAO,MAAMA,aAAa,GAAG,KAAK,CAAC,CAAE;AACrC,MAAMC,sBAAsB,GAAG,KAAK;AACpC,OAAO,MAAMC,kBAAkB,GAAG,EAAE;AAEpC;;;;;;;;AAQA,OAAM,MAAOC,MAAM;EAIjBC,YAAYC,iBAAA,GAA4BH,kBAAkB;IAHlD,KAAAI,QAAQ,GAAW,CAAC;IACpB,KAAAC,gBAAgB,GAAW,CAAC;IAGlC,IAAI,CAACC,YAAY,CAACH,iBAAiB,CAAC;EACtC;EAEAG,YAAYA,CAACH,iBAAyB;IACpC,IAAI,CAACE,gBAAgB,GACjB,CAAC,GAAGE,IAAI,CAACC,GAAG,CAACT,sBAAsB,EAAEI,iBAAiB,CAAC;EAC7D;EAEAM,MAAMA,CACFC,CAAS,EACTC,KAAa,EACbC,oBAA4B,EAC5BC,cAAsB;IAExB,MAAMC,QAAQ,GAAG,MAAM,GAAG,IAAI,CAACT,gBAAgB;IAE/C,IAAIK,CAAC,IAAI,IAAI,IAAIG,cAAc,KAAK,CAAC,EAAE;MACrC,OAAOF,KAAK;;IAEd,IAAID,CAAC,KAAKC,KAAK,IAAI,IAAI,CAACP,QAAQ,KAAK,CAAC,EAAE;MACtC,OAAOO,KAAK;;IAEd,IAAIC,oBAAoB,GAAG,CAAC,EAAE;MAC5B,OAAOF,CAAC;;IAEV;IACA;IACA;IACA,MAAMK,MAAM,GAAIL,CAAC,GAAGC,KAAM;IAC1B,MAAMK,oBAAoB,GAAG,IAAI,CAACZ,QAAQ,GAAG,IAAI,CAACC,gBAAgB,GAAGU,MAAM;IAC3E,MAAME,aAAa,GAAGF,MAAM,GAAGH,oBAAoB,GAAGI,oBAAoB;IAC1E,MAAME,KAAK,GAAGX,IAAI,CAACY,GAAG,CAAC,CAAC,IAAI,CAACd,gBAAgB,GAAGO,oBAAoB,CAAC;IACrE,MAAMQ,WAAW,GACb,CAACJ,oBAAoB,GAAG,IAAI,CAACX,gBAAgB,GAAGY,aAAa,IAAIC,KAAK;IAC1E,MAAMG,YAAY,GACd,CAAC,IAAI,CAAChB,gBAAgB,IAAIe,WAAW,GAAGJ,oBAAoB,GAAGE,KAAK,CAAC;IACzE,IAAIX,IAAI,CAACe,GAAG,CAACF,WAAW,CAAC,GAAGN,QAAQ,GAAGP,IAAI,CAACe,GAAG,CAACT,cAAc,CAAC,IAC3DQ,YAAY,GAAGN,MAAM,IAAI,CAAC,EAAE;MAC9B;MACA;MACA,IAAI,CAACX,QAAQ,GAAG,CAAC;MACjB,OAAOO,KAAK;KACb,MAAM;MACL,IAAI,CAACP,QAAQ,GAAGgB,WAAW;MAC3B,OAAOT,KAAK,GAAGM,aAAa,GAAGC,KAAK;;EAExC"},"metadata":{},"sourceType":"module","externalDependencies":[]}