{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { HAS_WEBXR_DEVICE_API, HAS_WEBXR_HIT_TEST_API, IS_WEBXR_AR_CANDIDATE } from './constants.js';\nexport const deserializeUrl = url => !!url && url !== 'null' ? toFullUrl(url) : null;\nexport const assertIsArCandidate = () => {\n  if (IS_WEBXR_AR_CANDIDATE) {\n    return;\n  }\n  const missingApis = [];\n  if (!HAS_WEBXR_DEVICE_API) {\n    missingApis.push('WebXR Device API');\n  }\n  if (!HAS_WEBXR_HIT_TEST_API) {\n    missingApis.push('WebXR Hit Test API');\n  }\n  throw new Error(`The following APIs are required for AR, but are missing in this browser: ${missingApis.join(', ')}`);\n};\n/**\n * Converts a partial URL string to a fully qualified URL string.\n *\n * @param {String} url\n * @return {String}\n */\nexport const toFullUrl = partialUrl => {\n  const url = new URL(partialUrl, window.location.toString());\n  return url.toString();\n};\n/**\n * Returns a throttled version of a given function that is only invoked at most\n * once within a given threshold of time in milliseconds.\n *\n * The throttled version of the function has a \"flush\" property that resets the\n * threshold for cases when immediate invocation is desired.\n */\nexport const throttle = (fn, ms) => {\n  let timer = null;\n  const throttled = (...args) => {\n    if (timer != null) {\n      return;\n    }\n    fn(...args);\n    timer = self.setTimeout(() => timer = null, ms);\n  };\n  throttled.flush = () => {\n    if (timer != null) {\n      self.clearTimeout(timer);\n      timer = null;\n    }\n  };\n  return throttled;\n};\nexport const debounce = (fn, ms) => {\n  let timer = null;\n  return (...args) => {\n    if (timer != null) {\n      self.clearTimeout(timer);\n    }\n    timer = self.setTimeout(() => {\n      timer = null;\n      fn(...args);\n    }, ms);\n  };\n};\n/**\n * @param {Number} edge\n * @param {Number} value\n * @return {Number} 0 if value is less than edge, otherwise 1\n */\nexport const step = (edge, value) => {\n  return value < edge ? 0 : 1;\n};\n/**\n * @param {Number} value\n * @param {Number} lowerLimit\n * @param {Number} upperLimit\n * @return {Number} value clamped within lowerLimit..upperLimit\n */\nexport const clamp = (value, lowerLimit, upperLimit) => Math.max(lowerLimit, Math.min(upperLimit, value));\n// The DPR we use for a \"capped\" scenario (see resolveDpr below):\nexport const CAPPED_DEVICE_PIXEL_RATIO = 1;\n/**\n * This helper analyzes the layout of the current page to decide if we should\n * use the natural device pixel ratio, or a capped value.\n *\n * We cap DPR if there is no meta viewport (suggesting that user is not\n * consciously specifying how to scale the viewport relative to the device\n * screen size).\n *\n * The rationale is that this condition typically leads to a pathological\n * outcome on mobile devices. When the window dimensions are scaled up on a\n * device with a high DPR, we create a canvas that is much larger than\n * appropriate to accommodate for the pixel density if we naively use the\n * reported DPR.\n *\n * This value needs to be measured in real time, as device pixel ratio can\n * change over time (e.g., when a user zooms the page). Also, in some cases\n * (such as Firefox on Android), the window's innerWidth is initially reported\n * as the same as the screen's availWidth but changes later.\n *\n * A user who specifies a meta viewport, thereby consciously creating scaling\n * conditions where <model-viewer> is slow, will be encouraged to live their\n * best life.\n */\nexport const resolveDpr = (() => {\n  // If true, implies that the user is conscious of the viewport scaling\n  // relative to the device screen size.\n  const HAS_META_VIEWPORT_TAG = (() => {\n    var _a;\n    // Search result pages sometimes do not include a meta viewport tag even\n    // though they are certainly modern and work properly with devicePixelRatio.\n    if ((_a = document.documentElement.getAttribute('itemtype')) === null || _a === void 0 ? void 0 : _a.includes('schema.org/SearchResultsPage')) {\n      return true;\n    }\n    const metas = document.head != null ? Array.from(document.head.querySelectorAll('meta')) : [];\n    for (const meta of metas) {\n      if (meta.name === 'viewport') {\n        return true;\n      }\n    }\n    return false;\n  })();\n  if (!HAS_META_VIEWPORT_TAG) {\n    console.warn('No <meta name=\"viewport\"> detected; <model-viewer> will cap pixel density at 1.');\n  }\n  return () => HAS_META_VIEWPORT_TAG ? window.devicePixelRatio : CAPPED_DEVICE_PIXEL_RATIO;\n})();\n/**\n * Debug mode is enabled when one of the two following conditions is true:\n *\n *  1. A 'model-viewer-debug-mode' query parameter is present in the current\n *     search string\n *  2. There is a global object ModelViewerElement with a debugMode property set\n *     to true\n */\nexport const isDebugMode = (() => {\n  const debugQueryParameterName = 'model-viewer-debug-mode';\n  const debugQueryParameter = new RegExp(`[?&]${debugQueryParameterName}(&|$)`);\n  return () => self.ModelViewerElement && self.ModelViewerElement.debugMode || self.location && self.location.search && self.location.search.match(debugQueryParameter);\n})();\n/**\n * Returns the first key in a Map in iteration order.\n *\n * NOTE(cdata): This is necessary because IE11 does not implement iterator\n * methods of Map, and polymer-build does not polyfill these methods for\n * compatibility and performance reasons. This helper proposes that it is\n * a reasonable compromise to sacrifice a very small amount of runtime\n * performance in IE11 for the sake of code clarity.\n */\nexport const getFirstMapKey = map => {\n  if (map.keys != null) {\n    return map.keys().next().value || null;\n  }\n  let firstKey = null;\n  try {\n    map.forEach((_value, key, _map) => {\n      firstKey = key;\n      // Stop iterating the Map with forEach:\n      throw new Error();\n    });\n  } catch (_error) {}\n  return firstKey;\n};\nexport const timePasses = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n/**\n * @param {EventTarget|EventDispatcher} target\n * @param {string} eventName\n * @param {?Function} predicate\n */\nexport const waitForEvent = (target, eventName, predicate = null) => new Promise(resolve => {\n  function handler(event) {\n    if (!predicate || predicate(event)) {\n      resolve(event);\n      target.removeEventListener(eventName, handler);\n    }\n  }\n  target.addEventListener(eventName, handler);\n});","map":{"version":3,"names":["HAS_WEBXR_DEVICE_API","HAS_WEBXR_HIT_TEST_API","IS_WEBXR_AR_CANDIDATE","deserializeUrl","url","toFullUrl","assertIsArCandidate","missingApis","push","Error","join","partialUrl","URL","window","location","toString","throttle","fn","ms","timer","throttled","args","self","setTimeout","flush","clearTimeout","debounce","step","edge","value","clamp","lowerLimit","upperLimit","Math","max","min","CAPPED_DEVICE_PIXEL_RATIO","resolveDpr","HAS_META_VIEWPORT_TAG","_a","document","documentElement","getAttribute","includes","metas","head","Array","from","querySelectorAll","meta","name","console","warn","devicePixelRatio","isDebugMode","debugQueryParameterName","debugQueryParameter","RegExp","ModelViewerElement","debugMode","search","match","getFirstMapKey","map","keys","next","firstKey","forEach","_value","key","_map","_error","timePasses","Promise","resolve","waitForEvent","target","eventName","predicate","handler","event","removeEventListener","addEventListener"],"sources":["../src/utilities.ts"],"sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {EventDispatcher} from 'three';\n\nimport {HAS_WEBXR_DEVICE_API, HAS_WEBXR_HIT_TEST_API, IS_WEBXR_AR_CANDIDATE} from './constants.js';\n\nexport type Constructor<T = object, U = object> = {\n  new (...args: any[]): T,\n  prototype: T\n}&U;\n\nexport const deserializeUrl = (url: string|null): string|null =>\n    (!!url && url !== 'null') ? toFullUrl(url) : null;\n\n\nexport const assertIsArCandidate = () => {\n  if (IS_WEBXR_AR_CANDIDATE) {\n    return;\n  }\n\n  const missingApis = [];\n\n  if (!HAS_WEBXR_DEVICE_API) {\n    missingApis.push('WebXR Device API');\n  }\n\n  if (!HAS_WEBXR_HIT_TEST_API) {\n    missingApis.push('WebXR Hit Test API');\n  }\n\n  throw new Error(\n      `The following APIs are required for AR, but are missing in this browser: ${\n          missingApis.join(', ')}`);\n};\n\n\n/**\n * Converts a partial URL string to a fully qualified URL string.\n *\n * @param {String} url\n * @return {String}\n */\nexport const toFullUrl = (partialUrl: string): string => {\n  const url = new URL(partialUrl, window.location.toString());\n  return url.toString();\n};\n\n\n/**\n * Returns a throttled version of a given function that is only invoked at most\n * once within a given threshold of time in milliseconds.\n *\n * The throttled version of the function has a \"flush\" property that resets the\n * threshold for cases when immediate invocation is desired.\n */\nexport const throttle = (fn: (...args: Array<any>) => any, ms: number) => {\n  let timer: number|null = null;\n\n  const throttled = (...args: Array<any>) => {\n    if (timer != null) {\n      return;\n    }\n\n    fn(...args);\n\n    timer = self.setTimeout(() => timer = null, ms);\n  };\n\n  throttled.flush = () => {\n    if (timer != null) {\n      self.clearTimeout(timer);\n      timer = null;\n    }\n  };\n\n  return throttled;\n};\n\nexport const debounce = (fn: (...args: Array<any>) => any, ms: number) => {\n  let timer: number|null = null;\n\n  return (...args: Array<any>) => {\n    if (timer != null) {\n      self.clearTimeout(timer);\n    }\n\n    timer = self.setTimeout(() => {\n      timer = null;\n      fn(...args);\n    }, ms);\n  };\n};\n\n\n/**\n * @param {Number} edge\n * @param {Number} value\n * @return {Number} 0 if value is less than edge, otherwise 1\n */\nexport const step = (edge: number, value: number): number => {\n  return value < edge ? 0 : 1;\n};\n\n\n/**\n * @param {Number} value\n * @param {Number} lowerLimit\n * @param {Number} upperLimit\n * @return {Number} value clamped within lowerLimit..upperLimit\n */\nexport const clamp =\n    (value: number, lowerLimit: number, upperLimit: number): number =>\n        Math.max(lowerLimit, Math.min(upperLimit, value));\n\n\n// The DPR we use for a \"capped\" scenario (see resolveDpr below):\nexport const CAPPED_DEVICE_PIXEL_RATIO = 1;\n\n\n/**\n * This helper analyzes the layout of the current page to decide if we should\n * use the natural device pixel ratio, or a capped value.\n *\n * We cap DPR if there is no meta viewport (suggesting that user is not\n * consciously specifying how to scale the viewport relative to the device\n * screen size).\n *\n * The rationale is that this condition typically leads to a pathological\n * outcome on mobile devices. When the window dimensions are scaled up on a\n * device with a high DPR, we create a canvas that is much larger than\n * appropriate to accommodate for the pixel density if we naively use the\n * reported DPR.\n *\n * This value needs to be measured in real time, as device pixel ratio can\n * change over time (e.g., when a user zooms the page). Also, in some cases\n * (such as Firefox on Android), the window's innerWidth is initially reported\n * as the same as the screen's availWidth but changes later.\n *\n * A user who specifies a meta viewport, thereby consciously creating scaling\n * conditions where <model-viewer> is slow, will be encouraged to live their\n * best life.\n */\nexport const resolveDpr: () => number = (() => {\n  // If true, implies that the user is conscious of the viewport scaling\n  // relative to the device screen size.\n  const HAS_META_VIEWPORT_TAG = (() => {\n    // Search result pages sometimes do not include a meta viewport tag even\n    // though they are certainly modern and work properly with devicePixelRatio.\n    if (document.documentElement.getAttribute('itemtype')\n            ?.includes('schema.org/SearchResultsPage')) {\n      return true;\n    }\n\n    const metas = document.head != null ?\n        Array.from(document.head.querySelectorAll('meta')) :\n        [];\n\n    for (const meta of metas) {\n      if (meta.name === 'viewport') {\n        return true;\n      }\n    }\n\n    return false;\n  })();\n\n  if (!HAS_META_VIEWPORT_TAG) {\n    console.warn(\n        'No <meta name=\"viewport\"> detected; <model-viewer> will cap pixel density at 1.');\n  }\n\n  return () => HAS_META_VIEWPORT_TAG ? window.devicePixelRatio :\n                                       CAPPED_DEVICE_PIXEL_RATIO;\n})();\n\n\n/**\n * Debug mode is enabled when one of the two following conditions is true:\n *\n *  1. A 'model-viewer-debug-mode' query parameter is present in the current\n *     search string\n *  2. There is a global object ModelViewerElement with a debugMode property set\n *     to true\n */\nexport const isDebugMode = (() => {\n  const debugQueryParameterName = 'model-viewer-debug-mode';\n  const debugQueryParameter = new RegExp(`[?&]${debugQueryParameterName}(&|$)`);\n\n  return () => ((self as any).ModelViewerElement &&\n                (self as any).ModelViewerElement.debugMode) ||\n      (self.location && self.location.search &&\n       self.location.search.match(debugQueryParameter));\n})();\n\n\n/**\n * Returns the first key in a Map in iteration order.\n *\n * NOTE(cdata): This is necessary because IE11 does not implement iterator\n * methods of Map, and polymer-build does not polyfill these methods for\n * compatibility and performance reasons. This helper proposes that it is\n * a reasonable compromise to sacrifice a very small amount of runtime\n * performance in IE11 for the sake of code clarity.\n */\nexport const getFirstMapKey = <T = any, U = any>(map: Map<T, U>): T|null => {\n  if (map.keys != null) {\n    return map.keys().next().value || null;\n  }\n\n  let firstKey: T|null = null;\n\n  try {\n    map.forEach((_value: U, key: T, _map: Map<T, U>) => {\n      firstKey = key;\n      // Stop iterating the Map with forEach:\n      throw new Error();\n    });\n  } catch (_error) {\n  }\n\n  return firstKey;\n};\n\n/**\n * Three.js EventDispatcher and DOM EventTarget use different event patterns,\n * so AnyEvent covers the shape of both event types.\n */\nexport type AnyEvent = Event|CustomEvent<any>|{[index: string]: string};\n\nexport type PredicateFunction<T = void> = (value: T) => boolean;\n\nexport const timePasses = (ms: number = 0): Promise<void> =>\n    new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * @param {EventTarget|EventDispatcher} target\n * @param {string} eventName\n * @param {?Function} predicate\n */\nexport const waitForEvent = <T extends AnyEvent = Event>(\n    target: EventTarget|EventDispatcher,\n    eventName: string,\n    predicate: PredicateFunction<T>|null = null): Promise<T> =>\n    new Promise(resolve => {\n      function handler(event: AnyEvent) {\n        if (!predicate || predicate(event as T)) {\n          resolve(event as T);\n          target.removeEventListener(eventName, handler as any);\n        }\n      }\n      target.addEventListener(eventName, handler as any);\n    });"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}