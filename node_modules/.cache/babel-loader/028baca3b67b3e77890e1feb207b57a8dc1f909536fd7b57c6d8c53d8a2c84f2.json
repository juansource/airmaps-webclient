{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nimport * as fflate from '../libs/fflate.module.js';\nclass USDZExporter {\n  async parse(scene, options = {}) {\n    options = Object.assign({\n      ar: {\n        anchoring: {\n          type: 'plane'\n        },\n        planeAnchoring: {\n          alignment: 'horizontal'\n        }\n      },\n      quickLookCompatible: false\n    }, options);\n    const files = {};\n    const modelFileName = 'model.usda';\n\n    // model file should be first in USDZ archive so we init it here\n    files[modelFileName] = null;\n    let output = buildHeader();\n    output += buildSceneStart(options);\n    const materials = {};\n    const textures = {};\n    scene.traverseVisible(object => {\n      if (object.isMesh) {\n        const geometry = object.geometry;\n        const material = object.material;\n        if (material.isMeshStandardMaterial) {\n          const geometryFileName = 'geometries/Geometry_' + geometry.id + '.usda';\n          if (!(geometryFileName in files)) {\n            const meshObject = buildMeshObject(geometry);\n            files[geometryFileName] = buildUSDFileAsString(meshObject);\n          }\n          if (!(material.uuid in materials)) {\n            materials[material.uuid] = material;\n          }\n          output += buildXform(object, geometry, material);\n        } else {\n          console.warn('THREE.USDZExporter: Unsupported material type (USDZ only supports MeshStandardMaterial)', object);\n        }\n      } else if (object.isCamera) {\n        output += buildCamera(object);\n      }\n    });\n    output += buildSceneEnd();\n    output += buildMaterials(materials, textures, options.quickLookCompatible);\n    files[modelFileName] = fflate.strToU8(output);\n    output = null;\n    for (const id in textures) {\n      const texture = textures[id];\n      const canvas = imageToCanvas(texture.image, texture.flipY);\n      const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png', 1));\n      files[`textures/Texture_${id}.png`] = new Uint8Array(await blob.arrayBuffer());\n    }\n\n    // 64 byte alignment\n    // https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n    let offset = 0;\n    for (const filename in files) {\n      const file = files[filename];\n      const headerSize = 34 + filename.length;\n      offset += headerSize;\n      const offsetMod64 = offset & 63;\n      if (offsetMod64 !== 4) {\n        const padLength = 64 - offsetMod64;\n        const padding = new Uint8Array(padLength);\n        files[filename] = [file, {\n          extra: {\n            12345: padding\n          }\n        }];\n      }\n      offset = file.length;\n    }\n    return fflate.zipSync(files, {\n      level: 0\n    });\n  }\n}\nfunction imageToCanvas(image, flipY) {\n  if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    const scale = 1024 / Math.max(image.width, image.height);\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width * Math.min(1, scale);\n    canvas.height = image.height * Math.min(1, scale);\n    const context = canvas.getContext('2d');\n\n    // TODO: We should be able to do this in the UsdTransform2d?\n\n    if (flipY === true) {\n      context.translate(0, canvas.height);\n      context.scale(1, -1);\n    }\n    context.drawImage(image, 0, 0, canvas.width, canvas.height);\n    return canvas;\n  } else {\n    throw new Error('THREE.USDZExporter: No valid image data found. Unable to process texture.');\n  }\n}\n\n//\n\nconst PRECISION = 7;\nfunction buildHeader() {\n  return `#usda 1.0\n(\n\tcustomLayerData = {\n\t\tstring creator = \"Three.js USDZExporter\"\n\t}\n\tdefaultPrim = \"Root\"\n\tmetersPerUnit = 1\n\tupAxis = \"Y\"\n)\n\n`;\n}\nfunction buildSceneStart(options) {\n  return `def Xform \"Root\"\n{\n\tdef Scope \"Scenes\" (\n\t\tkind = \"sceneLibrary\"\n\t)\n\t{\n\t\tdef Xform \"Scene\" (\n\t\t\tcustomData = {\n\t\t\t\tbool preliminary_collidesWithEnvironment = 0\n\t\t\t\tstring sceneName = \"Scene\"\n\t\t\t}\n\t\t\tsceneName = \"Scene\"\n\t\t)\n\t\t{\n\t\ttoken preliminary:anchoring:type = \"${options.ar.anchoring.type}\"\n\t\ttoken preliminary:planeAnchoring:alignment = \"${options.ar.planeAnchoring.alignment}\"\n\n`;\n}\nfunction buildSceneEnd() {\n  return `\n\t\t}\n\t}\n}\n\n`;\n}\nfunction buildUSDFileAsString(dataToInsert) {\n  let output = buildHeader();\n  output += dataToInsert;\n  return fflate.strToU8(output);\n}\n\n// Xform\n\nfunction buildXform(object, geometry, material) {\n  const name = 'Object_' + object.id;\n  const transform = buildMatrix(object.matrixWorld);\n  if (object.matrixWorld.determinant() < 0) {\n    console.warn('THREE.USDZExporter: USDZ does not support negative scales', object);\n  }\n  return `def Xform \"${name}\" (\n\tprepend references = @./geometries/Geometry_${geometry.id}.usda@</Geometry>\n\tprepend apiSchemas = [\"MaterialBindingAPI\"]\n)\n{\n\tmatrix4d xformOp:transform = ${transform}\n\tuniform token[] xformOpOrder = [\"xformOp:transform\"]\n\n\trel material:binding = </Materials/Material_${material.id}>\n}\n\n`;\n}\nfunction buildMatrix(matrix) {\n  const array = matrix.elements;\n  return `( ${buildMatrixRow(array, 0)}, ${buildMatrixRow(array, 4)}, ${buildMatrixRow(array, 8)}, ${buildMatrixRow(array, 12)} )`;\n}\nfunction buildMatrixRow(array, offset) {\n  return `(${array[offset + 0]}, ${array[offset + 1]}, ${array[offset + 2]}, ${array[offset + 3]})`;\n}\n\n// Mesh\n\nfunction buildMeshObject(geometry) {\n  const mesh = buildMesh(geometry);\n  return `\ndef \"Geometry\"\n{\n${mesh}\n}\n`;\n}\nfunction buildMesh(geometry) {\n  const name = 'Geometry';\n  const attributes = geometry.attributes;\n  const count = attributes.position.count;\n  return `\n\tdef Mesh \"${name}\"\n\t{\n\t\tint[] faceVertexCounts = [${buildMeshVertexCount(geometry)}]\n\t\tint[] faceVertexIndices = [${buildMeshVertexIndices(geometry)}]\n\t\tnormal3f[] normals = [${buildVector3Array(attributes.normal, count)}] (\n\t\t\tinterpolation = \"vertex\"\n\t\t)\n\t\tpoint3f[] points = [${buildVector3Array(attributes.position, count)}]\n${buildPrimvars(attributes, count)}\n\t\tuniform token subdivisionScheme = \"none\"\n\t}\n`;\n}\nfunction buildMeshVertexCount(geometry) {\n  const count = geometry.index !== null ? geometry.index.count : geometry.attributes.position.count;\n  return Array(count / 3).fill(3).join(', ');\n}\nfunction buildMeshVertexIndices(geometry) {\n  const index = geometry.index;\n  const array = [];\n  if (index !== null) {\n    for (let i = 0; i < index.count; i++) {\n      array.push(index.getX(i));\n    }\n  } else {\n    const length = geometry.attributes.position.count;\n    for (let i = 0; i < length; i++) {\n      array.push(i);\n    }\n  }\n  return array.join(', ');\n}\nfunction buildVector3Array(attribute, count) {\n  if (attribute === undefined) {\n    console.warn('USDZExporter: Normals missing.');\n    return Array(count).fill('(0, 0, 0)').join(', ');\n  }\n  const array = [];\n  for (let i = 0; i < attribute.count; i++) {\n    const x = attribute.getX(i);\n    const y = attribute.getY(i);\n    const z = attribute.getZ(i);\n    array.push(`(${x.toPrecision(PRECISION)}, ${y.toPrecision(PRECISION)}, ${z.toPrecision(PRECISION)})`);\n  }\n  return array.join(', ');\n}\nfunction buildVector2Array(attribute, count) {\n  if (attribute === undefined) {\n    console.warn('USDZExporter: UVs missing.');\n    return Array(count).fill('(0, 0)').join(', ');\n  }\n  const array = [];\n  for (let i = 0; i < attribute.count; i++) {\n    const x = attribute.getX(i);\n    const y = attribute.getY(i);\n    array.push(`(${x.toPrecision(PRECISION)}, ${1 - y.toPrecision(PRECISION)})`);\n  }\n  return array.join(', ');\n}\nfunction buildPrimvars(attributes, count) {\n  let string = '';\n  for (let i = 0; i < 4; i++) {\n    const id = i > 0 ? i : '';\n    const attribute = attributes['uv' + id];\n    if (attribute !== undefined) {\n      string += `\n\t\ttexCoord2f[] primvars:st${id} = [${buildVector2Array(attribute, count)}] (\n\t\t\tinterpolation = \"vertex\"\n\t\t)`;\n    }\n  }\n  return string;\n}\n\n// Materials\n\nfunction buildMaterials(materials, textures, quickLookCompatible = false) {\n  const array = [];\n  for (const uuid in materials) {\n    const material = materials[uuid];\n    array.push(buildMaterial(material, textures, quickLookCompatible));\n  }\n  return `def \"Materials\"\n{\n${array.join('')}\n}\n\n`;\n}\nfunction buildMaterial(material, textures, quickLookCompatible = false) {\n  // https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n\n  const pad = '\t\t\t';\n  const inputs = [];\n  const samplers = [];\n  function buildTexture(texture, mapType, color) {\n    const id = texture.source.id + '_' + texture.flipY;\n    textures[id] = texture;\n    const uv = texture.channel > 0 ? 'st' + texture.channel : 'st';\n    const WRAPPINGS = {\n      1000: 'repeat',\n      // RepeatWrapping\n      1001: 'clamp',\n      // ClampToEdgeWrapping\n      1002: 'mirror' // MirroredRepeatWrapping\n    };\n    const repeat = texture.repeat.clone();\n    const offset = texture.offset.clone();\n    const rotation = texture.rotation;\n\n    // rotation is around the wrong point. after rotation we need to shift offset again so that we're rotating around the right spot\n    const xRotationOffset = Math.sin(rotation);\n    const yRotationOffset = Math.cos(rotation);\n\n    // texture coordinates start in the opposite corner, need to correct\n    offset.y = 1 - offset.y - repeat.y;\n\n    // turns out QuickLook is buggy and interprets texture repeat inverted/applies operations in a different order.\n    // Apple Feedback: \tFB10036297 and FB11442287\n    if (quickLookCompatible) {\n      // This is NOT correct yet in QuickLook, but comes close for a range of models.\n      // It becomes more incorrect the bigger the offset is\n\n      offset.x = offset.x / repeat.x;\n      offset.y = offset.y / repeat.y;\n      offset.x += xRotationOffset / repeat.x;\n      offset.y += yRotationOffset - 1;\n    } else {\n      // results match glTF results exactly. verified correct in usdview.\n      offset.x += xRotationOffset * repeat.x;\n      offset.y += (1 - yRotationOffset) * repeat.y;\n    }\n    return `\n\t\tdef Shader \"PrimvarReader_${mapType}\"\n\t\t{\n\t\t\tuniform token info:id = \"UsdPrimvarReader_float2\"\n\t\t\tfloat2 inputs:fallback = (0.0, 0.0)\n\t\t\ttoken inputs:varname = \"${uv}\"\n\t\t\tfloat2 outputs:result\n\t\t}\n\n\t\tdef Shader \"Transform2d_${mapType}\"\n\t\t{\n\t\t\tuniform token info:id = \"UsdTransform2d\"\n\t\t\ttoken inputs:in.connect = </Materials/Material_${material.id}/PrimvarReader_${mapType}.outputs:result>\n\t\t\tfloat inputs:rotation = ${(rotation * (180 / Math.PI)).toFixed(PRECISION)}\n\t\t\tfloat2 inputs:scale = ${buildVector2(repeat)}\n\t\t\tfloat2 inputs:translation = ${buildVector2(offset)}\n\t\t\tfloat2 outputs:result\n\t\t}\n\n\t\tdef Shader \"Texture_${texture.id}_${mapType}\"\n\t\t{\n\t\t\tuniform token info:id = \"UsdUVTexture\"\n\t\t\tasset inputs:file = @textures/Texture_${id}.png@\n\t\t\tfloat2 inputs:st.connect = </Materials/Material_${material.id}/Transform2d_${mapType}.outputs:result>\n\t\t\t${color !== undefined ? 'float4 inputs:scale = ' + buildColor4(color) : ''}\n\t\t\ttoken inputs:sourceColorSpace = \"${texture.colorSpace === THREE.NoColorSpace ? 'raw' : 'sRGB'}\"\n\t\t\ttoken inputs:wrapS = \"${WRAPPINGS[texture.wrapS]}\"\n\t\t\ttoken inputs:wrapT = \"${WRAPPINGS[texture.wrapT]}\"\n\t\t\tfloat outputs:r\n\t\t\tfloat outputs:g\n\t\t\tfloat outputs:b\n\t\t\tfloat3 outputs:rgb\n\t\t\t${material.transparent || material.alphaTest > 0.0 ? 'float outputs:a' : ''}\n\t\t}`;\n  }\n  if (material.side === THREE.DoubleSide) {\n    console.warn('THREE.USDZExporter: USDZ does not support double sided materials', material);\n  }\n  if (material.map !== null) {\n    inputs.push(`${pad}color3f inputs:diffuseColor.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:rgb>`);\n    if (material.transparent) {\n      inputs.push(`${pad}float inputs:opacity.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:a>`);\n    } else if (material.alphaTest > 0.0) {\n      inputs.push(`${pad}float inputs:opacity.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:a>`);\n      inputs.push(`${pad}float inputs:opacityThreshold = ${material.alphaTest}`);\n    }\n    samplers.push(buildTexture(material.map, 'diffuse', material.color));\n  } else {\n    inputs.push(`${pad}color3f inputs:diffuseColor = ${buildColor(material.color)}`);\n  }\n  if (material.emissiveMap !== null) {\n    inputs.push(`${pad}color3f inputs:emissiveColor.connect = </Materials/Material_${material.id}/Texture_${material.emissiveMap.id}_emissive.outputs:rgb>`);\n    samplers.push(buildTexture(material.emissiveMap, 'emissive'));\n  } else if (material.emissive.getHex() > 0) {\n    inputs.push(`${pad}color3f inputs:emissiveColor = ${buildColor(material.emissive)}`);\n  }\n  if (material.normalMap !== null) {\n    inputs.push(`${pad}normal3f inputs:normal.connect = </Materials/Material_${material.id}/Texture_${material.normalMap.id}_normal.outputs:rgb>`);\n    samplers.push(buildTexture(material.normalMap, 'normal'));\n  }\n  if (material.aoMap !== null) {\n    inputs.push(`${pad}float inputs:occlusion.connect = </Materials/Material_${material.id}/Texture_${material.aoMap.id}_occlusion.outputs:r>`);\n    samplers.push(buildTexture(material.aoMap, 'occlusion'));\n  }\n  if (material.roughnessMap !== null && material.roughness === 1) {\n    inputs.push(`${pad}float inputs:roughness.connect = </Materials/Material_${material.id}/Texture_${material.roughnessMap.id}_roughness.outputs:g>`);\n    samplers.push(buildTexture(material.roughnessMap, 'roughness'));\n  } else {\n    inputs.push(`${pad}float inputs:roughness = ${material.roughness}`);\n  }\n  if (material.metalnessMap !== null && material.metalness === 1) {\n    inputs.push(`${pad}float inputs:metallic.connect = </Materials/Material_${material.id}/Texture_${material.metalnessMap.id}_metallic.outputs:b>`);\n    samplers.push(buildTexture(material.metalnessMap, 'metallic'));\n  } else {\n    inputs.push(`${pad}float inputs:metallic = ${material.metalness}`);\n  }\n  if (material.alphaMap !== null) {\n    inputs.push(`${pad}float inputs:opacity.connect = </Materials/Material_${material.id}/Texture_${material.alphaMap.id}_opacity.outputs:r>`);\n    inputs.push(`${pad}float inputs:opacityThreshold = 0.0001`);\n    samplers.push(buildTexture(material.alphaMap, 'opacity'));\n  } else {\n    inputs.push(`${pad}float inputs:opacity = ${material.opacity}`);\n  }\n  if (material.isMeshPhysicalMaterial) {\n    inputs.push(`${pad}float inputs:clearcoat = ${material.clearcoat}`);\n    inputs.push(`${pad}float inputs:clearcoatRoughness = ${material.clearcoatRoughness}`);\n    inputs.push(`${pad}float inputs:ior = ${material.ior}`);\n  }\n  return `\n\tdef Material \"Material_${material.id}\"\n\t{\n\t\tdef Shader \"PreviewSurface\"\n\t\t{\n\t\t\tuniform token info:id = \"UsdPreviewSurface\"\n${inputs.join('\\n')}\n\t\t\tint inputs:useSpecularWorkflow = 0\n\t\t\ttoken outputs:surface\n\t\t}\n\n\t\ttoken outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>\n\n${samplers.join('\\n')}\n\n\t}\n`;\n}\nfunction buildColor(color) {\n  return `(${color.r}, ${color.g}, ${color.b})`;\n}\nfunction buildColor4(color) {\n  return `(${color.r}, ${color.g}, ${color.b}, 1.0)`;\n}\nfunction buildVector2(vector) {\n  return `(${vector.x}, ${vector.y})`;\n}\nfunction buildCamera(camera) {\n  const name = camera.name ? camera.name : 'Camera_' + camera.id;\n  const transform = buildMatrix(camera.matrixWorld);\n  if (camera.matrixWorld.determinant() < 0) {\n    console.warn('THREE.USDZExporter: USDZ does not support negative scales', camera);\n  }\n  if (camera.isOrthographicCamera) {\n    return `def Camera \"${name}\"\n\t\t{\n\t\t\tmatrix4d xformOp:transform = ${transform}\n\t\t\tuniform token[] xformOpOrder = [\"xformOp:transform\"]\n\n\t\t\tfloat2 clippingRange = (${camera.near.toPrecision(PRECISION)}, ${camera.far.toPrecision(PRECISION)})\n\t\t\tfloat horizontalAperture = ${((Math.abs(camera.left) + Math.abs(camera.right)) * 10).toPrecision(PRECISION)}\n\t\t\tfloat verticalAperture = ${((Math.abs(camera.top) + Math.abs(camera.bottom)) * 10).toPrecision(PRECISION)}\n\t\t\ttoken projection = \"orthographic\"\n\t\t}\n\t\n\t`;\n  } else {\n    return `def Camera \"${name}\"\n\t\t{\n\t\t\tmatrix4d xformOp:transform = ${transform}\n\t\t\tuniform token[] xformOpOrder = [\"xformOp:transform\"]\n\n\t\t\tfloat2 clippingRange = (${camera.near.toPrecision(PRECISION)}, ${camera.far.toPrecision(PRECISION)})\n\t\t\tfloat focalLength = ${camera.getFocalLength().toPrecision(PRECISION)}\n\t\t\tfloat focusDistance = ${camera.focus.toPrecision(PRECISION)}\n\t\t\tfloat horizontalAperture = ${camera.getFilmWidth().toPrecision(PRECISION)}\n\t\t\ttoken projection = \"perspective\"\n\t\t\tfloat verticalAperture = ${camera.getFilmHeight().toPrecision(PRECISION)}\n\t\t}\n\t\n\t`;\n  }\n}\nexport { USDZExporter };","map":{"version":3,"names":["THREE","fflate","USDZExporter","parse","scene","options","Object","assign","ar","anchoring","type","planeAnchoring","alignment","quickLookCompatible","files","modelFileName","output","buildHeader","buildSceneStart","materials","textures","traverseVisible","object","isMesh","geometry","material","isMeshStandardMaterial","geometryFileName","id","meshObject","buildMeshObject","buildUSDFileAsString","uuid","buildXform","console","warn","isCamera","buildCamera","buildSceneEnd","buildMaterials","strToU8","texture","canvas","imageToCanvas","image","flipY","blob","Promise","resolve","toBlob","Uint8Array","arrayBuffer","offset","filename","file","headerSize","length","offsetMod64","padLength","padding","extra","zipSync","level","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","document","createElement","min","context","getContext","translate","drawImage","Error","PRECISION","dataToInsert","name","transform","buildMatrix","matrixWorld","determinant","matrix","array","elements","buildMatrixRow","mesh","buildMesh","attributes","count","position","buildMeshVertexCount","buildMeshVertexIndices","buildVector3Array","normal","buildPrimvars","index","Array","fill","join","i","push","getX","attribute","undefined","x","y","getY","z","getZ","toPrecision","buildVector2Array","string","buildMaterial","pad","inputs","samplers","buildTexture","mapType","color","source","uv","channel","WRAPPINGS","repeat","clone","rotation","xRotationOffset","sin","yRotationOffset","cos","PI","toFixed","buildVector2","buildColor4","colorSpace","NoColorSpace","wrapS","wrapT","transparent","alphaTest","side","DoubleSide","map","buildColor","emissiveMap","emissive","getHex","normalMap","aoMap","roughnessMap","roughness","metalnessMap","metalness","alphaMap","opacity","isMeshPhysicalMaterial","clearcoat","clearcoatRoughness","ior","r","g","b","vector","camera","isOrthographicCamera","near","far","abs","left","right","top","bottom","getFocalLength","focus","getFilmWidth","getFilmHeight"],"sources":["/Users/juangonzalez/Documents/GitHub/vue-project-kiwi/Clinet/node_modules/three/examples/jsm/exporters/USDZExporter.js"],"sourcesContent":["import * as THREE from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\nclass USDZExporter {\n\n\tasync parse( scene, options = {} ) {\n\n\t\toptions = Object.assign( {\n\t\t\tar: {\n\t\t\t\tanchoring: { type: 'plane' },\n\t\t\t\tplaneAnchoring: { alignment: 'horizontal' }\n\t\t\t},\n\t\t\tquickLookCompatible: false,\n\t\t}, options );\n\n\t\tconst files = {};\n\t\tconst modelFileName = 'model.usda';\n\n\t\t// model file should be first in USDZ archive so we init it here\n\t\tfiles[ modelFileName ] = null;\n\n\t\tlet output = buildHeader();\n\n\t\toutput += buildSceneStart( options );\n\n\t\tconst materials = {};\n\t\tconst textures = {};\n\n\t\tscene.traverseVisible( ( object ) => {\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tconst geometry = object.geometry;\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\tconst geometryFileName = 'geometries/Geometry_' + geometry.id + '.usda';\n\n\t\t\t\t\tif ( ! ( geometryFileName in files ) ) {\n\n\t\t\t\t\t\tconst meshObject = buildMeshObject( geometry );\n\t\t\t\t\t\tfiles[ geometryFileName ] = buildUSDFileAsString( meshObject );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! ( material.uuid in materials ) ) {\n\n\t\t\t\t\t\tmaterials[ material.uuid ] = material;\n\n\t\t\t\t\t}\n\n\t\t\t\t\toutput += buildXform( object, geometry, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.USDZExporter: Unsupported material type (USDZ only supports MeshStandardMaterial)', object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isCamera ) {\n\n\t\t\t\toutput += buildCamera( object );\n\n\t\t\t}\n\n\t\t} );\n\n\n\t\toutput += buildSceneEnd();\n\n\t\toutput += buildMaterials( materials, textures, options.quickLookCompatible );\n\n\t\tfiles[ modelFileName ] = fflate.strToU8( output );\n\t\toutput = null;\n\n\t\tfor ( const id in textures ) {\n\n\t\t\tconst texture = textures[ id ];\n\n\t\t\tconst canvas = imageToCanvas( texture.image, texture.flipY );\n\t\t\tconst blob = await new Promise( resolve => canvas.toBlob( resolve, 'image/png', 1 ) );\n\n\t\t\tfiles[ `textures/Texture_${ id }.png` ] = new Uint8Array( await blob.arrayBuffer() );\n\n\t\t}\n\n\t\t// 64 byte alignment\n\t\t// https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n\t\tlet offset = 0;\n\n\t\tfor ( const filename in files ) {\n\n\t\t\tconst file = files[ filename ];\n\t\t\tconst headerSize = 34 + filename.length;\n\n\t\t\toffset += headerSize;\n\n\t\t\tconst offsetMod64 = offset & 63;\n\n\t\t\tif ( offsetMod64 !== 4 ) {\n\n\t\t\t\tconst padLength = 64 - offsetMod64;\n\t\t\t\tconst padding = new Uint8Array( padLength );\n\n\t\t\t\tfiles[ filename ] = [ file, { extra: { 12345: padding } } ];\n\n\t\t\t}\n\n\t\t\toffset = file.length;\n\n\t\t}\n\n\t\treturn fflate.zipSync( files, { level: 0 } );\n\n\t}\n\n}\n\nfunction imageToCanvas( image, flipY ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\tconst scale = 1024 / Math.max( image.width, image.height );\n\n\t\tconst canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = image.width * Math.min( 1, scale );\n\t\tcanvas.height = image.height * Math.min( 1, scale );\n\n\t\tconst context = canvas.getContext( '2d' );\n\n\t\t// TODO: We should be able to do this in the UsdTransform2d?\n\n\t\tif ( flipY === true ) {\n\n\t\t\tcontext.translate( 0, canvas.height );\n\t\t\tcontext.scale( 1, - 1 );\n\n\t\t}\n\n\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\treturn canvas;\n\n\t} else {\n\n\t\tthrow new Error( 'THREE.USDZExporter: No valid image data found. Unable to process texture.' );\n\n\t}\n\n}\n\n//\n\nconst PRECISION = 7;\n\nfunction buildHeader() {\n\n\treturn `#usda 1.0\n(\n\tcustomLayerData = {\n\t\tstring creator = \"Three.js USDZExporter\"\n\t}\n\tdefaultPrim = \"Root\"\n\tmetersPerUnit = 1\n\tupAxis = \"Y\"\n)\n\n`;\n\n}\n\nfunction buildSceneStart( options ) {\n\n\treturn `def Xform \"Root\"\n{\n\tdef Scope \"Scenes\" (\n\t\tkind = \"sceneLibrary\"\n\t)\n\t{\n\t\tdef Xform \"Scene\" (\n\t\t\tcustomData = {\n\t\t\t\tbool preliminary_collidesWithEnvironment = 0\n\t\t\t\tstring sceneName = \"Scene\"\n\t\t\t}\n\t\t\tsceneName = \"Scene\"\n\t\t)\n\t\t{\n\t\ttoken preliminary:anchoring:type = \"${options.ar.anchoring.type}\"\n\t\ttoken preliminary:planeAnchoring:alignment = \"${options.ar.planeAnchoring.alignment}\"\n\n`;\n\n}\n\nfunction buildSceneEnd() {\n\n\treturn `\n\t\t}\n\t}\n}\n\n`;\n\n}\n\nfunction buildUSDFileAsString( dataToInsert ) {\n\n\tlet output = buildHeader();\n\toutput += dataToInsert;\n\treturn fflate.strToU8( output );\n\n}\n\n// Xform\n\nfunction buildXform( object, geometry, material ) {\n\n\tconst name = 'Object_' + object.id;\n\tconst transform = buildMatrix( object.matrixWorld );\n\n\tif ( object.matrixWorld.determinant() < 0 ) {\n\n\t\tconsole.warn( 'THREE.USDZExporter: USDZ does not support negative scales', object );\n\n\t}\n\n\treturn `def Xform \"${ name }\" (\n\tprepend references = @./geometries/Geometry_${ geometry.id }.usda@</Geometry>\n\tprepend apiSchemas = [\"MaterialBindingAPI\"]\n)\n{\n\tmatrix4d xformOp:transform = ${ transform }\n\tuniform token[] xformOpOrder = [\"xformOp:transform\"]\n\n\trel material:binding = </Materials/Material_${ material.id }>\n}\n\n`;\n\n}\n\nfunction buildMatrix( matrix ) {\n\n\tconst array = matrix.elements;\n\n\treturn `( ${ buildMatrixRow( array, 0 ) }, ${ buildMatrixRow( array, 4 ) }, ${ buildMatrixRow( array, 8 ) }, ${ buildMatrixRow( array, 12 ) } )`;\n\n}\n\nfunction buildMatrixRow( array, offset ) {\n\n\treturn `(${ array[ offset + 0 ] }, ${ array[ offset + 1 ] }, ${ array[ offset + 2 ] }, ${ array[ offset + 3 ] })`;\n\n}\n\n// Mesh\n\nfunction buildMeshObject( geometry ) {\n\n\tconst mesh = buildMesh( geometry );\n\treturn `\ndef \"Geometry\"\n{\n${mesh}\n}\n`;\n\n}\n\nfunction buildMesh( geometry ) {\n\n\tconst name = 'Geometry';\n\tconst attributes = geometry.attributes;\n\tconst count = attributes.position.count;\n\n\treturn `\n\tdef Mesh \"${ name }\"\n\t{\n\t\tint[] faceVertexCounts = [${ buildMeshVertexCount( geometry ) }]\n\t\tint[] faceVertexIndices = [${ buildMeshVertexIndices( geometry ) }]\n\t\tnormal3f[] normals = [${ buildVector3Array( attributes.normal, count )}] (\n\t\t\tinterpolation = \"vertex\"\n\t\t)\n\t\tpoint3f[] points = [${ buildVector3Array( attributes.position, count )}]\n${ buildPrimvars( attributes, count ) }\n\t\tuniform token subdivisionScheme = \"none\"\n\t}\n`;\n\n}\n\nfunction buildMeshVertexCount( geometry ) {\n\n\tconst count = geometry.index !== null ? geometry.index.count : geometry.attributes.position.count;\n\n\treturn Array( count / 3 ).fill( 3 ).join( ', ' );\n\n}\n\nfunction buildMeshVertexIndices( geometry ) {\n\n\tconst index = geometry.index;\n\tconst array = [];\n\n\tif ( index !== null ) {\n\n\t\tfor ( let i = 0; i < index.count; i ++ ) {\n\n\t\t\tarray.push( index.getX( i ) );\n\n\t\t}\n\n\t} else {\n\n\t\tconst length = geometry.attributes.position.count;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tarray.push( i );\n\n\t\t}\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\nfunction buildVector3Array( attribute, count ) {\n\n\tif ( attribute === undefined ) {\n\n\t\tconsole.warn( 'USDZExporter: Normals missing.' );\n\t\treturn Array( count ).fill( '(0, 0, 0)' ).join( ', ' );\n\n\t}\n\n\tconst array = [];\n\n\tfor ( let i = 0; i < attribute.count; i ++ ) {\n\n\t\tconst x = attribute.getX( i );\n\t\tconst y = attribute.getY( i );\n\t\tconst z = attribute.getZ( i );\n\n\t\tarray.push( `(${ x.toPrecision( PRECISION ) }, ${ y.toPrecision( PRECISION ) }, ${ z.toPrecision( PRECISION ) })` );\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\nfunction buildVector2Array( attribute, count ) {\n\n\tif ( attribute === undefined ) {\n\n\t\tconsole.warn( 'USDZExporter: UVs missing.' );\n\t\treturn Array( count ).fill( '(0, 0)' ).join( ', ' );\n\n\t}\n\n\tconst array = [];\n\n\tfor ( let i = 0; i < attribute.count; i ++ ) {\n\n\t\tconst x = attribute.getX( i );\n\t\tconst y = attribute.getY( i );\n\n\t\tarray.push( `(${ x.toPrecision( PRECISION ) }, ${ 1 - y.toPrecision( PRECISION ) })` );\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\nfunction buildPrimvars( attributes, count ) {\n\n\tlet string = '';\n\n\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\tconst id = ( i > 0 ? i : '' );\n\t\tconst attribute = attributes[ 'uv' + id ];\n\n\t\tif ( attribute !== undefined ) {\n\n\t\t\tstring += `\n\t\ttexCoord2f[] primvars:st${ id } = [${ buildVector2Array( attribute, count )}] (\n\t\t\tinterpolation = \"vertex\"\n\t\t)`;\n\n\t\t}\n\n\t}\n\n\treturn string;\n\n}\n\n// Materials\n\nfunction buildMaterials( materials, textures, quickLookCompatible = false ) {\n\n\tconst array = [];\n\n\tfor ( const uuid in materials ) {\n\n\t\tconst material = materials[ uuid ];\n\n\t\tarray.push( buildMaterial( material, textures, quickLookCompatible ) );\n\n\t}\n\n\treturn `def \"Materials\"\n{\n${ array.join( '' ) }\n}\n\n`;\n\n}\n\nfunction buildMaterial( material, textures, quickLookCompatible = false ) {\n\n\t// https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n\n\tconst pad = '\t\t\t';\n\tconst inputs = [];\n\tconst samplers = [];\n\n\tfunction buildTexture( texture, mapType, color ) {\n\n\t\tconst id = texture.source.id + '_' + texture.flipY;\n\n\t\ttextures[ id ] = texture;\n\n\t\tconst uv = texture.channel > 0 ? 'st' + texture.channel : 'st';\n\n\t\tconst WRAPPINGS = {\n\t\t\t1000: 'repeat', // RepeatWrapping\n\t\t\t1001: 'clamp', // ClampToEdgeWrapping\n\t\t\t1002: 'mirror' // MirroredRepeatWrapping\n\t\t};\n\n\t\tconst repeat = texture.repeat.clone();\n\t\tconst offset = texture.offset.clone();\n\t\tconst rotation = texture.rotation;\n\n\t\t// rotation is around the wrong point. after rotation we need to shift offset again so that we're rotating around the right spot\n\t\tconst xRotationOffset = Math.sin( rotation );\n\t\tconst yRotationOffset = Math.cos( rotation );\n\n\t\t// texture coordinates start in the opposite corner, need to correct\n\t\toffset.y = 1 - offset.y - repeat.y;\n\n\t\t// turns out QuickLook is buggy and interprets texture repeat inverted/applies operations in a different order.\n\t\t// Apple Feedback: \tFB10036297 and FB11442287\n\t\tif ( quickLookCompatible ) {\n\n\t\t\t// This is NOT correct yet in QuickLook, but comes close for a range of models.\n\t\t\t// It becomes more incorrect the bigger the offset is\n\n\t\t\toffset.x = offset.x / repeat.x;\n\t\t\toffset.y = offset.y / repeat.y;\n\n\t\t\toffset.x += xRotationOffset / repeat.x;\n\t\t\toffset.y += yRotationOffset - 1;\n\n\t\t} else {\n\n\t\t\t// results match glTF results exactly. verified correct in usdview.\n\t\t\toffset.x += xRotationOffset * repeat.x;\n\t\t\toffset.y += ( 1 - yRotationOffset ) * repeat.y;\n\n\t\t}\n\n\t\treturn `\n\t\tdef Shader \"PrimvarReader_${ mapType }\"\n\t\t{\n\t\t\tuniform token info:id = \"UsdPrimvarReader_float2\"\n\t\t\tfloat2 inputs:fallback = (0.0, 0.0)\n\t\t\ttoken inputs:varname = \"${ uv }\"\n\t\t\tfloat2 outputs:result\n\t\t}\n\n\t\tdef Shader \"Transform2d_${ mapType }\"\n\t\t{\n\t\t\tuniform token info:id = \"UsdTransform2d\"\n\t\t\ttoken inputs:in.connect = </Materials/Material_${ material.id }/PrimvarReader_${ mapType }.outputs:result>\n\t\t\tfloat inputs:rotation = ${ ( rotation * ( 180 / Math.PI ) ).toFixed( PRECISION ) }\n\t\t\tfloat2 inputs:scale = ${ buildVector2( repeat ) }\n\t\t\tfloat2 inputs:translation = ${ buildVector2( offset ) }\n\t\t\tfloat2 outputs:result\n\t\t}\n\n\t\tdef Shader \"Texture_${ texture.id }_${ mapType }\"\n\t\t{\n\t\t\tuniform token info:id = \"UsdUVTexture\"\n\t\t\tasset inputs:file = @textures/Texture_${ id }.png@\n\t\t\tfloat2 inputs:st.connect = </Materials/Material_${ material.id }/Transform2d_${ mapType }.outputs:result>\n\t\t\t${ color !== undefined ? 'float4 inputs:scale = ' + buildColor4( color ) : '' }\n\t\t\ttoken inputs:sourceColorSpace = \"${ texture.colorSpace === THREE.NoColorSpace ? 'raw' : 'sRGB' }\"\n\t\t\ttoken inputs:wrapS = \"${ WRAPPINGS[ texture.wrapS ] }\"\n\t\t\ttoken inputs:wrapT = \"${ WRAPPINGS[ texture.wrapT ] }\"\n\t\t\tfloat outputs:r\n\t\t\tfloat outputs:g\n\t\t\tfloat outputs:b\n\t\t\tfloat3 outputs:rgb\n\t\t\t${ material.transparent || material.alphaTest > 0.0 ? 'float outputs:a' : '' }\n\t\t}`;\n\n\t}\n\n\n\tif ( material.side === THREE.DoubleSide ) {\n\n\t\tconsole.warn( 'THREE.USDZExporter: USDZ does not support double sided materials', material );\n\n\t}\n\n\tif ( material.map !== null ) {\n\n\t\tinputs.push( `${ pad }color3f inputs:diffuseColor.connect = </Materials/Material_${ material.id }/Texture_${ material.map.id }_diffuse.outputs:rgb>` );\n\n\t\tif ( material.transparent ) {\n\n\t\t\tinputs.push( `${ pad }float inputs:opacity.connect = </Materials/Material_${ material.id }/Texture_${ material.map.id }_diffuse.outputs:a>` );\n\n\t\t} else if ( material.alphaTest > 0.0 ) {\n\n\t\t\tinputs.push( `${ pad }float inputs:opacity.connect = </Materials/Material_${ material.id }/Texture_${ material.map.id }_diffuse.outputs:a>` );\n\t\t\tinputs.push( `${ pad }float inputs:opacityThreshold = ${material.alphaTest}` );\n\n\t\t}\n\n\t\tsamplers.push( buildTexture( material.map, 'diffuse', material.color ) );\n\n\t} else {\n\n\t\tinputs.push( `${ pad }color3f inputs:diffuseColor = ${ buildColor( material.color ) }` );\n\n\t}\n\n\tif ( material.emissiveMap !== null ) {\n\n\t\tinputs.push( `${ pad }color3f inputs:emissiveColor.connect = </Materials/Material_${ material.id }/Texture_${ material.emissiveMap.id }_emissive.outputs:rgb>` );\n\n\t\tsamplers.push( buildTexture( material.emissiveMap, 'emissive' ) );\n\n\t} else if ( material.emissive.getHex() > 0 ) {\n\n\t\tinputs.push( `${ pad }color3f inputs:emissiveColor = ${ buildColor( material.emissive ) }` );\n\n\t}\n\n\tif ( material.normalMap !== null ) {\n\n\t\tinputs.push( `${ pad }normal3f inputs:normal.connect = </Materials/Material_${ material.id }/Texture_${ material.normalMap.id }_normal.outputs:rgb>` );\n\n\t\tsamplers.push( buildTexture( material.normalMap, 'normal' ) );\n\n\t}\n\n\tif ( material.aoMap !== null ) {\n\n\t\tinputs.push( `${ pad }float inputs:occlusion.connect = </Materials/Material_${ material.id }/Texture_${ material.aoMap.id }_occlusion.outputs:r>` );\n\n\t\tsamplers.push( buildTexture( material.aoMap, 'occlusion' ) );\n\n\t}\n\n\tif ( material.roughnessMap !== null && material.roughness === 1 ) {\n\n\t\tinputs.push( `${ pad }float inputs:roughness.connect = </Materials/Material_${ material.id }/Texture_${ material.roughnessMap.id }_roughness.outputs:g>` );\n\n\t\tsamplers.push( buildTexture( material.roughnessMap, 'roughness' ) );\n\n\t} else {\n\n\t\tinputs.push( `${ pad }float inputs:roughness = ${ material.roughness }` );\n\n\t}\n\n\tif ( material.metalnessMap !== null && material.metalness === 1 ) {\n\n\t\tinputs.push( `${ pad }float inputs:metallic.connect = </Materials/Material_${ material.id }/Texture_${ material.metalnessMap.id }_metallic.outputs:b>` );\n\n\t\tsamplers.push( buildTexture( material.metalnessMap, 'metallic' ) );\n\n\t} else {\n\n\t\tinputs.push( `${ pad }float inputs:metallic = ${ material.metalness }` );\n\n\t}\n\n\tif ( material.alphaMap !== null ) {\n\n\t\tinputs.push( `${pad}float inputs:opacity.connect = </Materials/Material_${material.id}/Texture_${material.alphaMap.id}_opacity.outputs:r>` );\n\t\tinputs.push( `${pad}float inputs:opacityThreshold = 0.0001` );\n\n\t\tsamplers.push( buildTexture( material.alphaMap, 'opacity' ) );\n\n\t} else {\n\n\t\tinputs.push( `${pad}float inputs:opacity = ${material.opacity}` );\n\n\t}\n\n\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\tinputs.push( `${ pad }float inputs:clearcoat = ${ material.clearcoat }` );\n\t\tinputs.push( `${ pad }float inputs:clearcoatRoughness = ${ material.clearcoatRoughness }` );\n\t\tinputs.push( `${ pad }float inputs:ior = ${ material.ior }` );\n\n\t}\n\n\treturn `\n\tdef Material \"Material_${ material.id }\"\n\t{\n\t\tdef Shader \"PreviewSurface\"\n\t\t{\n\t\t\tuniform token info:id = \"UsdPreviewSurface\"\n${ inputs.join( '\\n' ) }\n\t\t\tint inputs:useSpecularWorkflow = 0\n\t\t\ttoken outputs:surface\n\t\t}\n\n\t\ttoken outputs:surface.connect = </Materials/Material_${ material.id }/PreviewSurface.outputs:surface>\n\n${ samplers.join( '\\n' ) }\n\n\t}\n`;\n\n}\n\nfunction buildColor( color ) {\n\n\treturn `(${ color.r }, ${ color.g }, ${ color.b })`;\n\n}\n\nfunction buildColor4( color ) {\n\n\treturn `(${ color.r }, ${ color.g }, ${ color.b }, 1.0)`;\n\n}\n\nfunction buildVector2( vector ) {\n\n\treturn `(${ vector.x }, ${ vector.y })`;\n\n}\n\n\nfunction buildCamera( camera ) {\n\n\tconst name = camera.name ? camera.name : 'Camera_' + camera.id;\n\n\tconst transform = buildMatrix( camera.matrixWorld );\n\n\tif ( camera.matrixWorld.determinant() < 0 ) {\n\n\t\tconsole.warn( 'THREE.USDZExporter: USDZ does not support negative scales', camera );\n\n\t}\n\n\tif ( camera.isOrthographicCamera ) {\n\n\t\treturn `def Camera \"${name}\"\n\t\t{\n\t\t\tmatrix4d xformOp:transform = ${ transform }\n\t\t\tuniform token[] xformOpOrder = [\"xformOp:transform\"]\n\n\t\t\tfloat2 clippingRange = (${ camera.near.toPrecision( PRECISION ) }, ${ camera.far.toPrecision( PRECISION ) })\n\t\t\tfloat horizontalAperture = ${ ( ( Math.abs( camera.left ) + Math.abs( camera.right ) ) * 10 ).toPrecision( PRECISION ) }\n\t\t\tfloat verticalAperture = ${ ( ( Math.abs( camera.top ) + Math.abs( camera.bottom ) ) * 10 ).toPrecision( PRECISION ) }\n\t\t\ttoken projection = \"orthographic\"\n\t\t}\n\t\n\t`;\n\n\t} else {\n\n\t\treturn `def Camera \"${name}\"\n\t\t{\n\t\t\tmatrix4d xformOp:transform = ${ transform }\n\t\t\tuniform token[] xformOpOrder = [\"xformOp:transform\"]\n\n\t\t\tfloat2 clippingRange = (${ camera.near.toPrecision( PRECISION ) }, ${ camera.far.toPrecision( PRECISION ) })\n\t\t\tfloat focalLength = ${ camera.getFocalLength().toPrecision( PRECISION ) }\n\t\t\tfloat focusDistance = ${ camera.focus.toPrecision( PRECISION ) }\n\t\t\tfloat horizontalAperture = ${ camera.getFilmWidth().toPrecision( PRECISION ) }\n\t\t\ttoken projection = \"perspective\"\n\t\t\tfloat verticalAperture = ${ camera.getFilmHeight().toPrecision( PRECISION ) }\n\t\t}\n\t\n\t`;\n\n\t}\n\n}\n\nexport { USDZExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}