{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b, _c;\nimport { LinearSRGBColorSpace, SRGBColorSpace, Vector2 } from 'three';\nimport { $threeTexture } from './image.js';\nimport { Texture } from './texture.js';\nconst $texture = Symbol('texture');\nconst $transform = Symbol('transform');\nexport const $materials = Symbol('materials');\nexport const $usage = Symbol('usage');\nconst $onUpdate = Symbol('onUpdate');\nconst $activeVideo = Symbol('activeVideo');\n// Defines what a texture will be used for.\nexport var TextureUsage;\n(function (TextureUsage) {\n  TextureUsage[TextureUsage[\"Base\"] = 0] = \"Base\";\n  TextureUsage[TextureUsage[\"MetallicRoughness\"] = 1] = \"MetallicRoughness\";\n  TextureUsage[TextureUsage[\"Normal\"] = 2] = \"Normal\";\n  TextureUsage[TextureUsage[\"Occlusion\"] = 3] = \"Occlusion\";\n  TextureUsage[TextureUsage[\"Emissive\"] = 4] = \"Emissive\";\n  TextureUsage[TextureUsage[\"Clearcoat\"] = 5] = \"Clearcoat\";\n  TextureUsage[TextureUsage[\"ClearcoatRoughness\"] = 6] = \"ClearcoatRoughness\";\n  TextureUsage[TextureUsage[\"ClearcoatNormal\"] = 7] = \"ClearcoatNormal\";\n  TextureUsage[TextureUsage[\"SheenColor\"] = 8] = \"SheenColor\";\n  TextureUsage[TextureUsage[\"SheenRoughness\"] = 9] = \"SheenRoughness\";\n  TextureUsage[TextureUsage[\"Transmission\"] = 10] = \"Transmission\";\n  TextureUsage[TextureUsage[\"Thickness\"] = 11] = \"Thickness\";\n  TextureUsage[TextureUsage[\"Specular\"] = 12] = \"Specular\";\n  TextureUsage[TextureUsage[\"SpecularColor\"] = 13] = \"SpecularColor\";\n  TextureUsage[TextureUsage[\"Iridescence\"] = 14] = \"Iridescence\";\n  TextureUsage[TextureUsage[\"IridescenceThickness\"] = 15] = \"IridescenceThickness\";\n  TextureUsage[TextureUsage[\"Anisotropy\"] = 16] = \"Anisotropy\";\n})(TextureUsage || (TextureUsage = {}));\n/**\n * TextureInfo facade implementation for Three.js materials\n */\nexport class TextureInfo {\n  constructor(onUpdate, usage, threeTexture, material) {\n    this[_a] = null;\n    this[_b] = {\n      rotation: 0,\n      scale: new Vector2(1, 1),\n      offset: new Vector2(0, 0)\n    };\n    this[_c] = false;\n    // Creates image, sampler, and texture if valid texture info is provided.\n    if (threeTexture) {\n      this[$transform].rotation = threeTexture.rotation;\n      this[$transform].scale.copy(threeTexture.repeat);\n      this[$transform].offset.copy(threeTexture.offset);\n      this[$texture] = new Texture(onUpdate, threeTexture);\n    }\n    this[$onUpdate] = onUpdate;\n    this[$materials] = material;\n    this[$usage] = usage;\n  }\n  get texture() {\n    return this[$texture];\n  }\n  setTexture(texture) {\n    var _d, _e;\n    const threeTexture = texture != null ? texture.source[$threeTexture] : null;\n    const oldTexture = (_d = this[$texture]) === null || _d === void 0 ? void 0 : _d.source[$threeTexture];\n    if (oldTexture != null && oldTexture.isVideoTexture) {\n      this[$activeVideo] = false;\n    } else if ((_e = this[$texture]) === null || _e === void 0 ? void 0 : _e.source.animation) {\n      this[$texture].source.animation.removeEventListener('enterFrame', this[$onUpdate]);\n    }\n    this[$texture] = texture;\n    if (threeTexture != null && threeTexture.isVideoTexture) {\n      const element = threeTexture.image;\n      this[$activeVideo] = true;\n      if (element.requestVideoFrameCallback != null) {\n        const update = () => {\n          if (!this[$activeVideo]) {\n            return;\n          }\n          this[$onUpdate]();\n          element.requestVideoFrameCallback(update);\n        };\n        element.requestVideoFrameCallback(update);\n      } else {\n        const update = () => {\n          if (!this[$activeVideo]) {\n            return;\n          }\n          this[$onUpdate]();\n          requestAnimationFrame(update);\n        };\n        requestAnimationFrame(update);\n      }\n    } else if ((texture === null || texture === void 0 ? void 0 : texture.source.animation) != null) {\n      texture.source.animation.addEventListener('enterFrame', this[$onUpdate]);\n    }\n    let colorSpace = SRGBColorSpace;\n    if (this[$materials]) {\n      for (const material of this[$materials]) {\n        switch (this[$usage]) {\n          case TextureUsage.Base:\n            material.map = threeTexture;\n            break;\n          case TextureUsage.MetallicRoughness:\n            colorSpace = LinearSRGBColorSpace;\n            material.metalnessMap = threeTexture;\n            material.roughnessMap = threeTexture;\n            break;\n          case TextureUsage.Normal:\n            colorSpace = LinearSRGBColorSpace;\n            material.normalMap = threeTexture;\n            break;\n          case TextureUsage.Occlusion:\n            colorSpace = LinearSRGBColorSpace;\n            material.aoMap = threeTexture;\n            break;\n          case TextureUsage.Emissive:\n            material.emissiveMap = threeTexture;\n            break;\n          case TextureUsage.Clearcoat:\n            material.clearcoatMap = threeTexture;\n            break;\n          case TextureUsage.ClearcoatRoughness:\n            material.clearcoatRoughnessMap = threeTexture;\n            break;\n          case TextureUsage.ClearcoatNormal:\n            material.clearcoatNormalMap = threeTexture;\n            break;\n          case TextureUsage.SheenColor:\n            material.sheenColorMap = threeTexture;\n            break;\n          case TextureUsage.SheenRoughness:\n            material.sheenRoughnessMap = threeTexture;\n            break;\n          case TextureUsage.Transmission:\n            material.transmissionMap = threeTexture;\n            break;\n          case TextureUsage.Thickness:\n            material.thicknessMap = threeTexture;\n            break;\n          case TextureUsage.Specular:\n            material.specularIntensityMap = threeTexture;\n            break;\n          case TextureUsage.SpecularColor:\n            material.specularColorMap = threeTexture;\n            break;\n          case TextureUsage.Iridescence:\n            material.iridescenceMap = threeTexture;\n            break;\n          case TextureUsage.IridescenceThickness:\n            material.iridescenceThicknessMap = threeTexture;\n            break;\n          case TextureUsage.Anisotropy:\n            material.anisotropyMap = threeTexture;\n            break;\n          default:\n        }\n        material.needsUpdate = true;\n      }\n    }\n    if (threeTexture) {\n      // Updates the colorSpace for the texture, affects all references.\n      threeTexture.colorSpace = colorSpace;\n      threeTexture.rotation = this[$transform].rotation;\n      threeTexture.repeat = this[$transform].scale;\n      threeTexture.offset = this[$transform].offset;\n    }\n    this[$onUpdate]();\n  }\n}\n_a = $texture, _b = $transform, _c = $activeVideo;","map":{"version":3,"names":["LinearSRGBColorSpace","SRGBColorSpace","Vector2","$threeTexture","Texture","$texture","Symbol","$transform","$materials","$usage","$onUpdate","$activeVideo","TextureUsage","TextureInfo","constructor","onUpdate","usage","threeTexture","material","_a","_b","rotation","scale","offset","_c","copy","repeat","texture","setTexture","source","oldTexture","_d","isVideoTexture","_e","animation","removeEventListener","element","image","requestVideoFrameCallback","update","requestAnimationFrame","addEventListener","colorSpace","Base","map","MetallicRoughness","metalnessMap","roughnessMap","Normal","normalMap","Occlusion","aoMap","Emissive","emissiveMap","Clearcoat","clearcoatMap","ClearcoatRoughness","clearcoatRoughnessMap","ClearcoatNormal","clearcoatNormalMap","SheenColor","sheenColorMap","SheenRoughness","sheenRoughnessMap","Transmission","transmissionMap","Thickness","thicknessMap","Specular","specularIntensityMap","SpecularColor","specularColorMap","Iridescence","iridescenceMap","IridescenceThickness","iridescenceThicknessMap","Anisotropy","anisotropyMap","needsUpdate"],"sources":["../../../src/features/scene-graph/texture-info.ts"],"sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ColorSpace, LinearSRGBColorSpace, MeshPhysicalMaterial, SRGBColorSpace, Texture as ThreeTexture, Vector2, VideoTexture} from 'three';\n\nimport {TextureInfo as TextureInfoInterface} from './api.js';\nimport {$threeTexture} from './image.js';\nimport {Texture} from './texture.js';\n\nconst $texture = Symbol('texture');\nconst $transform = Symbol('transform');\nexport const $materials = Symbol('materials');\nexport const $usage = Symbol('usage');\nconst $onUpdate = Symbol('onUpdate');\nconst $activeVideo = Symbol('activeVideo');\n\n// Defines what a texture will be used for.\nexport enum TextureUsage {\n  Base,\n  MetallicRoughness,\n  Normal,\n  Occlusion,\n  Emissive,\n  Clearcoat,\n  ClearcoatRoughness,\n  ClearcoatNormal,\n  SheenColor,\n  SheenRoughness,\n  Transmission,\n  Thickness,\n  Specular,\n  SpecularColor,\n  Iridescence,\n  IridescenceThickness,\n  Anisotropy,\n}\n\ninterface TextureTransform {\n  rotation: number;\n  scale: Vector2;\n  offset: Vector2;\n}\n\n/**\n * TextureInfo facade implementation for Three.js materials\n */\nexport class TextureInfo implements TextureInfoInterface {\n  private[$texture]: Texture|null = null;\n  private[$transform]: TextureTransform = {\n    rotation: 0,\n    scale: new Vector2(1, 1),\n    offset: new Vector2(0, 0)\n  };\n\n  // Holds a reference to the Three data that backs the material object.\n  private[$materials]: Set<MeshPhysicalMaterial>|null;\n\n  // Texture usage defines the how the texture is used (ie Normal, Emissive...\n  // etc)\n  private[$usage]: TextureUsage;\n  private[$onUpdate]: () => void;\n  private[$activeVideo] = false;\n\n  constructor(\n      onUpdate: () => void, usage: TextureUsage,\n      threeTexture: ThreeTexture|null, material: Set<MeshPhysicalMaterial>) {\n    // Creates image, sampler, and texture if valid texture info is provided.\n    if (threeTexture) {\n      this[$transform].rotation = threeTexture.rotation;\n      this[$transform].scale.copy(threeTexture.repeat);\n      this[$transform].offset.copy(threeTexture.offset);\n\n      this[$texture] = new Texture(onUpdate, threeTexture);\n    }\n\n    this[$onUpdate] = onUpdate;\n    this[$materials] = material;\n    this[$usage] = usage;\n  }\n\n  get texture(): Texture|null {\n    return this[$texture];\n  }\n\n  setTexture(texture: Texture|null): void {\n    const threeTexture: ThreeTexture|null =\n        texture != null ? texture.source[$threeTexture] : null;\n\n    const oldTexture = this[$texture]?.source[$threeTexture] as VideoTexture;\n    if (oldTexture != null && oldTexture.isVideoTexture) {\n      this[$activeVideo] = false;\n    } else if (this[$texture]?.source.animation) {\n      this[$texture].source.animation.removeEventListener(\n          'enterFrame', this[$onUpdate]);\n    }\n\n    this[$texture] = texture;\n\n    if (threeTexture != null && (threeTexture as VideoTexture).isVideoTexture) {\n      const element = threeTexture.image;\n      this[$activeVideo] = true;\n      if (element.requestVideoFrameCallback != null) {\n        const update = () => {\n          if (!this[$activeVideo]) {\n            return;\n          }\n          this[$onUpdate]();\n          element.requestVideoFrameCallback(update);\n        };\n        element.requestVideoFrameCallback(update);\n      } else {\n        const update = () => {\n          if (!this[$activeVideo]) {\n            return;\n          }\n          this[$onUpdate]();\n          requestAnimationFrame(update);\n        };\n        requestAnimationFrame(update);\n      }\n    } else if (texture?.source.animation != null) {\n      texture.source.animation.addEventListener('enterFrame', this[$onUpdate]);\n    }\n\n    let colorSpace: ColorSpace = SRGBColorSpace;\n    if (this[$materials]) {\n      for (const material of this[$materials]!) {\n        switch (this[$usage]) {\n          case TextureUsage.Base:\n            material.map = threeTexture;\n            break;\n          case TextureUsage.MetallicRoughness:\n            colorSpace = LinearSRGBColorSpace;\n            material.metalnessMap = threeTexture;\n            material.roughnessMap = threeTexture;\n            break;\n          case TextureUsage.Normal:\n            colorSpace = LinearSRGBColorSpace;\n            material.normalMap = threeTexture;\n            break;\n          case TextureUsage.Occlusion:\n            colorSpace = LinearSRGBColorSpace;\n            material.aoMap = threeTexture;\n            break;\n          case TextureUsage.Emissive:\n            material.emissiveMap = threeTexture;\n            break;\n          case TextureUsage.Clearcoat:\n            material.clearcoatMap = threeTexture;\n            break;\n          case TextureUsage.ClearcoatRoughness:\n            material.clearcoatRoughnessMap = threeTexture;\n            break;\n          case TextureUsage.ClearcoatNormal:\n            material.clearcoatNormalMap = threeTexture;\n            break;\n          case TextureUsage.SheenColor:\n            material.sheenColorMap = threeTexture;\n            break;\n          case TextureUsage.SheenRoughness:\n            material.sheenRoughnessMap = threeTexture;\n            break;\n          case TextureUsage.Transmission:\n            material.transmissionMap = threeTexture;\n            break;\n          case TextureUsage.Thickness:\n            material.thicknessMap = threeTexture;\n            break;\n          case TextureUsage.Specular:\n            material.specularIntensityMap = threeTexture;\n            break;\n          case TextureUsage.SpecularColor:\n            material.specularColorMap = threeTexture;\n            break;\n          case TextureUsage.Iridescence:\n            material.iridescenceMap = threeTexture;\n            break;\n          case TextureUsage.IridescenceThickness:\n            material.iridescenceThicknessMap = threeTexture;\n            break;\n          case TextureUsage.Anisotropy:\n            (material as any).anisotropyMap = threeTexture;\n            break;\n          default:\n        }\n        material.needsUpdate = true;\n      }\n    }\n\n    if (threeTexture) {\n      // Updates the colorSpace for the texture, affects all references.\n      threeTexture.colorSpace = colorSpace;\n      threeTexture.rotation = this[$transform].rotation;\n      threeTexture.repeat = this[$transform].scale;\n      threeTexture.offset = this[$transform].offset;\n    }\n    this[$onUpdate]();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}