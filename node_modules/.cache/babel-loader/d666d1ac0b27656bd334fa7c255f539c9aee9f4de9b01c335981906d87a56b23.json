{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nimport { CompressedTexture, CompressedArrayTexture, CompressedCubeTexture, Data3DTexture, DataTexture, DisplayP3ColorSpace, FileLoader, FloatType, HalfFloatType, NoColorSpace, LinearFilter, LinearMipmapLinearFilter, LinearDisplayP3ColorSpace, LinearSRGBColorSpace, Loader, RedFormat, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_6x6_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGBAFormat, RGFormat, SRGBColorSpace, UnsignedByteType } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { read, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, KHR_DF_TRANSFER_SRGB, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_UNDEFINED, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, VK_FORMAT_ASTC_6x6_UNORM_BLOCK, KHR_DF_PRIMARIES_UNSPECIFIED, KHR_DF_PRIMARIES_BT709, KHR_DF_PRIMARIES_DISPLAYP3 } from '../libs/ktx-parse.module.js';\nimport { ZSTDDecoder } from '../libs/zstddec.module.js';\nconst _taskCache = new WeakMap();\nlet _activeLoaders = 0;\nlet _zstd;\nclass KTX2Loader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n  detectSupport(renderer) {\n    if (renderer.isWebGPURenderer === true) {\n      this.workerConfig = {\n        astcSupported: renderer.hasFeature('texture-compression-astc'),\n        etc1Supported: false,\n        etc2Supported: renderer.hasFeature('texture-compression-etc2'),\n        dxtSupported: renderer.hasFeature('texture-compression-bc'),\n        bptcSupported: false,\n        pvrtcSupported: false\n      };\n    } else {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n        etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n        etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n        dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n        bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n        pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n      };\n      if (renderer.capabilities.isWebGL2) {\n        // https://github.com/mrdoob/three.js/pull/22928\n        this.workerConfig.etc1Supported = false;\n      }\n    }\n    return this;\n  }\n  init() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync('basis_transcoder.js');\n\n      // Load transcoder WASM binary.\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = KTX2Loader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: 'init',\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n      if (_activeLoaders > 0) {\n        // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n\n        console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n      }\n      _activeLoaders++;\n    }\n    return this.transcoderPending;\n  }\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n    }\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n      this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n    }, onProgress, onError);\n  }\n  _createTextureFrom(transcodeResult, container) {\n    const {\n      faces,\n      width,\n      height,\n      format,\n      type,\n      error,\n      dfdFlags\n    } = transcodeResult;\n    if (type === 'error') return Promise.reject(error);\n    let texture;\n    if (container.faceCount === 6) {\n      texture = new CompressedCubeTexture(faces, format, UnsignedByteType);\n    } else {\n      const mipmaps = faces[0].mipmaps;\n      texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    }\n    texture.minFilter = faces[0].mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    texture.colorSpace = parseColorSpace(container);\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n   */\n  async _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createRawTexture(container);\n    }\n\n    //\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({\n        type: 'transcode',\n        buffer,\n        taskConfig: taskConfig\n      }, [buffer]);\n    }).then(e => this._createTextureFrom(e.data, container));\n\n    // Cache the task result.\n    _taskCache.set(buffer, {\n      promise: texturePending\n    });\n    return texturePending;\n  }\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n}\n\n/* CONSTANTS */\n\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    const message = e.data;\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              faces,\n              buffers,\n              width,\n              height,\n              hasAlpha,\n              format,\n              dfdFlags\n            } = transcode(message.buffer);\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              faces,\n              width,\n              height,\n              hasAlpha,\n              format,\n              dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const layerCount = ktx2File.getLayers() || 1;\n    const levelCount = ktx2File.getLevels();\n    const faceCount = ktx2File.getFaces();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levelCount) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n    const faces = [];\n    const buffers = [];\n    for (let face = 0; face < faceCount; face++) {\n      const mipmaps = [];\n      for (let mip = 0; mip < levelCount; mip++) {\n        const layerMips = [];\n        let mipWidth, mipHeight;\n        for (let layer = 0; layer < layerCount; layer++) {\n          const levelInfo = ktx2File.getImageLevelInfo(mip, layer, face);\n          if (face === 0 && mip === 0 && layer === 0 && (levelInfo.origWidth % 4 !== 0 || levelInfo.origHeight % 4 !== 0)) {\n            console.warn('THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions.');\n          }\n          if (levelCount > 1) {\n            mipWidth = levelInfo.origWidth;\n            mipHeight = levelInfo.origHeight;\n          } else {\n            // Handles non-multiple-of-four dimensions in textures without mipmaps. Textures with\n            // mipmaps must use multiple-of-four dimensions, for some texture formats and APIs.\n            // See mrdoob/three.js#25908.\n            mipWidth = levelInfo.width;\n            mipHeight = levelInfo.height;\n          }\n          const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n          const status = ktx2File.transcodeImage(dst, mip, layer, face, transcoderFormat, 0, -1, -1);\n          if (!status) {\n            cleanup();\n            throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n          }\n          layerMips.push(dst);\n        }\n        const mipData = concat(layerMips);\n        mipmaps.push({\n          data: mipData,\n          width: mipWidth,\n          height: mipHeight\n        });\n        buffers.push(mipData.buffer);\n      }\n      faces.push({\n        mipmaps,\n        width,\n        height,\n        format: engineFormat\n      });\n    }\n    cleanup();\n    return {\n      faces,\n      buffers,\n      width,\n      height,\n      hasAlpha,\n      format: engineFormat,\n      dfdFlags\n    };\n  }\n\n  //\n\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n    console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n\n  /** Concatenates N byte arrays. */\n  function concat(arrays) {\n    if (arrays.length === 1) return arrays[0];\n    let totalByteLength = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      totalByteLength += array.byteLength;\n    }\n    const result = new Uint8Array(totalByteLength);\n    let byteOffset = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      result.set(array, byteOffset);\n      byteOffset += array.byteLength;\n    }\n    return result;\n  }\n};\n\n//\n// Parsing for non-Basis textures. These textures are may have supercompression\n// like Zstd, but they do not require transcoding.\n\nconst UNCOMPRESSED_FORMATS = new Set([RGBAFormat, RGFormat, RedFormat]);\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat,\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: RGBA_ASTC_6x6_Format,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: RGBA_ASTC_6x6_Format\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: UnsignedByteType,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: UnsignedByteType\n};\nasync function createRawTexture(container) {\n  const {\n    vkFormat\n  } = container;\n  if (FORMAT_MAP[vkFormat] === undefined) {\n    throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n  }\n\n  //\n\n  let zstd;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n    zstd = await _zstd;\n  }\n\n  //\n\n  const mipmaps = [];\n  for (let levelIndex = 0; levelIndex < container.levels.length; levelIndex++) {\n    const levelWidth = Math.max(1, container.pixelWidth >> levelIndex);\n    const levelHeight = Math.max(1, container.pixelHeight >> levelIndex);\n    const levelDepth = container.pixelDepth ? Math.max(1, container.pixelDepth >> levelIndex) : 0;\n    const level = container.levels[levelIndex];\n    let levelData;\n    if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n      levelData = level.levelData;\n    } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n      levelData = zstd.decode(level.levelData, level.uncompressedByteLength);\n    } else {\n      throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n    }\n    let data;\n    if (TYPE_MAP[vkFormat] === FloatType) {\n      data = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n    } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n      data = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n    } else {\n      data = levelData;\n    }\n    mipmaps.push({\n      data: data,\n      width: levelWidth,\n      height: levelHeight,\n      depth: levelDepth\n    });\n  }\n  let texture;\n  if (UNCOMPRESSED_FORMATS.has(FORMAT_MAP[vkFormat])) {\n    texture = container.pixelDepth === 0 ? new DataTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight) : new Data3DTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight, container.pixelDepth);\n  } else {\n    if (container.pixelDepth > 0) throw new Error('THREE.KTX2Loader: Unsupported pixelDepth.');\n    texture = new CompressedTexture(mipmaps, container.pixelWidth, container.pixelHeight);\n  }\n  texture.mipmaps = mipmaps;\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.colorSpace = parseColorSpace(container);\n  texture.needsUpdate = true;\n\n  //\n\n  return Promise.resolve(texture);\n}\nfunction parseColorSpace(container) {\n  const dfd = container.dataFormatDescriptor[0];\n  if (dfd.colorPrimaries === KHR_DF_PRIMARIES_BT709) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? SRGBColorSpace : LinearSRGBColorSpace;\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_DISPLAYP3) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? DisplayP3ColorSpace : LinearDisplayP3ColorSpace;\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_UNSPECIFIED) {\n    return NoColorSpace;\n  } else {\n    console.warn(`THREE.KTX2Loader: Unsupported color primaries, \"${dfd.colorPrimaries}\"`);\n    return NoColorSpace;\n  }\n}\nexport { KTX2Loader };","map":{"version":3,"names":["CompressedTexture","CompressedArrayTexture","CompressedCubeTexture","Data3DTexture","DataTexture","DisplayP3ColorSpace","FileLoader","FloatType","HalfFloatType","NoColorSpace","LinearFilter","LinearMipmapLinearFilter","LinearDisplayP3ColorSpace","LinearSRGBColorSpace","Loader","RedFormat","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_6x6_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGBAFormat","RGFormat","SRGBColorSpace","UnsignedByteType","WorkerPool","read","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","KHR_DF_TRANSFER_SRGB","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","VK_FORMAT_UNDEFINED","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_ASTC_6x6_SRGB_BLOCK","VK_FORMAT_ASTC_6x6_UNORM_BLOCK","KHR_DF_PRIMARIES_UNSPECIFIED","KHR_DF_PRIMARIES_BT709","KHR_DF_PRIMARIES_DISPLAYP3","ZSTDDecoder","_taskCache","WeakMap","_activeLoaders","_zstd","KTX2Loader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","setTranscoderPath","path","setWorkerLimit","num","detectSupport","renderer","isWebGPURenderer","astcSupported","hasFeature","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","extensions","has","capabilities","isWebGL2","init","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","Error","loader","buffer","cachedTask","get","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","container","faces","width","height","format","error","dfdFlags","reject","faceCount","mipmaps","layerCount","minFilter","length","magFilter","generateMipmaps","needsUpdate","colorSpace","parseColorSpace","premultiplyAlpha","Uint8Array","vkFormat","createRawTexture","taskConfig","texturePending","e","data","set","dispose","revokeObjectURL","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","buffers","hasAlpha","transcode","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","undefined","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","getLayers","levelCount","getLevels","getFaces","getHasAlpha","getDFDFlags","transcoderFormat","engineFormat","getTranscoderFormat","startTranscoding","face","mip","layerMips","mipWidth","mipHeight","layer","levelInfo","getImageLevelInfo","origWidth","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","push","mipData","concat","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","i","opt","includes","isPowerOfTwo","value","arrays","totalByteLength","array","byteLength","result","byteOffset","UNCOMPRESSED_FORMATS","Set","FORMAT_MAP","TYPE_MAP","zstd","supercompressionScheme","levelIndex","levels","levelWidth","Math","max","pixelWidth","levelHeight","pixelHeight","levelDepth","pixelDepth","level","levelData","decode","uncompressedByteLength","Float32Array","BYTES_PER_ELEMENT","Uint16Array","depth","dfd","dataFormatDescriptor","colorPrimaries","transferFunction"],"sources":["/Users/juangonzalez/Documents/GitHub/vue-project-kiwi/Clinet/node_modules/three/examples/jsm/loaders/KTX2Loader.js"],"sourcesContent":["/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nimport {\n\tCompressedTexture,\n\tCompressedArrayTexture,\n\tCompressedCubeTexture,\n\tData3DTexture,\n\tDataTexture,\n\tDisplayP3ColorSpace,\n\tFileLoader,\n\tFloatType,\n\tHalfFloatType,\n\tNoColorSpace,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLinearDisplayP3ColorSpace,\n\tLinearSRGBColorSpace,\n\tLoader,\n\tRedFormat,\n\tRGB_ETC1_Format,\n\tRGB_ETC2_Format,\n\tRGB_PVRTC_4BPPV1_Format,\n\tRGB_S3TC_DXT1_Format,\n\tRGBA_ASTC_4x4_Format,\n\tRGBA_ASTC_6x6_Format,\n\tRGBA_BPTC_Format,\n\tRGBA_ETC2_EAC_Format,\n\tRGBA_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT5_Format,\n\tRGBAFormat,\n\tRGFormat,\n\tSRGBColorSpace,\n\tUnsignedByteType,\n} from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport {\n\tread,\n\tKHR_DF_FLAG_ALPHA_PREMULTIPLIED,\n\tKHR_DF_TRANSFER_SRGB,\n\tKHR_SUPERCOMPRESSION_NONE,\n\tKHR_SUPERCOMPRESSION_ZSTD,\n\tVK_FORMAT_UNDEFINED,\n\tVK_FORMAT_R16_SFLOAT,\n\tVK_FORMAT_R16G16_SFLOAT,\n\tVK_FORMAT_R16G16B16A16_SFLOAT,\n\tVK_FORMAT_R32_SFLOAT,\n\tVK_FORMAT_R32G32_SFLOAT,\n\tVK_FORMAT_R32G32B32A32_SFLOAT,\n\tVK_FORMAT_R8_SRGB,\n\tVK_FORMAT_R8_UNORM,\n\tVK_FORMAT_R8G8_SRGB,\n\tVK_FORMAT_R8G8_UNORM,\n\tVK_FORMAT_R8G8B8A8_SRGB,\n\tVK_FORMAT_R8G8B8A8_UNORM,\n\tVK_FORMAT_ASTC_6x6_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_6x6_UNORM_BLOCK,\n\tKHR_DF_PRIMARIES_UNSPECIFIED,\n\tKHR_DF_PRIMARIES_BT709,\n\tKHR_DF_PRIMARIES_DISPLAYP3\n} from '../libs/ktx-parse.module.js';\nimport { ZSTDDecoder } from '../libs/zstddec.module.js';\n\nconst _taskCache = new WeakMap();\n\nlet _activeLoaders = 0;\n\nlet _zstd;\n\nclass KTX2Loader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.transcoderPath = '';\n\t\tthis.transcoderBinary = null;\n\t\tthis.transcoderPending = null;\n\n\t\tthis.workerPool = new WorkerPool();\n\t\tthis.workerSourceURL = '';\n\t\tthis.workerConfig = null;\n\n\t\tif ( typeof MSC_TRANSCODER !== 'undefined' ) {\n\n\t\t\tconsole.warn(\n\n\t\t\t\t'THREE.KTX2Loader: Please update to latest \"basis_transcoder\".'\n\t\t\t\t+ ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.'\n\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\tsetTranscoderPath( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\tsetWorkerLimit( num ) {\n\n\t\tthis.workerPool.setWorkerLimit( num );\n\n\t\treturn this;\n\n\t}\n\n\tdetectSupport( renderer ) {\n\n\t\tif ( renderer.isWebGPURenderer === true ) {\n\n\t\t\tthis.workerConfig = {\n\t\t\t\tastcSupported: renderer.hasFeature( 'texture-compression-astc' ),\n\t\t\t\tetc1Supported: false,\n\t\t\t\tetc2Supported: renderer.hasFeature( 'texture-compression-etc2' ),\n\t\t\t\tdxtSupported: renderer.hasFeature( 'texture-compression-bc' ),\n\t\t\t\tbptcSupported: false,\n\t\t\t\tpvrtcSupported: false\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tthis.workerConfig = {\n\t\t\t\tastcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_astc' ),\n\t\t\t\tetc1Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc1' ),\n\t\t\t\tetc2Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc' ),\n\t\t\t\tdxtSupported: renderer.extensions.has( 'WEBGL_compressed_texture_s3tc' ),\n\t\t\t\tbptcSupported: renderer.extensions.has( 'EXT_texture_compression_bptc' ),\n\t\t\t\tpvrtcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t\t\t|| renderer.extensions.has( 'WEBKIT_WEBGL_compressed_texture_pvrtc' )\n\t\t\t};\n\n\t\t\tif ( renderer.capabilities.isWebGL2 ) {\n\n\t\t\t\t// https://github.com/mrdoob/three.js/pull/22928\n\t\t\t\tthis.workerConfig.etc1Supported = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tinit() {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tconst jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tjsLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst jsContent = jsLoader.loadAsync( 'basis_transcoder.js' );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tconst binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tbinaryLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst binaryContent = binaryLoader.loadAsync( 'basis_transcoder.wasm' );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tconst fn = KTX2Loader.BasisWorker.toString();\n\n\t\t\t\t\tconst body = [\n\t\t\t\t\t\t'/* constants */',\n\t\t\t\t\t\t'let _EngineFormat = ' + JSON.stringify( KTX2Loader.EngineFormat ),\n\t\t\t\t\t\t'let _TranscoderFormat = ' + JSON.stringify( KTX2Loader.TranscoderFormat ),\n\t\t\t\t\t\t'let _BasisFormat = ' + JSON.stringify( KTX2Loader.BasisFormat ),\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t\tthis.workerPool.setWorkerCreator( () => {\n\n\t\t\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\t\t\t\t\t\tconst transcoderBinary = this.transcoderBinary.slice( 0 );\n\n\t\t\t\t\t\tworker.postMessage( { type: 'init', config: this.workerConfig, transcoderBinary }, [ transcoderBinary ] );\n\n\t\t\t\t\t\treturn worker;\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\tif ( _activeLoaders > 0 ) {\n\n\t\t\t\t// Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n\n\t\t\t\tconsole.warn(\n\n\t\t\t\t\t'THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.'\n\t\t\t\t\t+ ' Use a single KTX2Loader instance, or call .dispose() on old instances.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t_activeLoaders ++;\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.workerConfig === null ) {\n\n\t\t\tthrow new Error( 'THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.' );\n\n\t\t}\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t\t// again from this thread.\n\t\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\t\treturn cachedTask.promise.then( onLoad ).catch( onError );\n\n\t\t\t}\n\n\t\t\tthis._createTexture( buffer )\n\t\t\t\t.then( ( texture ) => onLoad ? onLoad( texture ) : null )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t_createTextureFrom( transcodeResult, container ) {\n\n\t\tconst { faces, width, height, format, type, error, dfdFlags } = transcodeResult;\n\n\t\tif ( type === 'error' ) return Promise.reject( error );\n\n\t\tlet texture;\n\n\t\tif ( container.faceCount === 6 ) {\n\n\t\t\ttexture = new CompressedCubeTexture( faces, format, UnsignedByteType );\n\n\t\t} else {\n\n\t\t\tconst mipmaps = faces[ 0 ].mipmaps;\n\n\t\t\ttexture = container.layerCount > 1\n\t\t\t\t? new CompressedArrayTexture( mipmaps, width, height, container.layerCount, format, UnsignedByteType )\n\t\t\t\t: new CompressedTexture( mipmaps, width, height, format, UnsignedByteType );\n\n\t\t}\n\n\t\ttexture.minFilter = faces[ 0 ].mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\t\ttexture.generateMipmaps = false;\n\n\t\ttexture.needsUpdate = true;\n\t\ttexture.colorSpace = parseColorSpace( container );\n\t\ttexture.premultiplyAlpha = !! ( dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED );\n\n\t\treturn texture;\n\n\t}\n\n\t/**\n\t * @param {ArrayBuffer} buffer\n\t * @param {object?} config\n\t * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n\t */\n\tasync _createTexture( buffer, config = {} ) {\n\n\t\tconst container = read( new Uint8Array( buffer ) );\n\n\t\tif ( container.vkFormat !== VK_FORMAT_UNDEFINED ) {\n\n\t\t\treturn createRawTexture( container );\n\n\t\t}\n\n\t\t//\n\t\tconst taskConfig = config;\n\t\tconst texturePending = this.init().then( () => {\n\n\t\t\treturn this.workerPool.postMessage( { type: 'transcode', buffer, taskConfig: taskConfig }, [ buffer ] );\n\n\t\t} ).then( ( e ) => this._createTextureFrom( e.data, container ) );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, { promise: texturePending } );\n\n\t\treturn texturePending;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.workerPool.dispose();\n\t\tif ( this.workerSourceURL ) URL.revokeObjectURL( this.workerSourceURL );\n\n\t\t_activeLoaders --;\n\n\t\treturn this;\n\n\t}\n\n}\n\n\n/* CONSTANTS */\n\nKTX2Loader.BasisFormat = {\n\tETC1S: 0,\n\tUASTC_4x4: 1,\n};\n\nKTX2Loader.TranscoderFormat = {\n\tETC1: 0,\n\tETC2: 1,\n\tBC1: 2,\n\tBC3: 3,\n\tBC4: 4,\n\tBC5: 5,\n\tBC7_M6_OPAQUE_ONLY: 6,\n\tBC7_M5: 7,\n\tPVRTC1_4_RGB: 8,\n\tPVRTC1_4_RGBA: 9,\n\tASTC_4x4: 10,\n\tATC_RGB: 11,\n\tATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tRGBA32: 13,\n\tRGB565: 14,\n\tBGR565: 15,\n\tRGBA4444: 16,\n};\n\nKTX2Loader.EngineFormat = {\n\tRGBAFormat: RGBAFormat,\n\tRGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n\tRGBA_BPTC_Format: RGBA_BPTC_Format,\n\tRGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n\tRGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n\tRGB_ETC1_Format: RGB_ETC1_Format,\n\tRGB_ETC2_Format: RGB_ETC2_Format,\n\tRGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n\tRGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format,\n};\n\n\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n\n\tlet config;\n\tlet transcoderPending;\n\tlet BasisModule;\n\n\tconst EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\tconst TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\tconst BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n\tself.addEventListener( 'message', function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst { faces, buffers, width, height, hasAlpha, format, dfdFlags } = transcode( message.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, faces, width, height, hasAlpha, format, dfdFlags }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t} );\n\n\tfunction init( wasmBinary ) {\n\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule ); // eslint-disable-line no-undef\n\n\t\t} ).then( () => {\n\n\t\t\tBasisModule.initializeBasis();\n\n\t\t\tif ( BasisModule.KTX2File === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.KTX2Loader: Please update Basis Universal transcoder.' );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tconst ktx2File = new BasisModule.KTX2File( new Uint8Array( buffer ) );\n\n\t\tfunction cleanup() {\n\n\t\t\tktx2File.close();\n\t\t\tktx2File.delete();\n\n\t\t}\n\n\t\tif ( ! ktx2File.isValid() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file' );\n\n\t\t}\n\n\t\tconst basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n\t\tconst width = ktx2File.getWidth();\n\t\tconst height = ktx2File.getHeight();\n\t\tconst layerCount = ktx2File.getLayers() || 1;\n\t\tconst levelCount = ktx2File.getLevels();\n\t\tconst faceCount = ktx2File.getFaces();\n\t\tconst hasAlpha = ktx2File.getHasAlpha();\n\t\tconst dfdFlags = ktx2File.getDFDFlags();\n\n\t\tconst { transcoderFormat, engineFormat } = getTranscoderFormat( basisFormat, width, height, hasAlpha );\n\n\t\tif ( ! width || ! height || ! levelCount ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader:\tInvalid texture' );\n\n\t\t}\n\n\t\tif ( ! ktx2File.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tconst faces = [];\n\t\tconst buffers = [];\n\n\t\tfor ( let face = 0; face < faceCount; face ++ ) {\n\n\t\t\tconst mipmaps = [];\n\n\t\t\tfor ( let mip = 0; mip < levelCount; mip ++ ) {\n\n\t\t\t\tconst layerMips = [];\n\n\t\t\t\tlet mipWidth, mipHeight;\n\n\t\t\t\tfor ( let layer = 0; layer < layerCount; layer ++ ) {\n\n\t\t\t\t\tconst levelInfo = ktx2File.getImageLevelInfo( mip, layer, face );\n\n\t\t\t\t\tif ( face === 0 && mip === 0 && layer === 0 && ( levelInfo.origWidth % 4 !== 0 || levelInfo.origHeight % 4 !== 0 ) ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( levelCount > 1 ) {\n\n\t\t\t\t\t\tmipWidth = levelInfo.origWidth;\n\t\t\t\t\t\tmipHeight = levelInfo.origHeight;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Handles non-multiple-of-four dimensions in textures without mipmaps. Textures with\n\t\t\t\t\t\t// mipmaps must use multiple-of-four dimensions, for some texture formats and APIs.\n\t\t\t\t\t\t// See mrdoob/three.js#25908.\n\t\t\t\t\t\tmipWidth = levelInfo.width;\n\t\t\t\t\t\tmipHeight = levelInfo.height;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst dst = new Uint8Array( ktx2File.getImageTranscodedSizeInBytes( mip, layer, 0, transcoderFormat ) );\n\t\t\t\t\tconst status = ktx2File.transcodeImage( dst, mip, layer, face, transcoderFormat, 0, - 1, - 1 );\n\n\t\t\t\t\tif ( ! status ) {\n\n\t\t\t\t\t\tcleanup();\n\t\t\t\t\t\tthrow new Error( 'THREE.KTX2Loader: .transcodeImage failed.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayerMips.push( dst );\n\n\t\t\t\t}\n\n\t\t\t\tconst mipData = concat( layerMips );\n\n\t\t\t\tmipmaps.push( { data: mipData, width: mipWidth, height: mipHeight } );\n\t\t\t\tbuffers.push( mipData.buffer );\n\n\t\t\t}\n\n\t\t\tfaces.push( { mipmaps, width, height, format: engineFormat } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { faces, buffers, width, height, hasAlpha, format: engineFormat, dfdFlags };\n\n\t}\n\n\t//\n\n\t// Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n\t// device capabilities, and texture dimensions. The list below ranks the formats separately\n\t// for ETC1S and UASTC.\n\t//\n\t// In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n\t// significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n\t// chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\tconst FORMAT_OPTIONS = [\n\t\t{\n\t\t\tif: 'astcSupported',\n\t\t\tbasisFormat: [ BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format ],\n\t\t\tpriorityETC1S: Infinity,\n\t\t\tpriorityUASTC: 1,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'bptcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format ],\n\t\t\tpriorityETC1S: 3,\n\t\t\tpriorityUASTC: 2,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'dxtSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC1, TranscoderFormat.BC3 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format ],\n\t\t\tpriorityETC1S: 4,\n\t\t\tpriorityUASTC: 5,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc2Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1, TranscoderFormat.ETC2 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format ],\n\t\t\tpriorityETC1S: 1,\n\t\t\tpriorityUASTC: 3,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc1Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC1_Format ],\n\t\t\tpriorityETC1S: 2,\n\t\t\tpriorityUASTC: 4,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'pvrtcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA ],\n\t\t\tengineFormat: [ EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format ],\n\t\t\tpriorityETC1S: 5,\n\t\t\tpriorityUASTC: 6,\n\t\t\tneedsPowerOfTwo: true,\n\t\t},\n\t];\n\n\tconst ETC1S_OPTIONS = FORMAT_OPTIONS.sort( function ( a, b ) {\n\n\t\treturn a.priorityETC1S - b.priorityETC1S;\n\n\t} );\n\tconst UASTC_OPTIONS = FORMAT_OPTIONS.sort( function ( a, b ) {\n\n\t\treturn a.priorityUASTC - b.priorityUASTC;\n\n\t} );\n\n\tfunction getTranscoderFormat( basisFormat, width, height, hasAlpha ) {\n\n\t\tlet transcoderFormat;\n\t\tlet engineFormat;\n\n\t\tconst options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n\t\tfor ( let i = 0; i < options.length; i ++ ) {\n\n\t\t\tconst opt = options[ i ];\n\n\t\t\tif ( ! config[ opt.if ] ) continue;\n\t\t\tif ( ! opt.basisFormat.includes( basisFormat ) ) continue;\n\t\t\tif ( hasAlpha && opt.transcoderFormat.length < 2 ) continue;\n\t\t\tif ( opt.needsPowerOfTwo && ! ( isPowerOfTwo( width ) && isPowerOfTwo( height ) ) ) continue;\n\n\t\t\ttranscoderFormat = opt.transcoderFormat[ hasAlpha ? 1 : 0 ];\n\t\t\tengineFormat = opt.engineFormat[ hasAlpha ? 1 : 0 ];\n\n\t\t\treturn { transcoderFormat, engineFormat };\n\n\t\t}\n\n\t\tconsole.warn( 'THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.' );\n\n\t\ttranscoderFormat = TranscoderFormat.RGBA32;\n\t\tengineFormat = EngineFormat.RGBAFormat;\n\n\t\treturn { transcoderFormat, engineFormat };\n\n\t}\n\n\tfunction isPowerOfTwo( value ) {\n\n\t\tif ( value <= 2 ) return true;\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t}\n\n\t/** Concatenates N byte arrays. */\n\tfunction concat( arrays ) {\n\n\t\tif ( arrays.length === 1 ) return arrays[ 0 ];\n\n\t\tlet totalByteLength = 0;\n\n\t\tfor ( let i = 0; i < arrays.length; i ++ ) {\n\n\t\t\tconst array = arrays[ i ];\n\t\t\ttotalByteLength += array.byteLength;\n\n\t\t}\n\n\t\tconst result = new Uint8Array( totalByteLength );\n\n\t\tlet byteOffset = 0;\n\n\t\tfor ( let i = 0; i < arrays.length; i ++ ) {\n\n\t\t\tconst array = arrays[ i ];\n\t\t\tresult.set( array, byteOffset );\n\n\t\t\tbyteOffset += array.byteLength;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n};\n\n//\n// Parsing for non-Basis textures. These textures are may have supercompression\n// like Zstd, but they do not require transcoding.\n\nconst UNCOMPRESSED_FORMATS = new Set( [ RGBAFormat, RGFormat, RedFormat ] );\n\nconst FORMAT_MAP = {\n\n\t[ VK_FORMAT_R32G32B32A32_SFLOAT ]: RGBAFormat,\n\t[ VK_FORMAT_R16G16B16A16_SFLOAT ]: RGBAFormat,\n\t[ VK_FORMAT_R8G8B8A8_UNORM ]: RGBAFormat,\n\t[ VK_FORMAT_R8G8B8A8_SRGB ]: RGBAFormat,\n\n\t[ VK_FORMAT_R32G32_SFLOAT ]: RGFormat,\n\t[ VK_FORMAT_R16G16_SFLOAT ]: RGFormat,\n\t[ VK_FORMAT_R8G8_UNORM ]: RGFormat,\n\t[ VK_FORMAT_R8G8_SRGB ]: RGFormat,\n\n\t[ VK_FORMAT_R32_SFLOAT ]: RedFormat,\n\t[ VK_FORMAT_R16_SFLOAT ]: RedFormat,\n\t[ VK_FORMAT_R8_SRGB ]: RedFormat,\n\t[ VK_FORMAT_R8_UNORM ]: RedFormat,\n\n\t[ VK_FORMAT_ASTC_6x6_SRGB_BLOCK ]: RGBA_ASTC_6x6_Format,\n\t[ VK_FORMAT_ASTC_6x6_UNORM_BLOCK ]: RGBA_ASTC_6x6_Format,\n\n};\n\nconst TYPE_MAP = {\n\n\t[ VK_FORMAT_R32G32B32A32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16G16B16A16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8G8B8A8_UNORM ]: UnsignedByteType,\n\t[ VK_FORMAT_R8G8B8A8_SRGB ]: UnsignedByteType,\n\n\t[ VK_FORMAT_R32G32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16G16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8G8_UNORM ]: UnsignedByteType,\n\t[ VK_FORMAT_R8G8_SRGB ]: UnsignedByteType,\n\n\t[ VK_FORMAT_R32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8_SRGB ]: UnsignedByteType,\n\t[ VK_FORMAT_R8_UNORM ]: UnsignedByteType,\n\n\t[ VK_FORMAT_ASTC_6x6_SRGB_BLOCK ]: UnsignedByteType,\n\t[ VK_FORMAT_ASTC_6x6_UNORM_BLOCK ]: UnsignedByteType,\n\n};\n\nasync function createRawTexture( container ) {\n\n\tconst { vkFormat } = container;\n\n\tif ( FORMAT_MAP[ vkFormat ] === undefined ) {\n\n\t\tthrow new Error( 'THREE.KTX2Loader: Unsupported vkFormat.' );\n\n\t}\n\n\t//\n\n\tlet zstd;\n\n\tif ( container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD ) {\n\n\t\tif ( ! _zstd ) {\n\n\t\t\t_zstd = new Promise( async ( resolve ) => {\n\n\t\t\t\tconst zstd = new ZSTDDecoder();\n\t\t\t\tawait zstd.init();\n\t\t\t\tresolve( zstd );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tzstd = await _zstd;\n\n\t}\n\n\t//\n\n\tconst mipmaps = [];\n\n\n\tfor ( let levelIndex = 0; levelIndex < container.levels.length; levelIndex ++ ) {\n\n\t\tconst levelWidth = Math.max( 1, container.pixelWidth >> levelIndex );\n\t\tconst levelHeight = Math.max( 1, container.pixelHeight >> levelIndex );\n\t\tconst levelDepth = container.pixelDepth ? Math.max( 1, container.pixelDepth >> levelIndex ) : 0;\n\n\t\tconst level = container.levels[ levelIndex ];\n\n\t\tlet levelData;\n\n\t\tif ( container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE ) {\n\n\t\t\tlevelData = level.levelData;\n\n\t\t} else if ( container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD ) {\n\n\t\t\tlevelData = zstd.decode( level.levelData, level.uncompressedByteLength );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.KTX2Loader: Unsupported supercompressionScheme.' );\n\n\t\t}\n\n\t\tlet data;\n\n\t\tif ( TYPE_MAP[ vkFormat ] === FloatType ) {\n\n\t\t\tdata = new Float32Array(\n\n\t\t\t\tlevelData.buffer,\n\t\t\t\tlevelData.byteOffset,\n\t\t\t\tlevelData.byteLength / Float32Array.BYTES_PER_ELEMENT\n\n\t\t\t);\n\n\t\t} else if ( TYPE_MAP[ vkFormat ] === HalfFloatType ) {\n\n\t\t\tdata = new Uint16Array(\n\n\t\t\t\tlevelData.buffer,\n\t\t\t\tlevelData.byteOffset,\n\t\t\t\tlevelData.byteLength / Uint16Array.BYTES_PER_ELEMENT\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tdata = levelData;\n\n\t\t}\n\n\t\tmipmaps.push( {\n\n\t\t\tdata: data,\n\t\t\twidth: levelWidth,\n\t\t\theight: levelHeight,\n\t\t\tdepth: levelDepth,\n\n\t\t} );\n\n\t}\n\n\tlet texture;\n\n\tif ( UNCOMPRESSED_FORMATS.has( FORMAT_MAP[ vkFormat ] ) ) {\n\n\t\ttexture = container.pixelDepth === 0\n\t\t? new DataTexture( mipmaps[ 0 ].data, container.pixelWidth, container.pixelHeight )\n\t\t: new Data3DTexture( mipmaps[ 0 ].data, container.pixelWidth, container.pixelHeight, container.pixelDepth );\n\n\t} else {\n\n\t\tif ( container.pixelDepth > 0 ) throw new Error( 'THREE.KTX2Loader: Unsupported pixelDepth.' );\n\n\t\ttexture = new CompressedTexture( mipmaps, container.pixelWidth, container.pixelHeight );\n\n\t}\n\n\ttexture.mipmaps = mipmaps;\n\n\ttexture.type = TYPE_MAP[ vkFormat ];\n\ttexture.format = FORMAT_MAP[ vkFormat ];\n\ttexture.colorSpace = parseColorSpace( container );\n\ttexture.needsUpdate = true;\n\n\t//\n\n\treturn Promise.resolve( texture );\n\n}\n\nfunction parseColorSpace( container ) {\n\n\tconst dfd = container.dataFormatDescriptor[ 0 ];\n\n\tif ( dfd.colorPrimaries === KHR_DF_PRIMARIES_BT709 ) {\n\n\t\treturn dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? SRGBColorSpace : LinearSRGBColorSpace;\n\n\t} else if ( dfd.colorPrimaries === KHR_DF_PRIMARIES_DISPLAYP3 ) {\n\n\t\treturn dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? DisplayP3ColorSpace : LinearDisplayP3ColorSpace;\n\n\t} else if ( dfd.colorPrimaries === KHR_DF_PRIMARIES_UNSPECIFIED ) {\n\n\t\treturn NoColorSpace;\n\n\t} else {\n\n\t\tconsole.warn( `THREE.KTX2Loader: Unsupported color primaries, \"${ dfd.colorPrimaries }\"` );\n\t\treturn NoColorSpace;\n\n\t}\n\n}\n\nexport { KTX2Loader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}